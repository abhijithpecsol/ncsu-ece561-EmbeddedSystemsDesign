; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tasks.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tasks.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tasks.crf src\tasks.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Init_Debug_Signals PROC
;;;17     
;;;18     void Init_Debug_Signals(void) {
000000  b530              PUSH     {r4,r5,lr}
;;;19     	// Enable clock to port B
;;;20     	SIM->SCGC5 |= SIM_SCGC5_PORTB_MASK;
000002  487a              LDR      r0,|L1.492|
000004  6b81              LDR      r1,[r0,#0x38]
000006  1502              ASRS     r2,r0,#20
000008  4311              ORRS     r1,r1,r2
00000a  6381              STR      r1,[r0,#0x38]
;;;21     	
;;;22     	// Make 3 pins GPIO
;;;23     	PORTB->PCR[DEBUG_T0_POS] &= ~PORT_PCR_MUX_MASK;          
00000c  4878              LDR      r0,|L1.496|
00000e  6802              LDR      r2,[r0,#0]
000010  2107              MOVS     r1,#7
000012  0209              LSLS     r1,r1,#8
000014  438a              BICS     r2,r2,r1
000016  6002              STR      r2,[r0,#0]
;;;24     	PORTB->PCR[DEBUG_T0_POS] |= PORT_PCR_MUX(1);          
000018  6803              LDR      r3,[r0,#0]
00001a  1582              ASRS     r2,r0,#22
00001c  4313              ORRS     r3,r3,r2
00001e  6003              STR      r3,[r0,#0]
;;;25     	PORTB->PCR[DEBUG_T1_POS] &= ~PORT_PCR_MUX_MASK;          
000020  6843              LDR      r3,[r0,#4]
000022  438b              BICS     r3,r3,r1
000024  6043              STR      r3,[r0,#4]
;;;26     	PORTB->PCR[DEBUG_T1_POS] |= PORT_PCR_MUX(1);          
000026  6843              LDR      r3,[r0,#4]
000028  4313              ORRS     r3,r3,r2
00002a  6043              STR      r3,[r0,#4]
;;;27     	PORTB->PCR[DEBUG_T2_POS] &= ~PORT_PCR_MUX_MASK;          
00002c  6883              LDR      r3,[r0,#8]
00002e  438b              BICS     r3,r3,r1
000030  6083              STR      r3,[r0,#8]
;;;28     	PORTB->PCR[DEBUG_T2_POS] |= PORT_PCR_MUX(1);          
000032  6883              LDR      r3,[r0,#8]
000034  4313              ORRS     r3,r3,r2
000036  6083              STR      r3,[r0,#8]
;;;29     	PORTB->PCR[DEBUG_T3_POS] &= ~PORT_PCR_MUX_MASK;          
000038  68c3              LDR      r3,[r0,#0xc]
00003a  438b              BICS     r3,r3,r1
00003c  60c3              STR      r3,[r0,#0xc]
;;;30     	PORTB->PCR[DEBUG_T3_POS] |= PORT_PCR_MUX(1);          
00003e  68c1              LDR      r1,[r0,#0xc]
000040  4311              ORRS     r1,r1,r2
000042  60c1              STR      r1,[r0,#0xc]
;;;31     	
;;;32     	// Set ports to outputs
;;;33     	PTB->PDDR |= MASK(DEBUG_T0_POS);
000044  486b              LDR      r0,|L1.500|
000046  6941              LDR      r1,[r0,#0x14]
000048  2301              MOVS     r3,#1
00004a  4319              ORRS     r1,r1,r3
00004c  6141              STR      r1,[r0,#0x14]
;;;34     	PTB->PDDR |= MASK(DEBUG_T1_POS);
00004e  6941              LDR      r1,[r0,#0x14]
000050  2402              MOVS     r4,#2
000052  4321              ORRS     r1,r1,r4
000054  6141              STR      r1,[r0,#0x14]
;;;35     	PTB->PDDR |= MASK(DEBUG_T2_POS);
000056  6941              LDR      r1,[r0,#0x14]
000058  2504              MOVS     r5,#4
00005a  4329              ORRS     r1,r1,r5
00005c  6141              STR      r1,[r0,#0x14]
;;;36     	PTB->PDDR |= MASK(DEBUG_T3_POS);
00005e  6942              LDR      r2,[r0,#0x14]
000060  2108              MOVS     r1,#8
000062  430a              ORRS     r2,r2,r1
000064  6142              STR      r2,[r0,#0x14]
;;;37     	
;;;38     	// Initial values are 0
;;;39     	PTB->PCOR = MASK(DEBUG_T0_POS);
000066  6083              STR      r3,[r0,#8]
;;;40     	PTB->PCOR = MASK(DEBUG_T1_POS);
000068  6084              STR      r4,[r0,#8]
;;;41     	PTB->PCOR = MASK(DEBUG_T2_POS);
00006a  6085              STR      r5,[r0,#8]
;;;42     	PTB->PCOR = MASK(DEBUG_T3_POS);
00006c  6081              STR      r1,[r0,#8]
;;;43     }	
00006e  bd30              POP      {r4,r5,pc}
;;;44     
                          ENDP

                  Task_Read_Accelerometer PROC
;;;86     
;;;87     __task void Task_Read_Accelerometer(void) {
000070  b51f              PUSH     {r0-r4,lr}
;;;88     	char buffer[16];
;;;89     	
;;;90     	os_itv_set(TASK_READ_ACCELEROMETER_PERIOD_TICKS);
000072  4f61              LDR      r7,|L1.504|
000074  20fa              MOVS     r0,#0xfa
000076  46bc              MOV      r12,r7
000078  df00              SVC      #0x0
;;;91     
;;;92     	while (1) {
;;;93     		os_itv_wait();
;;;94     		PTB->PSOR = MASK(DEBUG_T0_POS);
00007a  4d5e              LDR      r5,|L1.500|
;;;95     		read_full_xyz();
;;;96     		convert_xyz_to_roll_pitch();
;;;97     #if 0
;;;98     		sprintf(buffer, "X: %6d", acc_X);
;;;99     		TFT_Text_PrintStr_RC(2, 0, buffer);
;;;100    		sprintf(buffer, "Y: %6d", acc_Y);
;;;101    		TFT_Text_PrintStr_RC(3, 0, buffer);
;;;102    		sprintf(buffer, "Z: %6d", acc_Z);
;;;103    		TFT_Text_PrintStr_RC(4, 0, buffer);
;;;104    #else
;;;105    		// PTB->PTOR = MASK(DEBUG_T0_POS);
;;;106    		sprintf(buffer, "Roll: %6.2f", roll);
;;;107    		// PTB->PTOR = MASK(DEBUG_T0_POS);
;;;108    
;;;109    		os_mut_wait(&LCD_mutex, WAIT_FOREVER);
00007c  4e5f              LDR      r6,|L1.508|
00007e  2401              MOVS     r4,#1                 ;94
                  |L1.128|
000080  4f5f              LDR      r7,|L1.512|
000082  46bc              MOV      r12,r7                ;93
000084  df00              SVC      #0x0                  ;93
000086  606c              STR      r4,[r5,#4]            ;94
000088  f7fffffe          BL       read_full_xyz
00008c  f7fffffe          BL       convert_xyz_to_roll_pitch
000090  485c              LDR      r0,|L1.516|
000092  6800              LDR      r0,[r0,#0]            ;106  ; roll
000094  f7fffffe          BL       __aeabi_f2d
000098  4602              MOV      r2,r0                 ;106
00009a  460b              MOV      r3,r1                 ;106
00009c  a15a              ADR      r1,|L1.520|
00009e  4668              MOV      r0,sp                 ;106
0000a0  f7fffffe          BL       __2sprintf
0000a4  4f5c              LDR      r7,|L1.536|
0000a6  4631              MOV      r1,r6
0000a8  485a              LDR      r0,|L1.532|
0000aa  46bc              MOV      r12,r7
0000ac  df00              SVC      #0x0
;;;110    		TFT_Text_PrintStr_RC(2, 0, buffer);
0000ae  466a              MOV      r2,sp
0000b0  2100              MOVS     r1,#0
0000b2  2002              MOVS     r0,#2
0000b4  f7fffffe          BL       TFT_Text_PrintStr_RC
;;;111    		os_mut_release(&LCD_mutex);
0000b8  4f58              LDR      r7,|L1.540|
0000ba  4856              LDR      r0,|L1.532|
0000bc  46bc              MOV      r12,r7
0000be  df00              SVC      #0x0
;;;112    		
;;;113    		// PTB->PTOR = MASK(DEBUG_T0_POS);
;;;114    		sprintf(buffer, "Pitch: %6.2f", pitch);
0000c0  4857              LDR      r0,|L1.544|
0000c2  6800              LDR      r0,[r0,#0]  ; pitch
0000c4  f7fffffe          BL       __aeabi_f2d
0000c8  4602              MOV      r2,r0
0000ca  460b              MOV      r3,r1
0000cc  a155              ADR      r1,|L1.548|
0000ce  4668              MOV      r0,sp
0000d0  f7fffffe          BL       __2sprintf
;;;115    		// PTB->PTOR = MASK(DEBUG_T0_POS);
;;;116    
;;;117    		os_mut_wait(&LCD_mutex, WAIT_FOREVER);
0000d4  4f50              LDR      r7,|L1.536|
0000d6  4631              MOV      r1,r6
0000d8  484e              LDR      r0,|L1.532|
0000da  46bc              MOV      r12,r7
0000dc  df00              SVC      #0x0
;;;118    		TFT_Text_PrintStr_RC(3, 0, buffer);
0000de  466a              MOV      r2,sp
0000e0  2100              MOVS     r1,#0
0000e2  2003              MOVS     r0,#3
0000e4  f7fffffe          BL       TFT_Text_PrintStr_RC
;;;119    		os_mut_release(&LCD_mutex);
0000e8  4f4c              LDR      r7,|L1.540|
0000ea  484a              LDR      r0,|L1.532|
0000ec  46bc              MOV      r12,r7
0000ee  df00              SVC      #0x0
;;;120    #endif
;;;121    		PTB->PCOR = MASK(DEBUG_T0_POS);
0000f0  60ac              STR      r4,[r5,#8]
0000f2  e7c5              B        |L1.128|
;;;122    	}
;;;123    }
;;;124    
                          ENDP

                  Task_Read_TS PROC
;;;54     
;;;55     __task void Task_Read_TS(void) {
0000f4  b086              SUB      sp,sp,#0x18
;;;56     	PT_T p, pp;
;;;57     	COLOR_T c;
;;;58     	
;;;59     	c.R = 150;
0000f6  2096              MOVS     r0,#0x96
0000f8  4669              MOV      r1,sp
0000fa  7108              STRB     r0,[r1,#4]
;;;60     	c.G = 200;
0000fc  20c8              MOVS     r0,#0xc8
0000fe  7148              STRB     r0,[r1,#5]
;;;61     	c.B = 255;
000100  20ff              MOVS     r0,#0xff
000102  7188              STRB     r0,[r1,#6]
;;;62     	
;;;63     	os_itv_set(TASK_READ_TS_PERIOD_TICKS);
000104  4f3c              LDR      r7,|L1.504|
000106  2014              MOVS     r0,#0x14
000108  46bc              MOV      r12,r7
00010a  df00              SVC      #0x0
;;;64     
;;;65     	while (1) {
00010c  2600              MOVS     r6,#0
;;;66     		os_itv_wait();
;;;67     		PTB->PSOR = MASK(DEBUG_T1_POS);
00010e  4d39              LDR      r5,|L1.500|
000110  2402              MOVS     r4,#2
                  |L1.274|
000112  4f3b              LDR      r7,|L1.512|
000114  46bc              MOV      r12,r7                ;66
000116  df00              SVC      #0x0                  ;66
000118  606c              STR      r4,[r5,#4]
;;;68     		if (TFT_TS_Read(&p)) { 
00011a  a804              ADD      r0,sp,#0x10
00011c  f7fffffe          BL       TFT_TS_Read
000120  2800              CMP      r0,#0
000122  d019              BEQ      |L1.344|
;;;69     			// Send message indicating screen was pressed
;;;70     			os_evt_set(EV_PLAYSOUND, t_Sound);
000124  4843              LDR      r0,|L1.564|
000126  4f44              LDR      r7,|L1.568|
000128  6881              LDR      r1,[r0,#8]  ; t_Sound
00012a  2001              MOVS     r0,#1
00012c  46bc              MOV      r12,r7
00012e  df00              SVC      #0x0
;;;71     			// Also draw on screen
;;;72     			if ((pp.X == 0) && (pp.Y == 0)) {
000130  9802              LDR      r0,[sp,#8]
000132  2800              CMP      r0,#0
000134  d106              BNE      |L1.324|
000136  9803              LDR      r0,[sp,#0xc]
000138  2800              CMP      r0,#0
00013a  d103              BNE      |L1.324|
;;;73     				pp = p;
00013c  9905              LDR      r1,[sp,#0x14]
00013e  9804              LDR      r0,[sp,#0x10]
000140  9103              STR      r1,[sp,#0xc]
000142  9002              STR      r0,[sp,#8]
                  |L1.324|
;;;74     			}
;;;75     			// os_mut_wait(&LCD_mutex, WAIT_FOREVER);
;;;76     			TFT_Draw_Line(&p, &pp, &c);
000144  aa01              ADD      r2,sp,#4
000146  a902              ADD      r1,sp,#8
000148  a804              ADD      r0,sp,#0x10
00014a  f7fffffe          BL       TFT_Draw_Line
;;;77     			// os_mut_release(&LCD_mutex);
;;;78     			pp = p;
00014e  9905              LDR      r1,[sp,#0x14]
000150  9804              LDR      r0,[sp,#0x10]
000152  9103              STR      r1,[sp,#0xc]
000154  9002              STR      r0,[sp,#8]
000156  e001              B        |L1.348|
                  |L1.344|
;;;79     		} else {
;;;80     			pp.X = 0;
000158  9602              STR      r6,[sp,#8]
;;;81     			pp.Y = 0;
00015a  9603              STR      r6,[sp,#0xc]
                  |L1.348|
;;;82     		}
;;;83     		PTB->PCOR = MASK(DEBUG_T1_POS);
00015c  60ac              STR      r4,[r5,#8]
00015e  e7d8              B        |L1.274|
;;;84     	}
;;;85     }
;;;86     
                          ENDP

                  Task_Init PROC
;;;44     
;;;45     __task void Task_Init(void) {
000160  4f36              LDR      r7,|L1.572|
;;;46     	
;;;47     	os_mut_init(&LCD_mutex);
000162  482c              LDR      r0,|L1.532|
000164  46bc              MOV      r12,r7
000166  df00              SVC      #0x0
;;;48     	
;;;49     	t_Read_TS = os_tsk_create(Task_Read_TS, 4);
000168  2300              MOVS     r3,#0
00016a  4f36              LDR      r7,|L1.580|
00016c  461a              MOV      r2,r3
00016e  2104              MOVS     r1,#4
000170  4833              LDR      r0,|L1.576|
000172  46bc              MOV      r12,r7
000174  df00              SVC      #0x0
000176  4c2f              LDR      r4,|L1.564|
000178  6020              STR      r0,[r4,#0]  ; t_Read_TS
;;;50     	t_Read_Accelerometer = os_tsk_create_user(Task_Read_Accelerometer, 3, RA_Stack, 512);
00017a  2300              MOVS     r3,#0
00017c  4a32              LDR      r2,|L1.584|
00017e  4933              LDR      r1,|L1.588|
000180  4833              LDR      r0,|L1.592|
000182  46bc              MOV      r12,r7
000184  df00              SVC      #0x0
000186  6060              STR      r0,[r4,#4]  ; t_Read_Accelerometer
;;;51     //	t_Sound = os_tsk_create(Task_Sound, 2);
;;;52       os_tsk_delete_self ();
000188  4f32              LDR      r7,|L1.596|
00018a  2000              MOVS     r0,#0
00018c  46bc              MOV      r12,r7
00018e  df00              SVC      #0x0
;;;53     }
;;;54     
                          ENDP

                  Task_Sound PROC
;;;124    
;;;125    __task void Task_Sound(void) {
000190  4f19              LDR      r7,|L1.504|
;;;126    	uint32_t num_cycles, phase;
;;;127    	uint16_t val, out_val;
;;;128    	uint32_t temp_val;
;;;129    	
;;;130    	os_itv_set(TASK_SOUND_PERIOD_TICKS);
000192  2001              MOVS     r0,#1
000194  46bc              MOV      r12,r7
000196  df00              SVC      #0x0
                  |L1.408|
;;;131    
;;;132    	while (1) {
;;;133    //		os_evt_wait_and(EV_PLAYSOUND, WAIT_FOREVER); // wait for trigger
;;;134    		val = MAX_DAC_CODE/2;
000198  4c2f              LDR      r4,|L1.600|
;;;135    		out_val = 0;
;;;136    		phase = 1;
00019a  2001              MOVS     r0,#1
00019c  4686              MOV      lr,r0
;;;137    		for (num_cycles = 0; num_cycles < 1000; num_cycles++) {
00019e  2600              MOVS     r6,#0
                  |L1.416|
;;;138    			PTB->PSOR = MASK(DEBUG_T2_POS);
0001a0  4914              LDR      r1,|L1.500|
0001a2  2004              MOVS     r0,#4
0001a4  6048              STR      r0,[r1,#4]
;;;139    #if 0
;;;140    			out_val = MAX_DAC_CODE - out_val;	
;;;141    #else
;;;142    			// Generate next sample
;;;143    			if (phase > 0) {
0001a6  4670              MOV      r0,lr
0001a8  2800              CMP      r0,#0
0001aa  d003              BEQ      |L1.436|
;;;144    				out_val = MAX_DAC_CODE/2 + val;
0001ac  482a              LDR      r0,|L1.600|
0001ae  1820              ADDS     r0,r4,r0
0001b0  b285              UXTH     r5,r0
0001b2  e002              B        |L1.442|
                  |L1.436|
;;;145    			} else {
;;;146    				out_val = MAX_DAC_CODE/2 - val;
0001b4  4828              LDR      r0,|L1.600|
0001b6  1b00              SUBS     r0,r0,r4
0001b8  b285              UXTH     r5,r0
                  |L1.442|
;;;147    			}
;;;148    			phase = 1 - phase;
0001ba  4670              MOV      r0,lr
0001bc  2101              MOVS     r1,#1
0001be  1a08              SUBS     r0,r1,r0
0001c0  4686              MOV      lr,r0
;;;149    			temp_val = val * 0xFF00;
0001c2  20ff              MOVS     r0,#0xff
0001c4  0200              LSLS     r0,r0,#8
0001c6  4344              MULS     r4,r0,r4
;;;150    			val = temp_val >> 16;
0001c8  0c24              LSRS     r4,r4,#16
;;;151    #endif
;;;152    			// Wait for next interval to play the sample
;;;153    			os_itv_wait(); 
0001ca  4f0d              LDR      r7,|L1.512|
0001cc  46bc              MOV      r12,r7
0001ce  df00              SVC      #0x0
;;;154    			// Send sample to DAC
;;;155    			DAC0->DAT[0].DATH = DAC_DATH_DATA1(out_val >> 8);
0001d0  0528              LSLS     r0,r5,#20
0001d2  0f01              LSRS     r1,r0,#28
0001d4  4821              LDR      r0,|L1.604|
0001d6  7041              STRB     r1,[r0,#1]
;;;156    			DAC0->DAT[0].DATL = DAC_DATL_DATA0(out_val);
0001d8  7005              STRB     r5,[r0,#0]
;;;157    			PTB->PCOR = MASK(DEBUG_T2_POS);
0001da  4906              LDR      r1,|L1.500|
0001dc  2004              MOVS     r0,#4
0001de  6088              STR      r0,[r1,#8]
0001e0  1c76              ADDS     r6,r6,#1              ;137
0001e2  207d              MOVS     r0,#0x7d              ;137
0001e4  00c0              LSLS     r0,r0,#3              ;137
0001e6  4286              CMP      r6,r0                 ;137
0001e8  d3da              BCC      |L1.416|
0001ea  e7d5              B        |L1.408|
;;;158    
;;;159    		}
;;;160    	}
;;;161    }
                          ENDP

                  |L1.492|
                          DCD      0x40048000
                  |L1.496|
                          DCD      0x4004a000
                  |L1.500|
                          DCD      0x400ff040
                  |L1.504|
                          DCD      rt_itv_set
                  |L1.508|
                          DCD      0x0000ffff
                  |L1.512|
                          DCD      rt_itv_wait
                  |L1.516|
                          DCD      roll
                  |L1.520|
000208  526f6c6c          DCB      "Roll: %6.2f",0
00020c  3a202536
000210  2e326600
                  |L1.532|
                          DCD      ||.bss||+0x200
                  |L1.536|
                          DCD      rt_mut_wait
                  |L1.540|
                          DCD      rt_mut_release
                  |L1.544|
                          DCD      pitch
                  |L1.548|
000224  50697463          DCB      "Pitch: %6.2f",0
000228  683a2025
00022c  362e3266
000230  00      
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
                  |L1.564|
                          DCD      ||.data||
                  |L1.568|
                          DCD      rt_evt_set
                  |L1.572|
                          DCD      rt_mut_init
                  |L1.576|
                          DCD      Task_Read_TS
                  |L1.580|
                          DCD      rt_tsk_create
                  |L1.584|
                          DCD      ||.bss||
                  |L1.588|
                          DCD      0x00020003
                  |L1.592|
                          DCD      Task_Read_Accelerometer
                  |L1.596|
                          DCD      rt_tsk_delete
                  |L1.600|
                          DCD      0x000007ff
                  |L1.604|
                          DCD      0x4003f000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  RA_Stack
                          %        512
                  LCD_mutex
                          %        16

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.bss||
                  TS_mutex
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  t_Read_TS
                          DCD      0x00000000
                  t_Read_Accelerometer
                          DCD      0x00000000
                  t_Sound
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\tasks.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_tasks_c_ebb4e44d____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_tasks_c_ebb4e44d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_tasks_c_ebb4e44d____REVSH|
#line 144
|__asm___7_tasks_c_ebb4e44d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
