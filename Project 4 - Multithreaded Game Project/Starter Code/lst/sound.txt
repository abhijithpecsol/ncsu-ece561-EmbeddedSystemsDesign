; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\sound.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sound.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\sound.crf src\sound.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Init_DAC PROC
;;;4      
;;;5      void Init_DAC(void) {
000000  481c              LDR      r0,|L1.116|
;;;6        // Init DAC output
;;;7      	
;;;8      	SIM->SCGC6 |= (1UL << SIM_SCGC6_DAC0_SHIFT); 
000002  6bc1              LDR      r1,[r0,#0x3c]
000004  0402              LSLS     r2,r0,#16
000006  4311              ORRS     r1,r1,r2
000008  63c1              STR      r1,[r0,#0x3c]
;;;9      	SIM->SCGC5 |= (1UL << SIM_SCGC5_PORTE_SHIFT); 
00000a  6b81              LDR      r1,[r0,#0x38]
00000c  0c92              LSRS     r2,r2,#18
00000e  4311              ORRS     r1,r1,r2
000010  6381              STR      r1,[r0,#0x38]
;;;10     	
;;;11     	PORTE->PCR[DAC_POS] &= ~PORT_PCR_MUX_MASK;	
000012  4819              LDR      r0,|L1.120|
000014  6b81              LDR      r1,[r0,#0x38]
000016  2207              MOVS     r2,#7
000018  0212              LSLS     r2,r2,#8
00001a  4391              BICS     r1,r1,r2
00001c  6381              STR      r1,[r0,#0x38]
;;;12     	PORTE->PCR[DAC_POS] |= PORT_PCR_MUX(0);	// Select analog 
00001e  6b81              LDR      r1,[r0,#0x38]
000020  6381              STR      r1,[r0,#0x38]
;;;13     		
;;;14     	// Disable buffer mode
;;;15     	DAC0->C1 = 0;
000022  4816              LDR      r0,|L1.124|
000024  2100              MOVS     r1,#0
000026  7081              STRB     r1,[r0,#2]
;;;16     	DAC0->C2 = 0;
000028  70c1              STRB     r1,[r0,#3]
;;;17     	
;;;18     	// Enable DAC, select VDDA as reference voltage
;;;19     	DAC0->C0 = (1 << DAC_C0_DACEN_SHIFT) | 
00002a  21c0              MOVS     r1,#0xc0
00002c  7041              STRB     r1,[r0,#1]
;;;20     							(1 << DAC_C0_DACRFS_SHIFT);
;;;21     
;;;22     }
00002e  4770              BX       lr
;;;23     
                          ENDP

                  Play_Sound_Sample PROC
;;;26     */
;;;27     void Play_Sound_Sample(uint16_t val) {
000030  0501              LSLS     r1,r0,#20
;;;28     	DAC0->DAT[0].DATH = DAC_DATH_DATA1(val >> 8);
000032  0f0a              LSRS     r2,r1,#28
000034  4911              LDR      r1,|L1.124|
000036  3920              SUBS     r1,r1,#0x20
000038  704a              STRB     r2,[r1,#1]
;;;29     	DAC0->DAT[0].DATL = DAC_DATL_DATA0(val);
00003a  7008              STRB     r0,[r1,#0]
;;;30     }
00003c  4770              BX       lr
;;;31     
                          ENDP

                  Sound_Init PROC
;;;32     /* Initialize sound hardware */
;;;33     void Sound_Init(void) {
00003e  b500              PUSH     {lr}
;;;34     	Init_DAC();
000040  f7fffffe          BL       Init_DAC
;;;35     	SIM->SCGC5 |= (1UL << SIM_SCGC5_PORTE_SHIFT); 
000044  480b              LDR      r0,|L1.116|
000046  6b81              LDR      r1,[r0,#0x38]
000048  2201              MOVS     r2,#1
00004a  0352              LSLS     r2,r2,#13
00004c  4311              ORRS     r1,r1,r2
00004e  6381              STR      r1,[r0,#0x38]
;;;36     	PORTE->PCR[AMP_ENABLE_POS] &= ~PORT_PCR_MUX_MASK;	
000050  4809              LDR      r0,|L1.120|
000052  6b41              LDR      r1,[r0,#0x34]
000054  2207              MOVS     r2,#7
000056  0212              LSLS     r2,r2,#8
000058  4391              BICS     r1,r1,r2
00005a  6341              STR      r1,[r0,#0x34]
;;;37     	PORTE->PCR[AMP_ENABLE_POS] |= PORT_PCR_MUX(1);	// Select GPIO
00005c  6b41              LDR      r1,[r0,#0x34]
00005e  1582              ASRS     r2,r0,#22
000060  4311              ORRS     r1,r1,r2
000062  6341              STR      r1,[r0,#0x34]
;;;38     	PTE->PDDR |= AMP_ENABLE_POS; // set to output
000064  4806              LDR      r0,|L1.128|
000066  6942              LDR      r2,[r0,#0x14]
000068  211d              MOVS     r1,#0x1d
00006a  430a              ORRS     r2,r2,r1
00006c  6142              STR      r2,[r0,#0x14]
;;;39     	PTE->PSOR = AMP_ENABLE_POS;  // enable audio amp
00006e  6041              STR      r1,[r0,#4]
;;;40     }
000070  bd00              POP      {pc}
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      0x40048000
                  |L1.120|
                          DCD      0x4004d040
                  |L1.124|
                          DCD      0x4003f020
                  |L1.128|
                          DCD      0x400ff100

;*** Start embedded assembler ***

#line 1 "src\\sound.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_sound_c_Init_DAC____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_sound_c_Init_DAC____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_sound_c_Init_DAC____REVSH|
#line 144
|__asm___7_sound_c_Init_DAC____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
