; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tft_lcd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tft_lcd.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tft_lcd.crf src\tft_lcd.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  TFT_GPIO_Init PROC
;;;20     /**************************************************************/
;;;21     void TFT_GPIO_Init(void) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;22     	unsigned i;
;;;23     	
;;;24     	// Enable clock to ports
;;;25     	SIM->SCGC5 |= SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTE_MASK;
000002  48f9              LDR      r0,|L1.1000|
000004  6b81              LDR      r1,[r0,#0x38]
000006  2205              MOVS     r2,#5
000008  02d2              LSLS     r2,r2,#11
00000a  4311              ORRS     r1,r1,r2
00000c  6381              STR      r1,[r0,#0x38]
;;;26     	
;;;27     	// Make digital pins GPIO
;;;28     	// Data bus pins
;;;29     	for (i=TFT_DB8_POS; i<=TFT_DB15_POS; i++) {
00000e  2003              MOVS     r0,#3
;;;30     		PORTC->PCR[i] &= ~PORT_PCR_MUX_MASK;
000010  4cf6              LDR      r4,|L1.1004|
000012  2507              MOVS     r5,#7
000014  022d              LSLS     r5,r5,#8
;;;31     		PORTC->PCR[i] |= PORT_PCR_MUX(1);
000016  15a6              ASRS     r6,r4,#22
;;;32     		PTC->PDDR |= MASK(i);
000018  4bf5              LDR      r3,|L1.1008|
00001a  2701              MOVS     r7,#1
                  |L1.28|
00001c  0081              LSLS     r1,r0,#2              ;30
00001e  1909              ADDS     r1,r1,r4              ;30
000020  680a              LDR      r2,[r1,#0]            ;30
000022  43aa              BICS     r2,r2,r5              ;30
000024  600a              STR      r2,[r1,#0]            ;30
000026  680a              LDR      r2,[r1,#0]            ;31
000028  4332              ORRS     r2,r2,r6              ;31
00002a  600a              STR      r2,[r1,#0]            ;31
00002c  695a              LDR      r2,[r3,#0x14]
00002e  4639              MOV      r1,r7
000030  4081              LSLS     r1,r1,r0
000032  430a              ORRS     r2,r2,r1
000034  615a              STR      r2,[r3,#0x14]
000036  1c40              ADDS     r0,r0,#1              ;29
000038  280a              CMP      r0,#0xa               ;29
00003a  d9ef              BLS      |L1.28|
;;;33     	}
;;;34     	
;;;35     	// Data/Command
;;;36     	PORTC->PCR[TFT_D_NC_POS] &= ~PORT_PCR_MUX_MASK;
00003c  6b20              LDR      r0,[r4,#0x30]
00003e  43a8              BICS     r0,r0,r5
000040  6320              STR      r0,[r4,#0x30]
;;;37     	PORTC->PCR[TFT_D_NC_POS] |= PORT_PCR_MUX(1);
000042  6b20              LDR      r0,[r4,#0x30]
000044  4330              ORRS     r0,r0,r6
000046  6320              STR      r0,[r4,#0x30]
;;;38     	// /Write
;;;39     	PORTC->PCR[TFT_NWR_POS] &= ~PORT_PCR_MUX_MASK;
000048  6b60              LDR      r0,[r4,#0x34]
00004a  43a8              BICS     r0,r0,r5
00004c  6360              STR      r0,[r4,#0x34]
;;;40     	PORTC->PCR[TFT_NWR_POS] |= PORT_PCR_MUX(1);
00004e  6b60              LDR      r0,[r4,#0x34]
000050  4330              ORRS     r0,r0,r6
000052  6360              STR      r0,[r4,#0x34]
;;;41     	// /Read
;;;42     	PORTC->PCR[TFT_NRD_POS] &= ~PORT_PCR_MUX_MASK;
000054  48e5              LDR      r0,|L1.1004|
000056  3040              ADDS     r0,r0,#0x40
000058  6801              LDR      r1,[r0,#0]
00005a  43a9              BICS     r1,r1,r5
00005c  6001              STR      r1,[r0,#0]
;;;43     	PORTC->PCR[TFT_NRD_POS] |= PORT_PCR_MUX(1);
00005e  6801              LDR      r1,[r0,#0]
000060  4331              ORRS     r1,r1,r6
000062  6001              STR      r1,[r0,#0]
;;;44     	// /Reset
;;;45     	PORTC->PCR[TFT_NRST_POS] &= ~PORT_PCR_MUX_MASK;
000064  6841              LDR      r1,[r0,#4]
000066  43a9              BICS     r1,r1,r5
000068  6041              STR      r1,[r0,#4]
;;;46     	PORTC->PCR[TFT_NRST_POS] |= PORT_PCR_MUX(1);
00006a  6841              LDR      r1,[r0,#4]
00006c  4331              ORRS     r1,r1,r6
00006e  6041              STR      r1,[r0,#4]
;;;47     
;;;48     	// Set port directions to outputs
;;;49     	FPTC->PDDR |= MASK(TFT_D_NC_POS);
000070  48e0              LDR      r0,|L1.1012|
000072  6941              LDR      r1,[r0,#0x14]
000074  2301              MOVS     r3,#1
000076  031b              LSLS     r3,r3,#12
000078  4319              ORRS     r1,r1,r3
00007a  6141              STR      r1,[r0,#0x14]
;;;50     	FPTC->PDDR |= MASK(TFT_NWR_POS);
00007c  6941              LDR      r1,[r0,#0x14]
00007e  005c              LSLS     r4,r3,#1
000080  4321              ORRS     r1,r1,r4
000082  6141              STR      r1,[r0,#0x14]
;;;51     	FPTC->PDDR |= MASK(TFT_NRD_POS);
000084  6941              LDR      r1,[r0,#0x14]
000086  011d              LSLS     r5,r3,#4
000088  4329              ORRS     r1,r1,r5
00008a  6141              STR      r1,[r0,#0x14]
;;;52     	FPTC->PDDR |= MASK(TFT_NRST_POS);
00008c  6941              LDR      r1,[r0,#0x14]
00008e  015a              LSLS     r2,r3,#5
000090  4311              ORRS     r1,r1,r2
000092  6141              STR      r1,[r0,#0x14]
;;;53     
;;;54     	// Set initial control line values to inactive (1)
;;;55     	FPTC->PDOR |= MASK(TFT_D_NC_POS);
000094  6801              LDR      r1,[r0,#0]
000096  4319              ORRS     r1,r1,r3
000098  6001              STR      r1,[r0,#0]
;;;56     	FPTC->PDOR |= MASK(TFT_NWR_POS);
00009a  6801              LDR      r1,[r0,#0]
00009c  4321              ORRS     r1,r1,r4
00009e  6001              STR      r1,[r0,#0]
;;;57     	FPTC->PDOR |= MASK(TFT_NRD_POS);
0000a0  6801              LDR      r1,[r0,#0]
0000a2  4329              ORRS     r1,r1,r5
0000a4  6001              STR      r1,[r0,#0]
;;;58     	FPTC->PDOR |= MASK(TFT_NRST_POS);
0000a6  6801              LDR      r1,[r0,#0]
0000a8  4311              ORRS     r1,r1,r2
0000aa  6001              STR      r1,[r0,#0]
;;;59     }
0000ac  bdf0              POP      {r4-r7,pc}
;;;60     
                          ENDP

                  TFT_Init_Backlight PROC
;;;63     
;;;64     void TFT_Init_Backlight(void) {
0000ae  b510              PUSH     {r4,lr}
;;;65     	// Init_PWM(TFT_BL_TPM, TFT_BL_TPM_CHANNEL, 10000 /* TFT_BL_PERIOD*/, 5000 /* TFT_BL_PERIOD/2*/);	
;;;66     	Old_Init_PWM();
0000b0  f7fffffe          BL       Old_Init_PWM
;;;67     	// TFT_Set_Backlight_Brightness(100);
;;;68     }
0000b4  bd10              POP      {r4,pc}
;;;69     
                          ENDP

                  TFT_Set_Backlight_Brightness PROC
;;;70     void TFT_Set_Backlight_Brightness(uint16_t brightness_percent){
0000b6  b510              PUSH     {r4,lr}
0000b8  4604              MOV      r4,r0
;;;71     	Set_PWM_Value(TFT_BL_TPM, TFT_BL_TPM_CHANNEL, (brightness_percent*100)/TFT_BL_PERIOD);
0000ba  48cf              LDR      r0,|L1.1016|
0000bc  21ff              MOVS     r1,#0xff
0000be  3191              ADDS     r1,r1,#0x91
0000c0  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
0000c2  f7fffffe          BL       __aeabi_uidivmod
0000c6  4601              MOV      r1,r0
0000c8  2064              MOVS     r0,#0x64
0000ca  4360              MULS     r0,r4,r0
0000cc  f7fffffe          BL       __aeabi_uidivmod
0000d0  b282              UXTH     r2,r0
0000d2  2100              MOVS     r1,#0
0000d4  48c9              LDR      r0,|L1.1020|
0000d6  f7fffffe          BL       Set_PWM_Value
;;;72     }
0000da  bd10              POP      {r4,pc}
;;;73     
                          ENDP

                  TFT_24S_Write_Command PROC
;;;75     /**************************************************************/
;;;76     void TFT_24S_Write_Command(int command)
0000dc  2201              MOVS     r2,#1
;;;77     {
;;;78     	GPIO_ResetBit(TFT_D_NC_POS);
0000de  49c5              LDR      r1,|L1.1012|
0000e0  0312              LSLS     r2,r2,#12
0000e2  608a              STR      r2,[r1,#8]
;;;79     	GPIO_Write(command);
0000e4  680a              LDR      r2,[r1,#0]
0000e6  23ff              MOVS     r3,#0xff
0000e8  00db              LSLS     r3,r3,#3
0000ea  439a              BICS     r2,r2,r3
0000ec  600a              STR      r2,[r1,#0]
0000ee  680a              LDR      r2,[r1,#0]
0000f0  0600              LSLS     r0,r0,#24
0000f2  0d40              LSRS     r0,r0,#21
0000f4  4302              ORRS     r2,r2,r0
0000f6  600a              STR      r2,[r1,#0]
;;;80     	GPIO_ResetBit(TFT_NWR_POS);
0000f8  2001              MOVS     r0,#1
0000fa  0340              LSLS     r0,r0,#13
0000fc  6088              STR      r0,[r1,#8]
;;;81     	GPIO_SetBit(TFT_NWR_POS);
0000fe  6048              STR      r0,[r1,#4]
;;;82     }
000100  4770              BX       lr
;;;83     void TFT_24S_Write_Data(int data)
                          ENDP

                  TFT_24S_Write_Data PROC
000102  2201              MOVS     r2,#1
;;;84     {
;;;85     	GPIO_SetBit(TFT_D_NC_POS);
000104  49bb              LDR      r1,|L1.1012|
000106  0312              LSLS     r2,r2,#12
000108  604a              STR      r2,[r1,#4]
;;;86     	GPIO_Write(data);
00010a  680a              LDR      r2,[r1,#0]
00010c  23ff              MOVS     r3,#0xff
00010e  00db              LSLS     r3,r3,#3
000110  439a              BICS     r2,r2,r3
000112  600a              STR      r2,[r1,#0]
000114  680a              LDR      r2,[r1,#0]
000116  0600              LSLS     r0,r0,#24
000118  0d40              LSRS     r0,r0,#21
00011a  4302              ORRS     r2,r2,r0
00011c  600a              STR      r2,[r1,#0]
;;;87     	GPIO_ResetBit(TFT_NWR_POS);
00011e  2001              MOVS     r0,#1
000120  0340              LSLS     r0,r0,#13
000122  6088              STR      r0,[r1,#8]
;;;88     	GPIO_SetBit(TFT_NWR_POS);
000124  6048              STR      r0,[r1,#4]
;;;89     }
000126  4770              BX       lr
;;;90     
                          ENDP

                  Init_ADC PROC
;;;325    
;;;326    void Init_ADC(void) {
000128  48af              LDR      r0,|L1.1000|
;;;327    	
;;;328    	SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK; 
00012a  6bc1              LDR      r1,[r0,#0x3c]
00012c  2201              MOVS     r2,#1
00012e  06d2              LSLS     r2,r2,#27
000130  4311              ORRS     r1,r1,r2
000132  63c1              STR      r1,[r0,#0x3c]
;;;329    	ADC0->CFG1 = 0x9C; // 16 bit
000134  48b2              LDR      r0,|L1.1024|
000136  219c              MOVS     r1,#0x9c
000138  6081              STR      r1,[r0,#8]
;;;330    	ADC0->SC2 = 0;
00013a  2100              MOVS     r1,#0
00013c  6201              STR      r1,[r0,#0x20]
;;;331    }
00013e  4770              BX       lr
;;;332    
                          ENDP

                  TFT_TS_Init PROC
;;;333    
;;;334    void TFT_TS_Init(void) {
000140  e7fe              B        Init_ADC
;;;335    	// Configure ADC
;;;336    	Init_ADC();
;;;337    	
;;;338    	// Configure GPIO? Done in Read function
;;;339    }
;;;340    
                          ENDP

                  TFT_Init PROC
;;;91     /**************************************************************/
;;;92     void TFT_Init()
000142  b570              PUSH     {r4-r6,lr}
;;;93     {
;;;94     	TFT_GPIO_Init();
000144  f7fffffe          BL       TFT_GPIO_Init
;;;95     	TFT_TS_Init();
000148  f7fffffe          BL       TFT_TS_Init
;;;96     	TFT_Init_Backlight();
00014c  f7fffffe          BL       TFT_Init_Backlight
;;;97     	
;;;98     	GPIO_SetBit(TFT_NRD_POS);
000150  2001              MOVS     r0,#1
000152  4ca8              LDR      r4,|L1.1012|
000154  0400              LSLS     r0,r0,#16
000156  6060              STR      r0,[r4,#4]
;;;99     	GPIO_ResetBit(TFT_NWR_POS);
000158  10c0              ASRS     r0,r0,#3
00015a  60a0              STR      r0,[r4,#8]
;;;100    	GPIO_ResetBit(TFT_NRST_POS);
00015c  0105              LSLS     r5,r0,#4
00015e  60a5              STR      r5,[r4,#8]
;;;101    	Delay(100);
000160  2064              MOVS     r0,#0x64
000162  f7fffffe          BL       Delay
;;;102    	GPIO_SetBit(TFT_NRST_POS);
000166  6065              STR      r5,[r4,#4]
;;;103    	Delay(200);
000168  20c8              MOVS     r0,#0xc8
00016a  f7fffffe          BL       Delay
;;;104    	TFT_24S_Write_Command(0x0028); //display OFF
00016e  2028              MOVS     r0,#0x28
000170  f7fffffe          BL       TFT_24S_Write_Command
;;;105    	TFT_24S_Write_Command(0x0011); //exit SLEEP mode
000174  2011              MOVS     r0,#0x11
000176  f7fffffe          BL       TFT_24S_Write_Command
;;;106    	TFT_24S_Write_Data(0x0000);
00017a  2000              MOVS     r0,#0
00017c  f7fffffe          BL       TFT_24S_Write_Data
;;;107    	TFT_24S_Write_Command(0x00CB); //Power Control A
000180  20cb              MOVS     r0,#0xcb
000182  f7fffffe          BL       TFT_24S_Write_Command
;;;108    	TFT_24S_Write_Data(0x0039); //always 0x39
000186  2039              MOVS     r0,#0x39
000188  f7fffffe          BL       TFT_24S_Write_Data
;;;109    	TFT_24S_Write_Data(0x002C); //always 0x2C
00018c  202c              MOVS     r0,#0x2c
00018e  f7fffffe          BL       TFT_24S_Write_Data
;;;110    	TFT_24S_Write_Data(0x0000); //always 0x00
000192  2000              MOVS     r0,#0
000194  f7fffffe          BL       TFT_24S_Write_Data
;;;111    	TFT_24S_Write_Data(0x0034); //Vcore = 1.6V
000198  2034              MOVS     r0,#0x34
00019a  f7fffffe          BL       TFT_24S_Write_Data
;;;112    	TFT_24S_Write_Data(0x0002); //DDVDH = 5.6V
00019e  2002              MOVS     r0,#2
0001a0  f7fffffe          BL       TFT_24S_Write_Data
;;;113    	TFT_24S_Write_Command(0x00CF); //Power Control B
0001a4  20cf              MOVS     r0,#0xcf
0001a6  f7fffffe          BL       TFT_24S_Write_Command
;;;114    	TFT_24S_Write_Data(0x0000); //always 0x00
0001aa  2000              MOVS     r0,#0
0001ac  f7fffffe          BL       TFT_24S_Write_Data
;;;115    	TFT_24S_Write_Data(0x0081); //PCEQ off
0001b0  2081              MOVS     r0,#0x81
0001b2  f7fffffe          BL       TFT_24S_Write_Data
;;;116    	TFT_24S_Write_Data(0x0030); //ESD protection
0001b6  2030              MOVS     r0,#0x30
0001b8  f7fffffe          BL       TFT_24S_Write_Data
;;;117    	TFT_24S_Write_Command(0x00E8); //Driver timing control A
0001bc  20e8              MOVS     r0,#0xe8
0001be  f7fffffe          BL       TFT_24S_Write_Command
;;;118    	TFT_24S_Write_Data(0x0085); //non-overlap
0001c2  2085              MOVS     r0,#0x85
0001c4  f7fffffe          BL       TFT_24S_Write_Data
;;;119    	TFT_24S_Write_Data(0x0001); //EQ timing
0001c8  2001              MOVS     r0,#1
0001ca  f7fffffe          BL       TFT_24S_Write_Data
;;;120    	TFT_24S_Write_Data(0x0079); //Pre-charge timing
0001ce  2079              MOVS     r0,#0x79
0001d0  f7fffffe          BL       TFT_24S_Write_Data
;;;121    	TFT_24S_Write_Command(0x00EA); //Driver timing control B
0001d4  20ea              MOVS     r0,#0xea
0001d6  f7fffffe          BL       TFT_24S_Write_Command
;;;122    	TFT_24S_Write_Data(0x0000); //Gate driver timing
0001da  2000              MOVS     r0,#0
0001dc  f7fffffe          BL       TFT_24S_Write_Data
;;;123    	TFT_24S_Write_Data(0x0000); //always 0x00
0001e0  2000              MOVS     r0,#0
0001e2  f7fffffe          BL       TFT_24S_Write_Data
;;;124    	TFT_24S_Write_Command(0x00ED); //Power-On sequence control
0001e6  20ed              MOVS     r0,#0xed
0001e8  f7fffffe          BL       TFT_24S_Write_Command
;;;125    	TFT_24S_Write_Data(0x0064); //soft start
0001ec  2064              MOVS     r0,#0x64
0001ee  f7fffffe          BL       TFT_24S_Write_Data
;;;126    	TFT_24S_Write_Data(0x0003); //power on sequence
0001f2  2003              MOVS     r0,#3
0001f4  f7fffffe          BL       TFT_24S_Write_Data
;;;127    	TFT_24S_Write_Data(0x0012); //power on sequence
0001f8  2012              MOVS     r0,#0x12
0001fa  f7fffffe          BL       TFT_24S_Write_Data
;;;128    	TFT_24S_Write_Data(0x0081); //DDVDH enhance on
0001fe  2081              MOVS     r0,#0x81
000200  f7fffffe          BL       TFT_24S_Write_Data
;;;129    	TFT_24S_Write_Command(0x00F7); //Pump ratio control
000204  20f7              MOVS     r0,#0xf7
000206  f7fffffe          BL       TFT_24S_Write_Command
;;;130    	TFT_24S_Write_Data(0x0020); //DDVDH=2xVCI
00020a  2020              MOVS     r0,#0x20
00020c  f7fffffe          BL       TFT_24S_Write_Data
;;;131    	TFT_24S_Write_Command(0x00C0); //power control 1
000210  20c0              MOVS     r0,#0xc0
000212  f7fffffe          BL       TFT_24S_Write_Command
;;;132    	TFT_24S_Write_Data(0x0026);
000216  2026              MOVS     r0,#0x26
000218  f7fffffe          BL       TFT_24S_Write_Data
;;;133    	TFT_24S_Write_Data(0x0004); //second parameter for ILI9340 (ignored by ILI9341)
00021c  2004              MOVS     r0,#4
00021e  f7fffffe          BL       TFT_24S_Write_Data
;;;134    	TFT_24S_Write_Command(0x00C1); //power control 2
000222  20c1              MOVS     r0,#0xc1
000224  f7fffffe          BL       TFT_24S_Write_Command
;;;135    	TFT_24S_Write_Data(0x0011);
000228  2011              MOVS     r0,#0x11
00022a  f7fffffe          BL       TFT_24S_Write_Data
;;;136    	TFT_24S_Write_Command(0x00C5); //VCOM control 1
00022e  20c5              MOVS     r0,#0xc5
000230  f7fffffe          BL       TFT_24S_Write_Command
;;;137    	TFT_24S_Write_Data(0x0035);
000234  2035              MOVS     r0,#0x35
000236  f7fffffe          BL       TFT_24S_Write_Data
;;;138    	TFT_24S_Write_Data(0x003E);
00023a  203e              MOVS     r0,#0x3e
00023c  f7fffffe          BL       TFT_24S_Write_Data
;;;139    	TFT_24S_Write_Command(0x00C7); //VCOM control 2
000240  20c7              MOVS     r0,#0xc7
000242  f7fffffe          BL       TFT_24S_Write_Command
;;;140    	TFT_24S_Write_Data(0x00BE);
000246  20be              MOVS     r0,#0xbe
000248  f7fffffe          BL       TFT_24S_Write_Data
;;;141    	TFT_24S_Write_Command(0x0036); //memory access control = BGR
00024c  2036              MOVS     r0,#0x36
00024e  f7fffffe          BL       TFT_24S_Write_Command
;;;142    	//	TFT_24S_Write_Data(0x0088);
;;;143    	TFT_24S_Write_Data(0x0008); // Don't mirror Y axis
000252  2008              MOVS     r0,#8
000254  f7fffffe          BL       TFT_24S_Write_Data
;;;144    	TFT_24S_Write_Command(0x00B1); //frame rate control
000258  20b1              MOVS     r0,#0xb1
00025a  f7fffffe          BL       TFT_24S_Write_Command
;;;145    	TFT_24S_Write_Data(0x0000);
00025e  2000              MOVS     r0,#0
000260  f7fffffe          BL       TFT_24S_Write_Data
;;;146    	TFT_24S_Write_Data(0x0010);
000264  2010              MOVS     r0,#0x10
000266  f7fffffe          BL       TFT_24S_Write_Data
;;;147    	TFT_24S_Write_Command(0x00B6); //display function control
00026a  20b6              MOVS     r0,#0xb6
00026c  f7fffffe          BL       TFT_24S_Write_Command
;;;148    	TFT_24S_Write_Data(0x000A);
000270  200a              MOVS     r0,#0xa
000272  f7fffffe          BL       TFT_24S_Write_Data
;;;149    	TFT_24S_Write_Data(0x00A2);
000276  20a2              MOVS     r0,#0xa2
000278  f7fffffe          BL       TFT_24S_Write_Data
;;;150    	TFT_24S_Write_Command(0x003A); //pixel format = 16 bit per pixel
00027c  203a              MOVS     r0,#0x3a
00027e  f7fffffe          BL       TFT_24S_Write_Command
;;;151    	TFT_24S_Write_Data(0x0055);
000282  2055              MOVS     r0,#0x55
000284  f7fffffe          BL       TFT_24S_Write_Data
;;;152    	TFT_24S_Write_Command(0x00F2); //3G Gamma control
000288  20f2              MOVS     r0,#0xf2
00028a  f7fffffe          BL       TFT_24S_Write_Command
;;;153    	TFT_24S_Write_Data(0x0002); //off
00028e  2002              MOVS     r0,#2
000290  f7fffffe          BL       TFT_24S_Write_Data
;;;154    	TFT_24S_Write_Command(0x0026); //Gamma curve 3
000294  2026              MOVS     r0,#0x26
000296  f7fffffe          BL       TFT_24S_Write_Command
;;;155    	TFT_24S_Write_Data(0x0001);
00029a  2001              MOVS     r0,#1
00029c  f7fffffe          BL       TFT_24S_Write_Data
;;;156    	TFT_24S_Write_Command(0x002A); //column address set
0002a0  202a              MOVS     r0,#0x2a
0002a2  f7fffffe          BL       TFT_24S_Write_Command
;;;157    	TFT_24S_Write_Data(0x0000);
0002a6  2000              MOVS     r0,#0
0002a8  f7fffffe          BL       TFT_24S_Write_Data
;;;158    	TFT_24S_Write_Data(0x0000); //start 0x0000
0002ac  2000              MOVS     r0,#0
0002ae  f7fffffe          BL       TFT_24S_Write_Data
;;;159    	TFT_24S_Write_Data(0x0000);
0002b2  2000              MOVS     r0,#0
0002b4  f7fffffe          BL       TFT_24S_Write_Data
;;;160    	TFT_24S_Write_Data(0x00EF); //end 0x00EF
0002b8  20ef              MOVS     r0,#0xef
0002ba  f7fffffe          BL       TFT_24S_Write_Data
;;;161    	TFT_24S_Write_Command(0x002B); //page address set
0002be  202b              MOVS     r0,#0x2b
0002c0  f7fffffe          BL       TFT_24S_Write_Command
;;;162    	TFT_24S_Write_Data(0x0000);
0002c4  2000              MOVS     r0,#0
0002c6  f7fffffe          BL       TFT_24S_Write_Data
;;;163    	TFT_24S_Write_Data(0x0000); //start 0x0000
0002ca  2000              MOVS     r0,#0
0002cc  f7fffffe          BL       TFT_24S_Write_Data
;;;164    	TFT_24S_Write_Data(0x0001);
0002d0  2001              MOVS     r0,#1
0002d2  f7fffffe          BL       TFT_24S_Write_Data
;;;165    	TFT_24S_Write_Data(0x003F); //end 0x013F
0002d6  203f              MOVS     r0,#0x3f
0002d8  f7fffffe          BL       TFT_24S_Write_Data
;;;166    	TFT_24S_Write_Command(0x0029); //Display ON
0002dc  2029              MOVS     r0,#0x29
0002de  f7fffffe          BL       TFT_24S_Write_Command
;;;167    }
0002e2  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP

                  TFT_Plot_Pixel PROC
;;;169    void TFT_Plot_Pixel(PT_T * pos, COLOR_T * color) {
0002e4  b570              PUSH     {r4-r6,lr}
0002e6  4605              MOV      r5,r0
0002e8  460c              MOV      r4,r1
;;;170    	uint8_t b1, b2;
;;;171    
;;;172    	// Column address set 0x2a
;;;173    	TFT_24S_Write_Command(0x002A); //column address set
0002ea  202a              MOVS     r0,#0x2a
0002ec  f7fffffe          BL       TFT_24S_Write_Command
;;;174    	TFT_24S_Write_Data(0x0000);
0002f0  2000              MOVS     r0,#0
0002f2  f7fffffe          BL       TFT_24S_Write_Data
;;;175    	TFT_24S_Write_Data(pos->X & 0xff); //start 
0002f6  7828              LDRB     r0,[r5,#0]
0002f8  f7fffffe          BL       TFT_24S_Write_Data
;;;176    	TFT_24S_Write_Data(0x0000);
0002fc  2000              MOVS     r0,#0
0002fe  f7fffffe          BL       TFT_24S_Write_Data
;;;177    	TFT_24S_Write_Data(0x00EF); //end 0x00EF
000302  20ef              MOVS     r0,#0xef
000304  f7fffffe          BL       TFT_24S_Write_Data
;;;178    	
;;;179    	// Page (row) address set 0x2b
;;;180    	TFT_24S_Write_Command(0x002B); //page address set
000308  202b              MOVS     r0,#0x2b
00030a  f7fffffe          BL       TFT_24S_Write_Command
;;;181    	TFT_24S_Write_Data(pos->Y >> 8);
00030e  6868              LDR      r0,[r5,#4]
000310  0a00              LSRS     r0,r0,#8
000312  f7fffffe          BL       TFT_24S_Write_Data
;;;182    	TFT_24S_Write_Data(pos->Y & 0xff); //start 
000316  7928              LDRB     r0,[r5,#4]
000318  f7fffffe          BL       TFT_24S_Write_Data
;;;183    	TFT_24S_Write_Data(0x0001);
00031c  2001              MOVS     r0,#1
00031e  f7fffffe          BL       TFT_24S_Write_Data
;;;184    	TFT_24S_Write_Data(0x003F); //end 0x013F	
000322  203f              MOVS     r0,#0x3f
000324  f7fffffe          BL       TFT_24S_Write_Data
;;;185    	
;;;186    	// Memory Write 0x2c
;;;187    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;188    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
000328  7820              LDRB     r0,[r4,#0]
00032a  7861              LDRB     r1,[r4,#1]
00032c  08c5              LSRS     r5,r0,#3
00032e  00ed              LSLS     r5,r5,#3
000330  0948              LSRS     r0,r1,#5
000332  4305              ORRS     r5,r5,r0
;;;189    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
000334  201c              MOVS     r0,#0x1c
000336  4001              ANDS     r1,r1,r0
000338  78a0              LDRB     r0,[r4,#2]
00033a  00ce              LSLS     r6,r1,#3
00033c  08c0              LSRS     r0,r0,#3
00033e  4306              ORRS     r6,r6,r0
;;;190    
;;;191    	TFT_24S_Write_Command(0x002c);
000340  202c              MOVS     r0,#0x2c
000342  f7fffffe          BL       TFT_24S_Write_Command
;;;192    	TFT_24S_Write_Data(b1);
000346  4628              MOV      r0,r5
000348  f7fffffe          BL       TFT_24S_Write_Data
;;;193    	TFT_24S_Write_Data(b2);
00034c  4630              MOV      r0,r6
00034e  f7fffffe          BL       TFT_24S_Write_Data
;;;194    }
000352  bd70              POP      {r4-r6,pc}
;;;195    
                          ENDP

                  TFT_Fill_Buffer PROC
;;;197    
;;;198    void TFT_Fill_Buffer(COLOR_T * color) {
000354  b5f8              PUSH     {r3-r7,lr}
000356  4604              MOV      r4,r0
;;;199    	uint32_t x, y;
;;;200    	uint8_t b1, b2;
;;;201    	
;;;202    	// Enable access to full screen, reset write pointer to origin
;;;203    	TFT_24S_Write_Command(0x002A); //column address set
000358  202a              MOVS     r0,#0x2a
00035a  f7fffffe          BL       TFT_24S_Write_Command
;;;204    	TFT_24S_Write_Data(0x0000);
00035e  2000              MOVS     r0,#0
000360  f7fffffe          BL       TFT_24S_Write_Data
;;;205    	TFT_24S_Write_Data(0x0000); //start 0x0000
000364  2000              MOVS     r0,#0
000366  f7fffffe          BL       TFT_24S_Write_Data
;;;206    	TFT_24S_Write_Data(0x0000);
00036a  2000              MOVS     r0,#0
00036c  f7fffffe          BL       TFT_24S_Write_Data
;;;207    	TFT_24S_Write_Data(0x00EF); //end 0x00EF
000370  20ef              MOVS     r0,#0xef
000372  f7fffffe          BL       TFT_24S_Write_Data
;;;208    	TFT_24S_Write_Command(0x002B); //page address set
000376  202b              MOVS     r0,#0x2b
000378  f7fffffe          BL       TFT_24S_Write_Command
;;;209    	TFT_24S_Write_Data(0x0000);
00037c  2000              MOVS     r0,#0
00037e  f7fffffe          BL       TFT_24S_Write_Data
;;;210    	TFT_24S_Write_Data(0x0000); //start 0x0000
000382  2000              MOVS     r0,#0
000384  f7fffffe          BL       TFT_24S_Write_Data
;;;211    	TFT_24S_Write_Data(0x0001);
000388  2001              MOVS     r0,#1
00038a  f7fffffe          BL       TFT_24S_Write_Data
;;;212    	TFT_24S_Write_Data(0x003F); //end 0x013F
00038e  203f              MOVS     r0,#0x3f
000390  f7fffffe          BL       TFT_24S_Write_Data
;;;213    	
;;;214    	// Memory Write 0x2c
;;;215    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;216    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
000394  7820              LDRB     r0,[r4,#0]
000396  08c1              LSRS     r1,r0,#3
000398  7860              LDRB     r0,[r4,#1]
00039a  00c9              LSLS     r1,r1,#3
00039c  0942              LSRS     r2,r0,#5
00039e  4311              ORRS     r1,r1,r2
0003a0  9100              STR      r1,[sp,#0]
;;;217    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
0003a2  211c              MOVS     r1,#0x1c
0003a4  4008              ANDS     r0,r0,r1
0003a6  00c7              LSLS     r7,r0,#3
0003a8  78a0              LDRB     r0,[r4,#2]
0003aa  08c0              LSRS     r0,r0,#3
0003ac  4307              ORRS     r7,r7,r0
;;;218    	
;;;219    	TFT_24S_Write_Command(0x002c);
0003ae  202c              MOVS     r0,#0x2c
0003b0  f7fffffe          BL       TFT_24S_Write_Command
;;;220    	for (y=0; y<320; y++) {
0003b4  2500              MOVS     r5,#0
0003b6  26ff              MOVS     r6,#0xff
0003b8  3641              ADDS     r6,r6,#0x41
                  |L1.954|
;;;221    		for (x=0; x<240; x++) {
0003ba  2400              MOVS     r4,#0
                  |L1.956|
;;;222    			TFT_24S_Write_Data(b1);
0003bc  9800              LDR      r0,[sp,#0]
0003be  f7fffffe          BL       TFT_24S_Write_Data
;;;223    			TFT_24S_Write_Data(b2);
0003c2  4638              MOV      r0,r7
0003c4  f7fffffe          BL       TFT_24S_Write_Data
0003c8  1c64              ADDS     r4,r4,#1              ;221
0003ca  2cf0              CMP      r4,#0xf0              ;221
0003cc  d3f6              BCC      |L1.956|
0003ce  1c6d              ADDS     r5,r5,#1              ;220
0003d0  42b5              CMP      r5,r6                 ;220
0003d2  d3f2              BCC      |L1.954|
;;;224    		}
;;;225    	}		
;;;226    }
0003d4  bdf8              POP      {r3-r7,pc}
;;;227    
                          ENDP

                  TFT_Fill_Rectangle PROC
;;;228    void TFT_Fill_Rectangle(PT_T * p1, PT_T * p2, COLOR_T * color) {
0003d6  b5fc              PUSH     {r2-r7,lr}
0003d8  4603              MOV      r3,r0
0003da  4614              MOV      r4,r2
;;;229    	uint32_t n;
;;;230    	uint8_t b1, b2;
;;;231    	uint16_t c_min, c_max, r_min, r_max;
;;;232    	
;;;233    	c_min = MIN(p1->X, p2->X);
0003dc  6818              LDR      r0,[r3,#0]
0003de  680a              LDR      r2,[r1,#0]
0003e0  4290              CMP      r0,r2
0003e2  d20f              BCS      |L1.1028|
0003e4  4605              MOV      r5,r0
0003e6  e00e              B        |L1.1030|
                  |L1.1000|
                          DCD      0x40048000
                  |L1.1004|
                          DCD      0x4004b000
                  |L1.1008|
                          DCD      0x400ff080
                  |L1.1012|
                          DCD      0xf80ff080
                  |L1.1016|
                          DCD      SystemCoreClock
                  |L1.1020|
                          DCD      0x40039000
                  |L1.1024|
                          DCD      0x4003b000
                  |L1.1028|
000404  4615              MOV      r5,r2
                  |L1.1030|
000406  b2af              UXTH     r7,r5
;;;234    	c_max = MAX(p1->X, p2->X);
000408  4290              CMP      r0,r2
00040a  d800              BHI      |L1.1038|
00040c  4610              MOV      r0,r2
                  |L1.1038|
00040e  b286              UXTH     r6,r0
;;;235    	c_max = MIN(c_max, TFT_WIDTH-1);
000410  2eef              CMP      r6,#0xef
000412  d300              BCC      |L1.1046|
000414  26ef              MOVS     r6,#0xef
                  |L1.1046|
;;;236    	
;;;237    	r_min = MIN(p1->Y, p2->Y);
000416  6858              LDR      r0,[r3,#4]
000418  6849              LDR      r1,[r1,#4]
00041a  4288              CMP      r0,r1
00041c  d201              BCS      |L1.1058|
00041e  4602              MOV      r2,r0
000420  e000              B        |L1.1060|
                  |L1.1058|
000422  460a              MOV      r2,r1
                  |L1.1060|
000424  b292              UXTH     r2,r2
000426  9200              STR      r2,[sp,#0]
;;;238    	r_max = MAX(p1->Y, p2->Y);
000428  4288              CMP      r0,r1
00042a  d800              BHI      |L1.1070|
00042c  4608              MOV      r0,r1
                  |L1.1070|
00042e  b285              UXTH     r5,r0
;;;239    	r_max = MIN(r_max, TFT_HEIGHT-1);
000430  20ff              MOVS     r0,#0xff
000432  3040              ADDS     r0,r0,#0x40
000434  4285              CMP      r5,r0
000436  d300              BCC      |L1.1082|
000438  4605              MOV      r5,r0
                  |L1.1082|
;;;240    	
;;;241    	// Enable access to full screen, reset write pointer to origin
;;;242    	TFT_24S_Write_Command(0x002A); //column address set
00043a  202a              MOVS     r0,#0x2a
00043c  f7fffffe          BL       TFT_24S_Write_Command
;;;243    	TFT_24S_Write_Data(0x0000);
000440  2000              MOVS     r0,#0
000442  f7fffffe          BL       TFT_24S_Write_Data
;;;244    	TFT_24S_Write_Data(c_min); //start 
000446  4638              MOV      r0,r7
000448  f7fffffe          BL       TFT_24S_Write_Data
;;;245    	TFT_24S_Write_Data(0x0000);
00044c  2000              MOVS     r0,#0
00044e  f7fffffe          BL       TFT_24S_Write_Data
;;;246    	TFT_24S_Write_Data(c_max); //end 
000452  4630              MOV      r0,r6
000454  f7fffffe          BL       TFT_24S_Write_Data
;;;247    	TFT_24S_Write_Command(0x002B); //page address set
000458  202b              MOVS     r0,#0x2b
00045a  f7fffffe          BL       TFT_24S_Write_Command
;;;248    	TFT_24S_Write_Data(0x0000);
00045e  2000              MOVS     r0,#0
000460  f7fffffe          BL       TFT_24S_Write_Data
;;;249    	TFT_24S_Write_Data(r_min); //start 
000464  9800              LDR      r0,[sp,#0]
000466  f7fffffe          BL       TFT_24S_Write_Data
;;;250    	TFT_24S_Write_Data(0x0001);
00046a  2001              MOVS     r0,#1
00046c  f7fffffe          BL       TFT_24S_Write_Data
;;;251    	TFT_24S_Write_Data(r_max); //end 
000470  4628              MOV      r0,r5
000472  f7fffffe          BL       TFT_24S_Write_Data
;;;252    	
;;;253    	// Memory Write 0x2c
;;;254    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;255    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
000476  7820              LDRB     r0,[r4,#0]
000478  08c1              LSRS     r1,r0,#3
00047a  7860              LDRB     r0,[r4,#1]
00047c  00c9              LSLS     r1,r1,#3
00047e  0942              LSRS     r2,r0,#5
000480  4311              ORRS     r1,r1,r2
000482  9101              STR      r1,[sp,#4]
;;;256    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
000484  211c              MOVS     r1,#0x1c
000486  4008              ANDS     r0,r0,r1
000488  78a1              LDRB     r1,[r4,#2]
00048a  00c0              LSLS     r0,r0,#3
00048c  08c9              LSRS     r1,r1,#3
00048e  4308              ORRS     r0,r0,r1
000490  4604              MOV      r4,r0
;;;257    	
;;;258    	TFT_24S_Write_Command(0x002c);
000492  202c              MOVS     r0,#0x2c
000494  f7fffffe          BL       TFT_24S_Write_Command
;;;259    	
;;;260    	n = (c_max - c_min + 1)*(r_max - r_min + 1);
000498  9800              LDR      r0,[sp,#0]
00049a  1bf6              SUBS     r6,r6,r7
00049c  1c76              ADDS     r6,r6,#1
00049e  1a28              SUBS     r0,r5,r0
0004a0  1c40              ADDS     r0,r0,#1
0004a2  4346              MULS     r6,r0,r6
;;;261    	while (n-- > 0) {
0004a4  e005              B        |L1.1202|
                  |L1.1190|
;;;262    		TFT_24S_Write_Data(b1);
0004a6  9801              LDR      r0,[sp,#4]
0004a8  f7fffffe          BL       TFT_24S_Write_Data
;;;263    		TFT_24S_Write_Data(b2);
0004ac  4620              MOV      r0,r4
0004ae  f7fffffe          BL       TFT_24S_Write_Data
                  |L1.1202|
0004b2  1e76              SUBS     r6,r6,#1              ;261
0004b4  1c70              ADDS     r0,r6,#1              ;261
0004b6  d1f6              BNE      |L1.1190|
;;;264    	}	
;;;265    }
0004b8  bdfc              POP      {r2-r7,pc}
;;;266    
                          ENDP

                  TFT_Start_Rectangle PROC
;;;268    */
;;;269    uint32_t TFT_Start_Rectangle(PT_T * p1, PT_T * p2) {
0004ba  b5f0              PUSH     {r4-r7,lr}
0004bc  4606              MOV      r6,r0
;;;270    	uint16_t c_min, c_max, r_min, r_max;
;;;271    	
;;;272    	// Find bounds of rectangle
;;;273    	c_min = MIN(p1->X, p2->X);
0004be  6830              LDR      r0,[r6,#0]
0004c0  680a              LDR      r2,[r1,#0]
0004c2  4290              CMP      r0,r2
0004c4  d201              BCS      |L1.1226|
0004c6  4603              MOV      r3,r0
0004c8  e000              B        |L1.1228|
                  |L1.1226|
0004ca  4613              MOV      r3,r2
                  |L1.1228|
0004cc  b29d              UXTH     r5,r3
;;;274    	c_max = MAX(p1->X, p2->X);
0004ce  4290              CMP      r0,r2
0004d0  d800              BHI      |L1.1236|
0004d2  4610              MOV      r0,r2
                  |L1.1236|
0004d4  b284              UXTH     r4,r0
;;;275    	
;;;276    	r_min = MIN(p1->Y, p2->Y);
0004d6  6872              LDR      r2,[r6,#4]
0004d8  6848              LDR      r0,[r1,#4]
0004da  4282              CMP      r2,r0
0004dc  d201              BCS      |L1.1250|
0004de  4611              MOV      r1,r2
0004e0  e000              B        |L1.1252|
                  |L1.1250|
0004e2  4601              MOV      r1,r0
                  |L1.1252|
0004e4  b28e              UXTH     r6,r1
;;;277    	r_max = MAX(p1->Y, p2->Y);
0004e6  4282              CMP      r2,r0
0004e8  d900              BLS      |L1.1260|
0004ea  4610              MOV      r0,r2
                  |L1.1260|
0004ec  b287              UXTH     r7,r0
;;;278    
;;;279    	// Clip to display size
;;;280    	c_max = MIN(c_max, TFT_WIDTH-1);
0004ee  2cef              CMP      r4,#0xef
0004f0  d300              BCC      |L1.1268|
0004f2  24ef              MOVS     r4,#0xef
                  |L1.1268|
;;;281    	r_max = MIN(r_max, TFT_HEIGHT-1);
0004f4  20ff              MOVS     r0,#0xff
0004f6  3040              ADDS     r0,r0,#0x40
0004f8  4287              CMP      r7,r0
0004fa  d300              BCC      |L1.1278|
0004fc  4607              MOV      r7,r0
                  |L1.1278|
;;;282    	
;;;283    	// Enable access to full screen, reset write pointer to origin
;;;284    	TFT_24S_Write_Command(0x002A); //column address set
0004fe  202a              MOVS     r0,#0x2a
000500  f7fffffe          BL       TFT_24S_Write_Command
;;;285    	TFT_24S_Write_Data(0x0000);
000504  2000              MOVS     r0,#0
000506  f7fffffe          BL       TFT_24S_Write_Data
;;;286    	TFT_24S_Write_Data(c_min); //start 
00050a  4628              MOV      r0,r5
00050c  f7fffffe          BL       TFT_24S_Write_Data
;;;287    	TFT_24S_Write_Data(0x0000);
000510  2000              MOVS     r0,#0
000512  f7fffffe          BL       TFT_24S_Write_Data
;;;288    	TFT_24S_Write_Data(c_max); //end 
000516  4620              MOV      r0,r4
000518  f7fffffe          BL       TFT_24S_Write_Data
;;;289    	TFT_24S_Write_Command(0x002B); //page address set
00051c  202b              MOVS     r0,#0x2b
00051e  f7fffffe          BL       TFT_24S_Write_Command
;;;290    	TFT_24S_Write_Data(0x0000);
000522  2000              MOVS     r0,#0
000524  f7fffffe          BL       TFT_24S_Write_Data
;;;291    	TFT_24S_Write_Data(r_min); //start 
000528  4630              MOV      r0,r6
00052a  f7fffffe          BL       TFT_24S_Write_Data
;;;292    	TFT_24S_Write_Data(0x0001);
00052e  2001              MOVS     r0,#1
000530  f7fffffe          BL       TFT_24S_Write_Data
;;;293    	TFT_24S_Write_Data(r_max); //end 
000534  4638              MOV      r0,r7
000536  f7fffffe          BL       TFT_24S_Write_Data
;;;294    	
;;;295    	// Memory Write 0x2c
;;;296    	TFT_24S_Write_Command(0x002c);
00053a  202c              MOVS     r0,#0x2c
00053c  f7fffffe          BL       TFT_24S_Write_Command
;;;297    	
;;;298    	return (c_max - c_min + 1)*(r_max - r_min + 1);
000540  1b60              SUBS     r0,r4,r5
000542  1c40              ADDS     r0,r0,#1
000544  1bb9              SUBS     r1,r7,r6
000546  1c49              ADDS     r1,r1,#1
000548  4348              MULS     r0,r1,r0
;;;299    }
00054a  bdf0              POP      {r4-r7,pc}
;;;300    
                          ENDP

                  TFT_Write_Rectangle_Pixel PROC
;;;301    void TFT_Write_Rectangle_Pixel(COLOR_T * color, unsigned int count) {
00054c  b570              PUSH     {r4-r6,lr}
00054e  460c              MOV      r4,r1
;;;302    	uint8_t b1, b2;
;;;303    
;;;304    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;305    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
000550  7801              LDRB     r1,[r0,#0]
000552  08cd              LSRS     r5,r1,#3
000554  7841              LDRB     r1,[r0,#1]
000556  00ed              LSLS     r5,r5,#3
000558  094a              LSRS     r2,r1,#5
00055a  4315              ORRS     r5,r5,r2
;;;306    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
00055c  221c              MOVS     r2,#0x1c
00055e  4011              ANDS     r1,r1,r2
000560  7880              LDRB     r0,[r0,#2]
000562  00ce              LSLS     r6,r1,#3
000564  08c0              LSRS     r0,r0,#3
000566  4306              ORRS     r6,r6,r0
000568  e005              B        |L1.1398|
                  |L1.1386|
;;;307    	while (count--) {
;;;308    		TFT_24S_Write_Data(b1);
00056a  4628              MOV      r0,r5
00056c  f7fffffe          BL       TFT_24S_Write_Data
;;;309    		TFT_24S_Write_Data(b2);
000570  4630              MOV      r0,r6
000572  f7fffffe          BL       TFT_24S_Write_Data
                  |L1.1398|
000576  1e64              SUBS     r4,r4,#1              ;307
000578  1c60              ADDS     r0,r4,#1              ;307
00057a  d1f6              BNE      |L1.1386|
;;;310    	}
;;;311    }
00057c  bd70              POP      {r4-r6,pc}
;;;312    
                          ENDP

                  TFT_Set_BL PROC
;;;314    
;;;315    void TFT_Set_BL(uint8_t on) {
00057e  b510              PUSH     {r4,lr}
000580  4604              MOV      r4,r0
;;;316    	TFT_24S_Write_Command(0x53);
000582  2053              MOVS     r0,#0x53
000584  f7fffffe          BL       TFT_24S_Write_Command
;;;317    	TFT_24S_Write_Data(0x28 | (on? 4 : 0));
000588  2c00              CMP      r4,#0
00058a  d001              BEQ      |L1.1424|
00058c  2004              MOVS     r0,#4
00058e  e000              B        |L1.1426|
                  |L1.1424|
000590  2000              MOVS     r0,#0
                  |L1.1426|
000592  3028              ADDS     r0,r0,#0x28
000594  f7fffffe          BL       TFT_24S_Write_Data
;;;318    }
000598  bd10              POP      {r4,pc}
;;;319    
                          ENDP

                  TFT_Set_Brightness PROC
;;;320    void TFT_Set_Brightness(uint8_t brightness) {
00059a  b510              PUSH     {r4,lr}
00059c  4604              MOV      r4,r0
;;;321    	TFT_24S_Write_Command(0x51);
00059e  2051              MOVS     r0,#0x51
0005a0  f7fffffe          BL       TFT_24S_Write_Command
;;;322    	TFT_24S_Write_Data(brightness);
0005a4  4620              MOV      r0,r4
0005a6  f7fffffe          BL       TFT_24S_Write_Data
;;;323    }
0005aa  bd10              POP      {r4,pc}
;;;324    /***************************************************/
                          ENDP

                  TFT_TS_Read PROC
;;;343    
;;;344    uint32_t TFT_TS_Read(PT_T * position) {
0005ac  b5f8              PUSH     {r3-r7,lr}
0005ae  4605              MOV      r5,r0
;;;345    	// Return 1 if valid touch, update position. Else return 0
;;;346    	uint32_t x, y;
;;;347    	uint32_t b;
;;;348    
;;;349    	// Determine if screen was pressed.
;;;350    	// Set YU digital output at ground, 
;;;351    	PORTE->PCR[TFT_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
0005b0  4cbc              LDR      r4,|L1.2212|
0005b2  69a1              LDR      r1,[r4,#0x18]
0005b4  2007              MOVS     r0,#7
0005b6  0200              LSLS     r0,r0,#8
0005b8  4381              BICS     r1,r1,r0
0005ba  61a1              STR      r1,[r4,#0x18]
;;;352    	PORTE->PCR[TFT_TS_YU_BIT] |= PORT_PCR_MUX(1);
0005bc  69a2              LDR      r2,[r4,#0x18]
0005be  15a1              ASRS     r1,r4,#22
0005c0  430a              ORRS     r2,r2,r1
0005c2  61a2              STR      r2,[r4,#0x18]
;;;353    	PTE->PDDR |= MASK(TFT_TS_YU_BIT);
0005c4  4eb8              LDR      r6,|L1.2216|
0005c6  6973              LDR      r3,[r6,#0x14]
0005c8  038a              LSLS     r2,r1,#14
0005ca  4313              ORRS     r3,r3,r2
0005cc  6173              STR      r3,[r6,#0x14]
;;;354    	PTE->PCOR = MASK(TFT_TS_YU_BIT); // Clear YU to 0
0005ce  60b2              STR      r2,[r6,#8]
;;;355    
;;;356    	// Set YD + XL to open
;;;357    	// Set YD as ADC input
;;;358    	PORTE->PCR[TFT_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
0005d0  6922              LDR      r2,[r4,#0x10]
0005d2  4382              BICS     r2,r2,r0
0005d4  6122              STR      r2,[r4,#0x10]
;;;359    	PORTE->PCR[TFT_TS_YD_BIT] |= PORT_PCR_MUX(0);
0005d6  6922              LDR      r2,[r4,#0x10]
0005d8  6122              STR      r2,[r4,#0x10]
;;;360    
;;;361    	// Set XL as digital input
;;;362    	PORTE->PCR[TFT_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
0005da  6962              LDR      r2,[r4,#0x14]
0005dc  4382              BICS     r2,r2,r0
0005de  6162              STR      r2,[r4,#0x14]
;;;363    	PORTE->PCR[TFT_TS_XL_BIT] |= PORT_PCR_MUX(1);
0005e0  6962              LDR      r2,[r4,#0x14]
0005e2  430a              ORRS     r2,r2,r1
0005e4  6162              STR      r2,[r4,#0x14]
;;;364    	PTE->PDDR &= ~MASK(TFT_TS_XL_BIT); // Input
0005e6  6972              LDR      r2,[r6,#0x14]
0005e8  034b              LSLS     r3,r1,#13
0005ea  439a              BICS     r2,r2,r3
0005ec  6172              STR      r2,[r6,#0x14]
;;;365    	
;;;366    	// Set XR as digital input with pull-up
;;;367    	PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
0005ee  69e2              LDR      r2,[r4,#0x1c]
0005f0  4382              BICS     r2,r2,r0
0005f2  61e2              STR      r2,[r4,#0x1c]
;;;368    	PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_MUX(1);
0005f4  69e0              LDR      r0,[r4,#0x1c]
0005f6  4308              ORRS     r0,r0,r1
0005f8  61e0              STR      r0,[r4,#0x1c]
;;;369    	PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_PE_MASK; // Enable pull-up
0005fa  69e0              LDR      r0,[r4,#0x1c]
0005fc  2102              MOVS     r1,#2
0005fe  4308              ORRS     r0,r0,r1
000600  61e0              STR      r0,[r4,#0x1c]
;;;370    	PTE->PDDR &= ~MASK(TFT_TS_XR_BIT); // Input
000602  6970              LDR      r0,[r6,#0x14]
000604  058f              LSLS     r7,r1,#22
000606  43b8              BICS     r0,r0,r7
000608  6170              STR      r0,[r6,#0x14]
;;;371    		
;;;372    	// Wait for the inputs to settle
;;;373    	Delay(TS_DELAY);
00060a  2001              MOVS     r0,#1
00060c  f7fffffe          BL       Delay
;;;374    	// Read XR input via digital
;;;375    	// if XR is 0, then screen is pressed
;;;376    	b = (PTE->PDIR) & MASK(TFT_TS_XR_BIT);
000610  6930              LDR      r0,[r6,#0x10]
000612  4038              ANDS     r0,r0,r7
;;;377    	
;;;378    	if (b>0) {
000614  2800              CMP      r0,#0
000616  d001              BEQ      |L1.1564|
;;;379    		// Screen not pressed
;;;380    		return 0;
000618  2000              MOVS     r0,#0
;;;381    	} else {
;;;382    		// Read X Position
;;;383    		// Configure inputs to ADC
;;;384    		PORTE->PCR[TFT_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;385    		PORTE->PCR[TFT_TS_YU_BIT] |= PORT_PCR_MUX(0);
;;;386    		PORTE->PCR[TFT_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;387    		PORTE->PCR[TFT_TS_YD_BIT] |= PORT_PCR_MUX(0);
;;;388    
;;;389    		
;;;390    		// Configure outputs to GPIO
;;;391    		PORTE->PCR[TFT_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;392    		PORTE->PCR[TFT_TS_XL_BIT] |= PORT_PCR_MUX(1);
;;;393    		PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;394    		PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_MUX(1);
;;;395    		PTE->PDDR |= MASK(TFT_TS_XL_BIT) | MASK(TFT_TS_XR_BIT);
;;;396    		PTE->PSOR = MASK(TFT_TS_XR_BIT); // Set XR to 1
;;;397    		PTE->PCOR = MASK(TFT_TS_XL_BIT); // Clear XL to 0
;;;398    		// Wait for inputs to settle
;;;399    		Delay(TS_DELAY);
;;;400    		
;;;401    		// Read inputs
;;;402    		ADC0->SC1[0] = TFT_TS_YU_CHANNEL; // start conversion on channel YU
;;;403    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;404    			;
;;;405    		yu = ADC0->R[0];
;;;406    		x = yu;
;;;407    
;;;408    		// Read Y Position
;;;409    		// Configure inputs to ADC
;;;410    		PORTE->PCR[TFT_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;411    		PORTE->PCR[TFT_TS_XL_BIT] |= PORT_PCR_MUX(0);
;;;412    		PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;413    		PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_MUX(0);
;;;414    		// Disable pull-up - just to be sure
;;;415    		PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_PE_MASK; 
;;;416    		
;;;417    		// Configure outputs to GPIO
;;;418    		PORTE->PCR[TFT_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;419    		PORTE->PCR[TFT_TS_YU_BIT] |= PORT_PCR_MUX(1);
;;;420    		PORTE->PCR[TFT_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;421    		PORTE->PCR[TFT_TS_YD_BIT] |= PORT_PCR_MUX(1);
;;;422    		PTE->PDDR |= MASK(TFT_TS_YU_BIT) | MASK(TFT_TS_YD_BIT);
;;;423    		PTE->PSOR = MASK(TFT_TS_YD_BIT); // Set YD to 1
;;;424    		PTE->PCOR = MASK(TFT_TS_YU_BIT); // Clear YU to 0
;;;425    		// Wait for the inputs to settle
;;;426    		Delay(TS_DELAY);
;;;427    
;;;428    		// Read inputs
;;;429    		ADC0->SC1[0] = TFT_TS_XL_CHANNEL; // start conversion on channel XL
;;;430    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;431    			;
;;;432    		xl = ADC0->R[0];
;;;433    		y = xl;
;;;434    
;;;435    		// Apply calibration factors to raw position information
;;;436    		if (TFT_TS_Calibrated) {
;;;437    			if (x<TFT_TS_X_Offset) {
;;;438    				position->X = 0;
;;;439    			} else {
;;;440    				position->X = (x - TFT_TS_X_Offset)/TFT_TS_X_Scale;
;;;441    			}
;;;442    			if (y<TFT_TS_Y_Offset) {
;;;443    				position->Y = 0;
;;;444    			} else {
;;;445    				position->Y = (y - TFT_TS_Y_Offset)/TFT_TS_Y_Scale;
;;;446    			}
;;;447    		} else {
;;;448    			position->X = x;
;;;449    			position->Y = y;
;;;450    		}
;;;451    		return 1;
;;;452    	}
;;;453    }
00061a  bdf8              POP      {r3-r7,pc}
                  |L1.1564|
00061c  69a1              LDR      r1,[r4,#0x18]         ;384
00061e  2007              MOVS     r0,#7                 ;384
000620  0200              LSLS     r0,r0,#8              ;384
000622  4381              BICS     r1,r1,r0              ;384
000624  61a1              STR      r1,[r4,#0x18]         ;384
000626  69a1              LDR      r1,[r4,#0x18]         ;385
000628  61a1              STR      r1,[r4,#0x18]         ;385
00062a  6921              LDR      r1,[r4,#0x10]         ;386
00062c  4381              BICS     r1,r1,r0              ;386
00062e  6121              STR      r1,[r4,#0x10]         ;386
000630  6921              LDR      r1,[r4,#0x10]         ;387
000632  6121              STR      r1,[r4,#0x10]         ;387
000634  6961              LDR      r1,[r4,#0x14]         ;391
000636  4381              BICS     r1,r1,r0              ;391
000638  6161              STR      r1,[r4,#0x14]         ;391
00063a  6962              LDR      r2,[r4,#0x14]         ;392
00063c  21ff              MOVS     r1,#0xff              ;392
00063e  3101              ADDS     r1,#1                 ;392
000640  430a              ORRS     r2,r2,r1              ;392
000642  6162              STR      r2,[r4,#0x14]         ;392
000644  69e2              LDR      r2,[r4,#0x1c]         ;393
000646  4382              BICS     r2,r2,r0              ;393
000648  61e2              STR      r2,[r4,#0x1c]         ;393
00064a  69e0              LDR      r0,[r4,#0x1c]         ;394
00064c  4308              ORRS     r0,r0,r1              ;394
00064e  61e0              STR      r0,[r4,#0x1c]         ;394
000650  6970              LDR      r0,[r6,#0x14]         ;395
000652  2105              MOVS     r1,#5                 ;395
000654  0549              LSLS     r1,r1,#21             ;395
000656  4308              ORRS     r0,r0,r1              ;395
000658  6170              STR      r0,[r6,#0x14]         ;395
00065a  6077              STR      r7,[r6,#4]            ;396
00065c  2001              MOVS     r0,#1                 ;397
00065e  0540              LSLS     r0,r0,#21             ;397
000660  60b0              STR      r0,[r6,#8]            ;397
000662  2001              MOVS     r0,#1                 ;399
000664  f7fffffe          BL       Delay
000668  4890              LDR      r0,|L1.2220|
00066a  2103              MOVS     r1,#3                 ;402
00066c  6001              STR      r1,[r0,#0]            ;402
                  |L1.1646|
00066e  6801              LDR      r1,[r0,#0]            ;403
000670  0609              LSLS     r1,r1,#24             ;403
000672  d5fc              BPL      |L1.1646|
000674  488d              LDR      r0,|L1.2220|
000676  6900              LDR      r0,[r0,#0x10]         ;405
000678  b287              UXTH     r7,r0                 ;405
00067a  488d              LDR      r0,|L1.2224|
00067c  8087              STRH     r7,[r0,#4]            ;405
00067e  6961              LDR      r1,[r4,#0x14]         ;410
000680  2007              MOVS     r0,#7                 ;410
000682  0200              LSLS     r0,r0,#8              ;410
000684  4381              BICS     r1,r1,r0              ;410
000686  6161              STR      r1,[r4,#0x14]         ;410
000688  6961              LDR      r1,[r4,#0x14]         ;411
00068a  6161              STR      r1,[r4,#0x14]         ;411
00068c  69e1              LDR      r1,[r4,#0x1c]         ;412
00068e  4381              BICS     r1,r1,r0              ;412
000690  61e1              STR      r1,[r4,#0x1c]         ;412
000692  69e1              LDR      r1,[r4,#0x1c]         ;413
000694  61e1              STR      r1,[r4,#0x1c]         ;413
000696  69e2              LDR      r2,[r4,#0x1c]         ;415
000698  2102              MOVS     r1,#2                 ;415
00069a  438a              BICS     r2,r2,r1              ;415
00069c  61e2              STR      r2,[r4,#0x1c]         ;415
00069e  69a1              LDR      r1,[r4,#0x18]         ;418
0006a0  4381              BICS     r1,r1,r0              ;418
0006a2  61a1              STR      r1,[r4,#0x18]         ;418
0006a4  69a1              LDR      r1,[r4,#0x18]         ;419
0006a6  22ff              MOVS     r2,#0xff              ;419
0006a8  3201              ADDS     r2,#1                 ;419
0006aa  4311              ORRS     r1,r1,r2              ;419
0006ac  61a1              STR      r1,[r4,#0x18]         ;419
0006ae  6921              LDR      r1,[r4,#0x10]         ;420
0006b0  4381              BICS     r1,r1,r0              ;420
0006b2  6121              STR      r1,[r4,#0x10]         ;420
0006b4  6920              LDR      r0,[r4,#0x10]         ;421
0006b6  4310              ORRS     r0,r0,r2              ;421
0006b8  6120              STR      r0,[r4,#0x10]         ;421
0006ba  6970              LDR      r0,[r6,#0x14]         ;422
0006bc  2105              MOVS     r1,#5                 ;422
0006be  0509              LSLS     r1,r1,#20             ;422
0006c0  4308              ORRS     r0,r0,r1              ;422
0006c2  6170              STR      r0,[r6,#0x14]         ;422
0006c4  0310              LSLS     r0,r2,#12             ;423
0006c6  6070              STR      r0,[r6,#4]            ;423
0006c8  0080              LSLS     r0,r0,#2              ;424
0006ca  60b0              STR      r0,[r6,#8]            ;424
0006cc  2001              MOVS     r0,#1                 ;426
0006ce  f7fffffe          BL       Delay
0006d2  4876              LDR      r0,|L1.2220|
0006d4  2104              MOVS     r1,#4                 ;429
0006d6  6001              STR      r1,[r0,#0]            ;429
                  |L1.1752|
0006d8  6801              LDR      r1,[r0,#0]            ;430
0006da  0609              LSLS     r1,r1,#24             ;430
0006dc  d5fc              BPL      |L1.1752|
0006de  6900              LDR      r0,[r0,#0x10]         ;432
0006e0  4e73              LDR      r6,|L1.2224|
0006e2  b284              UXTH     r4,r0                 ;432
0006e4  8074              STRH     r4,[r6,#2]            ;432
0006e6  7830              LDRB     r0,[r6,#0]            ;436  ; TFT_TS_Calibrated
0006e8  2800              CMP      r0,#0                 ;436
0006ea  d016              BEQ      |L1.1818|
0006ec  68f0              LDR      r0,[r6,#0xc]          ;437  ; TFT_TS_X_Offset
0006ee  4287              CMP      r7,r0                 ;437
0006f0  d202              BCS      |L1.1784|
0006f2  2000              MOVS     r0,#0                 ;438
0006f4  6028              STR      r0,[r5,#0]            ;438
0006f6  e004              B        |L1.1794|
                  |L1.1784|
0006f8  1a38              SUBS     r0,r7,r0              ;440
0006fa  68b1              LDR      r1,[r6,#8]            ;440  ; TFT_TS_X_Scale
0006fc  f7fffffe          BL       __aeabi_uidivmod
000700  6028              STR      r0,[r5,#0]            ;440
                  |L1.1794|
000702  6970              LDR      r0,[r6,#0x14]         ;442  ; TFT_TS_Y_Offset
000704  4284              CMP      r4,r0                 ;442
000706  d202              BCS      |L1.1806|
000708  2000              MOVS     r0,#0                 ;443
00070a  6068              STR      r0,[r5,#4]            ;443
00070c  e007              B        |L1.1822|
                  |L1.1806|
00070e  1a20              SUBS     r0,r4,r0              ;445
000710  6931              LDR      r1,[r6,#0x10]         ;445  ; TFT_TS_Y_Scale
000712  f7fffffe          BL       __aeabi_uidivmod
000716  6068              STR      r0,[r5,#4]            ;445
000718  e001              B        |L1.1822|
                  |L1.1818|
00071a  602f              STR      r7,[r5,#0]            ;448
00071c  606c              STR      r4,[r5,#4]            ;449
                  |L1.1822|
00071e  2001              MOVS     r0,#1                 ;451
000720  bdf8              POP      {r3-r7,pc}
;;;454    
                          ENDP

                  TFT_TS_Test PROC
;;;455    void TFT_TS_Test(void) {
000722  b090              SUB      sp,sp,#0x40
;;;456    	PT_T p, bp, pp;
;;;457    	COLOR_T c;
;;;458    	char buffer[32];
;;;459    	
;;;460    	TFT_Erase();
000724  f7fffffe          BL       TFT_Erase
;;;461    
;;;462    	pp.X = 0;
000728  2400              MOVS     r4,#0
00072a  940a              STR      r4,[sp,#0x28]
;;;463    	pp.Y = 0;
00072c  940b              STR      r4,[sp,#0x2c]
;;;464    	
;;;465    	bp.X = COL_TO_X(0);
00072e  940c              STR      r4,[sp,#0x30]
;;;466    	bp.Y = ROW_TO_Y(0);
000730  940d              STR      r4,[sp,#0x34]
;;;467    	c.R = 255;
000732  20ff              MOVS     r0,#0xff
000734  a908              ADD      r1,sp,#0x20
000736  7108              STRB     r0,[r1,#4]
;;;468    	c.G = 100;
000738  2064              MOVS     r0,#0x64
00073a  7148              STRB     r0,[r1,#5]
;;;469    	c.B = 100;
00073c  7188              STRB     r0,[r1,#6]
                  |L1.1854|
;;;470    	
;;;471    	while (1) {
;;;472    		if (TFT_TS_Read(&p)) {
00073e  a80e              ADD      r0,sp,#0x38
000740  f7fffffe          BL       TFT_TS_Read
000744  2800              CMP      r0,#0
000746  d01e              BEQ      |L1.1926|
;;;473    			bp.X = 0;
000748  940c              STR      r4,[sp,#0x30]
;;;474    			sprintf(buffer, "X:%5d Y:%5d", p.X, p.Y);
00074a  a15a              ADR      r1,|L1.2228|
00074c  a801              ADD      r0,sp,#4
00074e  9b0f              LDR      r3,[sp,#0x3c]
000750  9a0e              LDR      r2,[sp,#0x38]
000752  f7fffffe          BL       __2sprintf
;;;475    			TFT_Text_PrintStr(&bp, buffer);
000756  a901              ADD      r1,sp,#4
000758  a80c              ADD      r0,sp,#0x30
00075a  f7fffffe          BL       TFT_Text_PrintStr
;;;476    
;;;477    #if 0
;;;478    			TFT_Plot_Pixel(&p, &c);
;;;479    			p.X++;
;;;480    			TFT_Plot_Pixel(&p, &c);
;;;481    			p.X-=2;
;;;482    			TFT_Plot_Pixel(&p, &c);
;;;483    			p.X++;
;;;484    			
;;;485    			p.Y++;
;;;486    			TFT_Plot_Pixel(&p, &c);
;;;487    			p.Y-=2;
;;;488    			TFT_Plot_Pixel(&p, &c);
;;;489    #else
;;;490    			if ((pp.X == 0) && (pp.Y == 0)) {
00075e  980a              LDR      r0,[sp,#0x28]
000760  2800              CMP      r0,#0
000762  d106              BNE      |L1.1906|
000764  980b              LDR      r0,[sp,#0x2c]
000766  2800              CMP      r0,#0
000768  d103              BNE      |L1.1906|
;;;491    				pp = p;
00076a  990f              LDR      r1,[sp,#0x3c]
00076c  980e              LDR      r0,[sp,#0x38]
00076e  910b              STR      r1,[sp,#0x2c]
000770  900a              STR      r0,[sp,#0x28]
                  |L1.1906|
;;;492    			}
;;;493    			TFT_Draw_Line(&p, &pp, &c);
000772  aa09              ADD      r2,sp,#0x24
000774  a90a              ADD      r1,sp,#0x28
000776  a80e              ADD      r0,sp,#0x38
000778  f7fffffe          BL       TFT_Draw_Line
;;;494    			pp = p;
00077c  990f              LDR      r1,[sp,#0x3c]
00077e  980e              LDR      r0,[sp,#0x38]
000780  910b              STR      r1,[sp,#0x2c]
000782  900a              STR      r0,[sp,#0x28]
000784  e7db              B        |L1.1854|
                  |L1.1926|
;;;495    #endif
;;;496    		} else {
;;;497    			pp.X = 0;
000786  940a              STR      r4,[sp,#0x28]
;;;498    			pp.Y = 0;
000788  940b              STR      r4,[sp,#0x2c]
;;;499    	
;;;500    			bp.X = 0;
00078a  940c              STR      r4,[sp,#0x30]
;;;501    			TFT_Text_PrintStr(&bp, "Not Pressed    ");
00078c  a14c              ADR      r1,|L1.2240|
00078e  a80c              ADD      r0,sp,#0x30
000790  f7fffffe          BL       TFT_Text_PrintStr
000794  e7d3              B        |L1.1854|
;;;502    		}
;;;503    	}
;;;504    }
;;;505    
                          ENDP

                  TFT_TS_Calibrate PROC
;;;506    void TFT_TS_Calibrate(void) {
000796  b5f0              PUSH     {r4-r7,lr}
000798  b087              SUB      sp,sp,#0x1c
;;;507    	PT_T p, bp, p_bound;
;;;508    	uint32_t i;
;;;509    	
;;;510    	bp.X = COL_TO_X(0);
00079a  2500              MOVS     r5,#0
00079c  9503              STR      r5,[sp,#0xc]
;;;511    	bp.Y = ROW_TO_Y(3);
00079e  4e4c              LDR      r6,|L1.2256|
0007a0  7830              LDRB     r0,[r6,#0]  ; G_TFT_char_height
0007a2  0041              LSLS     r1,r0,#1
0007a4  1840              ADDS     r0,r0,r1
0007a6  9004              STR      r0,[sp,#0x10]
;;;512    
;;;513    	TFT_Text_PrintStr(&bp, "Calibrate TS");
0007a8  a14a              ADR      r1,|L1.2260|
0007aa  a803              ADD      r0,sp,#0xc
0007ac  f7fffffe          BL       TFT_Text_PrintStr
;;;514    	bp.X = COL_TO_X(0);
0007b0  9503              STR      r5,[sp,#0xc]
;;;515    	bp.Y = ROW_TO_Y(4);
0007b2  7830              LDRB     r0,[r6,#0]  ; G_TFT_char_height
0007b4  0080              LSLS     r0,r0,#2
0007b6  9004              STR      r0,[sp,#0x10]
;;;516    	TFT_Text_PrintStr(&bp, "by pressing each +");
0007b8  a14a              ADR      r1,|L1.2276|
0007ba  a803              ADD      r0,sp,#0xc
0007bc  f7fffffe          BL       TFT_Text_PrintStr
;;;517    	
;;;518    	bp.X = COL_TO_X(0);
0007c0  9503              STR      r5,[sp,#0xc]
;;;519    	bp.Y = ROW_TO_Y(0);
0007c2  9504              STR      r5,[sp,#0x10]
;;;520    	TFT_Text_PrintStr(&bp, "+");
0007c4  a14c              ADR      r1,|L1.2296|
0007c6  a803              ADD      r0,sp,#0xc
0007c8  f7fffffe          BL       TFT_Text_PrintStr
;;;521    	
;;;522    	p_bound.X = 0xffff;
0007cc  484b              LDR      r0,|L1.2300|
0007ce  9001              STR      r0,[sp,#4]
;;;523    	p_bound.Y = 0xffff;
0007d0  9002              STR      r0,[sp,#8]
;;;524    	for (i=0; i<TS_CALIB_SAMPLES; i++){
0007d2  2400              MOVS     r4,#0
                  |L1.2004|
;;;525    		while (!TFT_TS_Read(&p))
0007d4  a805              ADD      r0,sp,#0x14
0007d6  f7fffffe          BL       TFT_TS_Read
0007da  2800              CMP      r0,#0
0007dc  d0fa              BEQ      |L1.2004|
;;;526    			;
;;;527    		if (p.X < p_bound.X)
0007de  9901              LDR      r1,[sp,#4]
0007e0  9805              LDR      r0,[sp,#0x14]
0007e2  4288              CMP      r0,r1
0007e4  d201              BCS      |L1.2026|
;;;528    			p_bound.X = p.X;
0007e6  9805              LDR      r0,[sp,#0x14]
0007e8  9001              STR      r0,[sp,#4]
                  |L1.2026|
;;;529    		if (p.Y < p_bound.Y)
0007ea  9902              LDR      r1,[sp,#8]
0007ec  9806              LDR      r0,[sp,#0x18]
0007ee  4288              CMP      r0,r1
0007f0  d201              BCS      |L1.2038|
;;;530    			p_bound.Y = p.Y;
0007f2  9806              LDR      r0,[sp,#0x18]
0007f4  9002              STR      r0,[sp,#8]
                  |L1.2038|
0007f6  1c64              ADDS     r4,r4,#1              ;524
0007f8  2c0a              CMP      r4,#0xa               ;524
0007fa  d3eb              BCC      |L1.2004|
;;;531    	}
;;;532    	
;;;533    	TFT_TS_X_Offset = p_bound.X;
0007fc  4f2c              LDR      r7,|L1.2224|
0007fe  9801              LDR      r0,[sp,#4]
000800  60f8              STR      r0,[r7,#0xc]  ; TFT_TS_X_Offset
;;;534    	TFT_TS_Y_Offset = p_bound.Y;
000802  9802              LDR      r0,[sp,#8]
000804  6178              STR      r0,[r7,#0x14]  ; TFT_TS_Y_Offset
;;;535    	
;;;536    	TS_Min = p_bound;
000806  4638              MOV      r0,r7
000808  9a02              LDR      r2,[sp,#8]
00080a  9901              LDR      r1,[sp,#4]
00080c  61c2              STR      r2,[r0,#0x1c]  ; TS_Min
00080e  6181              STR      r1,[r0,#0x18]  ; TS_Min
                  |L1.2064|
;;;537    	
;;;538    	// Wait for release
;;;539    	while (TFT_TS_Read(&p))
000810  a805              ADD      r0,sp,#0x14
000812  f7fffffe          BL       TFT_TS_Read
000816  2800              CMP      r0,#0
000818  d1fa              BNE      |L1.2064|
;;;540    		;
;;;541    	
;;;542    	TFT_Erase();
00081a  f7fffffe          BL       TFT_Erase
;;;543    
;;;544    	/*
;;;545    	bp.X = COL_TO_X(TFT_MAX_COLS-1);
;;;546    	bp.Y = ROW_TO_Y(TFT_MAX_ROWS-1);
;;;547    	*/
;;;548    	bp.X = TFT_WIDTH - CHAR_WIDTH - 1;
00081e  4838              LDR      r0,|L1.2304|
000820  21ef              MOVS     r1,#0xef
000822  7800              LDRB     r0,[r0,#0]  ; G_TFT_char_width
000824  1a08              SUBS     r0,r1,r0
000826  9003              STR      r0,[sp,#0xc]
;;;549    	bp.Y = TFT_HEIGHT - CHAR_HEIGHT - 1;
000828  7830              LDRB     r0,[r6,#0]  ; G_TFT_char_height
00082a  21ff              MOVS     r1,#0xff
00082c  3140              ADDS     r1,r1,#0x40
00082e  1a08              SUBS     r0,r1,r0
000830  9004              STR      r0,[sp,#0x10]
;;;550    	TFT_Text_PrintStr(&bp, "+");
000832  a131              ADR      r1,|L1.2296|
000834  a803              ADD      r0,sp,#0xc
000836  f7fffffe          BL       TFT_Text_PrintStr
;;;551    
;;;552    	p_bound.X = 0;
00083a  9501              STR      r5,[sp,#4]
;;;553    	p_bound.Y = 0;
00083c  9502              STR      r5,[sp,#8]
;;;554    	for (i=0; i<TS_CALIB_SAMPLES; i++){
00083e  2400              MOVS     r4,#0
                  |L1.2112|
;;;555    		while (!TFT_TS_Read(&p))
000840  a805              ADD      r0,sp,#0x14
000842  f7fffffe          BL       TFT_TS_Read
000846  2800              CMP      r0,#0
000848  d0fa              BEQ      |L1.2112|
;;;556    			;
;;;557    		if (p.X > p_bound.X)
00084a  9901              LDR      r1,[sp,#4]
00084c  9805              LDR      r0,[sp,#0x14]
00084e  4288              CMP      r0,r1
000850  d901              BLS      |L1.2134|
;;;558    			p_bound.X = p.X;
000852  9805              LDR      r0,[sp,#0x14]
000854  9001              STR      r0,[sp,#4]
                  |L1.2134|
;;;559    		if (p.Y > p_bound.Y)
000856  9902              LDR      r1,[sp,#8]
000858  9806              LDR      r0,[sp,#0x18]
00085a  4288              CMP      r0,r1
00085c  d901              BLS      |L1.2146|
;;;560    			p_bound.Y = p.Y;
00085e  9806              LDR      r0,[sp,#0x18]
000860  9002              STR      r0,[sp,#8]
                  |L1.2146|
000862  1c64              ADDS     r4,r4,#1              ;554
000864  2c0a              CMP      r4,#0xa               ;554
000866  d3eb              BCC      |L1.2112|
;;;561    	}
;;;562    	
;;;563    	TS_Max = p_bound;
000868  4811              LDR      r0,|L1.2224|
00086a  9a02              LDR      r2,[sp,#8]
00086c  9901              LDR      r1,[sp,#4]
00086e  6242              STR      r2,[r0,#0x24]  ; TS_Max
000870  6201              STR      r1,[r0,#0x20]  ; TS_Max
;;;564    	
;;;565    	TFT_TS_X_Scale = (p_bound.X-TFT_TS_X_Offset)/TFT_WIDTH;
000872  9801              LDR      r0,[sp,#4]
000874  68f9              LDR      r1,[r7,#0xc]  ; TFT_TS_X_Offset
000876  1a40              SUBS     r0,r0,r1
000878  21f0              MOVS     r1,#0xf0
00087a  f7fffffe          BL       __aeabi_uidivmod
00087e  60b8              STR      r0,[r7,#8]  ; TFT_TS_X_Scale
;;;566    	TFT_TS_Y_Scale = (p_bound.Y-TFT_TS_Y_Offset)/TFT_HEIGHT;
000880  9802              LDR      r0,[sp,#8]
000882  6979              LDR      r1,[r7,#0x14]  ; TFT_TS_Y_Offset
000884  1a40              SUBS     r0,r0,r1
000886  21ff              MOVS     r1,#0xff
000888  3141              ADDS     r1,r1,#0x41
00088a  f7fffffe          BL       __aeabi_uidivmod
00088e  6138              STR      r0,[r7,#0x10]  ; TFT_TS_Y_Scale
                  |L1.2192|
;;;567    
;;;568    	// Wait for release
;;;569    	while (TFT_TS_Read(&p))
000890  a805              ADD      r0,sp,#0x14
000892  f7fffffe          BL       TFT_TS_Read
000896  2800              CMP      r0,#0
000898  d1fa              BNE      |L1.2192|
;;;570    		;
;;;571    	
;;;572    	TFT_TS_Calibrated = 1;
00089a  2001              MOVS     r0,#1
00089c  7038              STRB     r0,[r7,#0]
;;;573    
;;;574    }
00089e  b007              ADD      sp,sp,#0x1c
0008a0  bdf0              POP      {r4-r7,pc}
                          ENDP

0008a2  0000              DCW      0x0000
                  |L1.2212|
                          DCD      0x4004d040
                  |L1.2216|
                          DCD      0x400ff100
                  |L1.2220|
                          DCD      0x4003b000
                  |L1.2224|
                          DCD      ||.data||
                  |L1.2228|
0008b4  583a2535          DCB      "X:%5d Y:%5d",0
0008b8  6420593a
0008bc  25356400
                  |L1.2240|
0008c0  4e6f7420          DCB      "Not Pressed    ",0
0008c4  50726573
0008c8  73656420
0008cc  20202000
                  |L1.2256|
                          DCD      G_TFT_char_height
                  |L1.2260|
0008d4  43616c69          DCB      "Calibrate TS",0
0008d8  62726174
0008dc  65205453
0008e0  00      
0008e1  00                DCB      0
0008e2  00                DCB      0
0008e3  00                DCB      0
                  |L1.2276|
0008e4  62792070          DCB      "by pressing each +",0
0008e8  72657373
0008ec  696e6720
0008f0  65616368
0008f4  202b00  
0008f7  00                DCB      0
                  |L1.2296|
0008f8  2b00              DCB      "+",0
0008fa  00                DCB      0
0008fb  00                DCB      0
                  |L1.2300|
                          DCD      0x0000ffff
                  |L1.2304|
                          DCD      G_TFT_char_width

                          AREA ||.data||, DATA, ALIGN=2

                  TFT_TS_Calibrated
000000  0100              DCB      0x01,0x00
                  ||xl||
000002  0000              DCW      0x0000
                  ||yu||
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  TFT_TS_X_Scale
                          DCD      0x000000d1
                  TFT_TS_X_Offset
                          DCD      0x000019f8
                  TFT_TS_Y_Scale
                          DCD      0x0000009f
                  TFT_TS_Y_Offset
                          DCD      0x00001a21
                  TS_Min
                          %        8
                  TS_Max
                          %        8

;*** Start embedded assembler ***

#line 1 "src\\tft_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_tft_lcd_c_72135517____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_tft_lcd_c_72135517____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_tft_lcd_c_72135517____REVSH|
#line 144
|__asm___9_tft_lcd_c_72135517____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
