; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\system_mkl25z4.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\system_mkl25z4.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\system_mkl25z4.crf src\system_MKL25Z4.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;90     
;;;91     void SystemInit (void) {
000000  4855              LDR      r0,|L1.344|
;;;92     #if (DISABLE_WDOG)
;;;93       /* Disable the WDOG module */
;;;94       /* SIM_COPC: COPT=0,COPCLKS=0,COPW=0 */
;;;95       SIM->COPC = (uint32_t)0x00u;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
;;;96     #endif /* (DISABLE_WDOG) */
;;;97     #if (CLOCK_SETUP == 0)
;;;98       /* SIM->CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=2,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
;;;99       SIM->CLKDIV1 = (uint32_t)0x00020000UL; /* Update system prescalers */
;;;100      /* Switch to FEI Mode */
;;;101      /* MCG->C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
;;;102      MCG->C1 = (uint8_t)0x06U;
;;;103      /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
;;;104      MCG->C2 = (uint8_t)0x00U;
;;;105      /* MCG->C4: DMX32=0,DRST_DRS=1 */
;;;106      MCG->C4 = (uint8_t)((MCG->C4 & (uint8_t)~(uint8_t)0xC0U) | (uint8_t)0x20U);
;;;107      /* OSC0->CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
;;;108      OSC0->CR = (uint8_t)0x80U;
;;;109      /* MCG->C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
;;;110      MCG->C5 = (uint8_t)0x00U;
;;;111      /* MCG->C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
;;;112      MCG->C6 = (uint8_t)0x00U;
;;;113      while((MCG->S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
;;;114      }
;;;115      while((MCG->S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
;;;116      }
;;;117    #elif (CLOCK_SETUP == 1)
;;;118      /* SIM->SCGC5: PORTA=1 */
;;;119      SIM->SCGC5 |= (uint32_t)0x0200UL;     /* Enable clock gate for ports to enable pin routing */
000006  4855              LDR      r0,|L1.348|
000008  6b82              LDR      r2,[r0,#0x38]
00000a  1543              ASRS     r3,r0,#21
00000c  431a              ORRS     r2,r2,r3
00000e  6382              STR      r2,[r0,#0x38]
;;;120      /* SIM->CLKDIV1: OUTDIV1=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
;;;121      SIM->CLKDIV1 = (uint32_t)0x10010000UL; /* Update system prescalers */
000010  4a54              LDR      r2,|L1.356|
000012  4853              LDR      r0,|L1.352|
000014  6050              STR      r0,[r2,#4]
;;;122      /* PORTA->PCR18: ISF=0,MUX=0 */
;;;123      PORTA->PCR[18] &= (uint32_t)~0x01000700UL;
000016  4854              LDR      r0,|L1.360|
000018  6883              LDR      r3,[r0,#8]
00001a  4a54              LDR      r2,|L1.364|
00001c  4013              ANDS     r3,r3,r2
00001e  6083              STR      r3,[r0,#8]
;;;124      /* PORTA->PCR19: ISF=0,MUX=0 */
;;;125      PORTA->PCR[19] &= (uint32_t)~0x01000700UL;
000020  68c3              LDR      r3,[r0,#0xc]
000022  4013              ANDS     r3,r3,r2
000024  60c3              STR      r3,[r0,#0xc]
;;;126      /* Switch to FBE Mode */
;;;127      /* OSC0->CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=1,SC4P=0,SC8P=0,SC16P=1 */
;;;128      OSC0->CR = (uint8_t)0x89U;
000026  4a52              LDR      r2,|L1.368|
000028  2089              MOVS     r0,#0x89
00002a  7010              STRB     r0,[r2,#0]
;;;129      /* MCG->C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
;;;130      MCG->C2 = (uint8_t)0x24U;
00002c  4851              LDR      r0,|L1.372|
00002e  2224              MOVS     r2,#0x24
000030  7042              STRB     r2,[r0,#1]
;;;131      /* MCG->C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
;;;132      MCG->C1 = (uint8_t)0x9AU;
000032  229a              MOVS     r2,#0x9a
000034  7002              STRB     r2,[r0,#0]
;;;133      /* MCG->C4: DMX32=0,DRST_DRS=0 */
;;;134      MCG->C4 &= (uint8_t)~(uint8_t)0xE0U;
000036  78c2              LDRB     r2,[r0,#3]
000038  06d2              LSLS     r2,r2,#27
00003a  0ed2              LSRS     r2,r2,#27
00003c  70c2              STRB     r2,[r0,#3]
;;;135      /* MCG->C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
;;;136      MCG->C5 = (uint8_t)0x01U;
00003e  2201              MOVS     r2,#1
000040  7102              STRB     r2,[r0,#4]
;;;137      /* MCG->C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
;;;138      MCG->C6 = (uint8_t)0x00U;
000042  7141              STRB     r1,[r0,#5]
                  |L1.68|
;;;139      while((MCG->S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
000044  7981              LDRB     r1,[r0,#6]
000046  06c9              LSLS     r1,r1,#27
000048  d4fc              BMI      |L1.68|
                  |L1.74|
;;;140      }
;;;141      while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
00004a  7981              LDRB     r1,[r0,#6]
00004c  0709              LSLS     r1,r1,#28
00004e  0f89              LSRS     r1,r1,#30
000050  2902              CMP      r1,#2
000052  d1fa              BNE      |L1.74|
;;;142      }
;;;143      /* Switch to PBE Mode */
;;;144      /* MCG->C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
;;;145      MCG->C6 = (uint8_t)0x40U;
000054  2140              MOVS     r1,#0x40
000056  7141              STRB     r1,[r0,#5]
                  |L1.88|
;;;146      while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
000058  7981              LDRB     r1,[r0,#6]
00005a  0709              LSLS     r1,r1,#28
00005c  0f89              LSRS     r1,r1,#30
00005e  2902              CMP      r1,#2
000060  d1fa              BNE      |L1.88|
                  |L1.98|
;;;147      }
;;;148      while((MCG->S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
000062  7981              LDRB     r1,[r0,#6]
000064  0649              LSLS     r1,r1,#25
000066  d5fc              BPL      |L1.98|
;;;149      }
;;;150      /* Switch to PEE Mode */
;;;151      /* MCG->C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
;;;152      MCG->C1 = (uint8_t)0x1AU;
000068  211a              MOVS     r1,#0x1a
00006a  7001              STRB     r1,[r0,#0]
                  |L1.108|
;;;153      while((MCG->S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
00006c  7981              LDRB     r1,[r0,#6]
00006e  0709              LSLS     r1,r1,#28
000070  0f89              LSRS     r1,r1,#30
000072  2903              CMP      r1,#3
000074  d1fa              BNE      |L1.108|
;;;154      }
;;;155    #elif (CLOCK_SETUP == 2)
;;;156      /* SIM->SCGC5: PORTA=1 */
;;;157      SIM->SCGC5 |= (uint32_t)0x0200UL;     /* Enable clock gate for ports to enable pin routing */
;;;158      /* SIM->CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
;;;159      SIM->CLKDIV1 = (uint32_t)0x00000000UL; /* Update system prescalers */
;;;160      /* PORTA->PCR18: ISF=0,MUX=0 */
;;;161      PORTA->PCR[18] &= (uint32_t)~0x01000700UL;
;;;162      /* PORTA->PCR19: ISF=0,MUX=0 */
;;;163      PORTA->PCR[19] &= (uint32_t)~0x01000700UL;
;;;164      /* Switch to FBE Mode */
;;;165      /* OSC0->CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=1,SC4P=0,SC8P=0,SC16P=1 */
;;;166      OSC0->CR = (uint8_t)0x89U;
;;;167      /* MCG->C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
;;;168      MCG->C2 = (uint8_t)0x24U;
;;;169      /* MCG->C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
;;;170      MCG->C1 = (uint8_t)0x9AU;
;;;171      /* MCG->C4: DMX32=0,DRST_DRS=0 */
;;;172      MCG->C4 &= (uint8_t)~(uint8_t)0xE0U;
;;;173      /* MCG->C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
;;;174      MCG->C5 = (uint8_t)0x00U;
;;;175      /* MCG->C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
;;;176      MCG->C6 = (uint8_t)0x00U;
;;;177      while((MCG->S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
;;;178      }
;;;179      while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
;;;180      }
;;;181      /* Switch to BLPE Mode */
;;;182      /* MCG->C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=1,IRCS=0 */
;;;183      MCG->C2 = (uint8_t)0x26U;
;;;184      while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
;;;185      }
;;;186    #endif /* (CLOCK_SETUP == 2) */
;;;187    }
000076  4770              BX       lr
;;;188    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;192    
;;;193    void SystemCoreClockUpdate (void) {
000078  b510              PUSH     {r4,lr}
;;;194      uint32_t MCGOUTClock;                                                        /* Variable to store output clock frequency of the MCG module */
;;;195      uint8_t Divider;
;;;196    
;;;197      if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x0u) {
00007a  4c3e              LDR      r4,|L1.372|
00007c  7820              LDRB     r0,[r4,#0]
;;;198        /* Output of FLL or PLL is selected */
;;;199        if ((MCG->C6 & MCG_C6_PLLS_MASK) == 0x0u) {
;;;200          /* FLL is selected */
;;;201          if ((MCG->C1 & MCG_C1_IREFS_MASK) == 0x0u) {
;;;202            /* External reference clock is selected */
;;;203            MCGOUTClock = CPU_XTAL_CLK_HZ;                                       /* System oscillator drives MCG clock */
;;;204            Divider = (uint8_t)(1u << ((MCG->C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT));
00007e  2101              MOVS     r1,#1
000080  0983              LSRS     r3,r0,#6              ;197
000082  483d              LDR      r0,|L1.376|
;;;205            MCGOUTClock = (MCGOUTClock / Divider);  /* Calculate the divided FLL reference clock */
;;;206            if ((MCG->C2 & MCG_C2_RANGE0_MASK) != 0x0u) {
;;;207              MCGOUTClock /= 32u;                                                  /* If high range is enabled, additional 32 divider is active */
;;;208            } /* ((MCG->C2 & MCG_C2_RANGE0_MASK) != 0x0u) */
;;;209          } else { /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x0u)) */
;;;210            MCGOUTClock = CPU_INT_SLOW_CLK_HZ;                                     /* The slow internal reference clock is selected */
000084  03ca              LSLS     r2,r1,#15
000086  2b00              CMP      r3,#0                 ;197
000088  d010              BEQ      |L1.172|
;;;211          } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x0u)) */
;;;212          /* Select correct multiplier to calculate the MCG output clock  */
;;;213          switch (MCG->C4 & (MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) {
;;;214            case 0x0u:
;;;215              MCGOUTClock *= 640u;
;;;216              break;
;;;217            case 0x20u:
;;;218              MCGOUTClock *= 1280u;
;;;219              break;
;;;220            case 0x40u:
;;;221              MCGOUTClock *= 1920u;
;;;222              break;
;;;223            case 0x60u:
;;;224              MCGOUTClock *= 2560u;
;;;225              break;
;;;226            case 0x80u:
;;;227              MCGOUTClock *= 732u;
;;;228              break;
;;;229            case 0xA0u:
;;;230              MCGOUTClock *= 1464u;
;;;231              break;
;;;232            case 0xC0u:
;;;233              MCGOUTClock *= 2197u;
;;;234              break;
;;;235            case 0xE0u:
;;;236              MCGOUTClock *= 2929u;
;;;237              break;
;;;238            default:
;;;239              break;
;;;240          }
;;;241        } else { /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x0u)) */
;;;242          /* PLL is selected */
;;;243          Divider = (1u + (MCG->C5 & MCG_C5_PRDIV0_MASK));
;;;244          MCGOUTClock = (uint32_t)(CPU_XTAL_CLK_HZ / Divider);                     /* Calculate the PLL reference clock */
;;;245          Divider = ((MCG->C6 & MCG_C6_VDIV0_MASK) + 24u);
;;;246          MCGOUTClock *= Divider;                       /* Calculate the MCG output clock */
;;;247        } /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x0u)) */
;;;248      } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x40u) {
00008a  7823              LDRB     r3,[r4,#0]
00008c  099b              LSRS     r3,r3,#6
00008e  2b01              CMP      r3,#1
000090  d055              BEQ      |L1.318|
;;;249        /* Internal reference clock is selected */
;;;250        if ((MCG->C2 & MCG_C2_IRCS_MASK) == 0x0u) {
;;;251          MCGOUTClock = CPU_INT_SLOW_CLK_HZ;                                       /* Slow internal reference clock selected */
;;;252        } else { /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x0u)) */
;;;253          MCGOUTClock = CPU_INT_FAST_CLK_HZ / (1 << ((MCG->SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT));  /* Fast internal reference clock selected */
;;;254        } /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x0u)) */
;;;255      } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80u) {
000092  7821              LDRB     r1,[r4,#0]
000094  0989              LSRS     r1,r1,#6
000096  2902              CMP      r1,#2
000098  d107              BNE      |L1.170|
                  |L1.154|
;;;256        /* External reference clock is selected */
;;;257        MCGOUTClock = CPU_XTAL_CLK_HZ;                                           /* System oscillator drives MCG clock */
;;;258      } else { /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80u)) */
;;;259        /* Reserved value */
;;;260        return;
;;;261      } /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80u)) */
;;;262      SystemCoreClock = (MCGOUTClock / (1u + ((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDIV1_OUTDIV1_SHIFT)));
00009a  4932              LDR      r1,|L1.356|
00009c  6849              LDR      r1,[r1,#4]
00009e  0f09              LSRS     r1,r1,#28
0000a0  1c49              ADDS     r1,r1,#1
0000a2  f7fffffe          BL       __aeabi_uidivmod
0000a6  4935              LDR      r1,|L1.380|
;;;263    }
0000a8  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L1.170|
0000aa  bd10              POP      {r4,pc}
                  |L1.172|
0000ac  7963              LDRB     r3,[r4,#5]            ;199
0000ae  065b              LSLS     r3,r3,#25             ;199
0000b0  d43a              BMI      |L1.296|
0000b2  7823              LDRB     r3,[r4,#0]            ;201
0000b4  075b              LSLS     r3,r3,#29             ;201
0000b6  d40c              BMI      |L1.210|
0000b8  7822              LDRB     r2,[r4,#0]            ;204
0000ba  0692              LSLS     r2,r2,#26
0000bc  0f52              LSRS     r2,r2,#29
0000be  4091              LSLS     r1,r1,r2              ;204
0000c0  b2c9              UXTB     r1,r1                 ;204
0000c2  f7fffffe          BL       __aeabi_uidivmod
0000c6  7861              LDRB     r1,[r4,#1]            ;206
0000c8  0689              LSLS     r1,r1,#26             ;206
0000ca  0f89              LSRS     r1,r1,#30             ;206
0000cc  d002              BEQ      |L1.212|
0000ce  0940              LSRS     r0,r0,#5              ;207
0000d0  e000              B        |L1.212|
                  |L1.210|
0000d2  4610              MOV      r0,r2                 ;210
                  |L1.212|
0000d4  78e1              LDRB     r1,[r4,#3]            ;213
0000d6  0949              LSRS     r1,r1,#5              ;213
0000d8  0149              LSLS     r1,r1,#5              ;213
0000da  06ca              LSLS     r2,r1,#27             ;213
0000dc  0ed2              LSRS     r2,r2,#27             ;213
0000de  d1dc              BNE      |L1.154|
0000e0  1149              ASRS     r1,r1,#5              ;213
0000e2  2908              CMP      r1,#8                 ;213
0000e4  d2d9              BCS      |L1.154|
0000e6  000a              MOVS     r2,r1                 ;213
0000e8  447a              ADD      r2,r2,pc              ;213
0000ea  7912              LDRB     r2,[r2,#4]            ;213
0000ec  1892              ADDS     r2,r2,r2              ;213
0000ee  4497              ADD      pc,pc,r2              ;213
0000f0  0306090c          DCB      0x03,0x06,0x09,0x0c
0000f4  0f121518          DCB      0x0f,0x12,0x15,0x18
0000f8  2105              MOVS     r1,#5                 ;215
0000fa  01c9              LSLS     r1,r1,#7              ;215
0000fc  e00f              B        |L1.286|
0000fe  2105              MOVS     r1,#5                 ;218
000100  0209              LSLS     r1,r1,#8              ;218
000102  e00c              B        |L1.286|
000104  210f              MOVS     r1,#0xf               ;221
000106  01c9              LSLS     r1,r1,#7              ;221
000108  e009              B        |L1.286|
00010a  2105              MOVS     r1,#5                 ;224
00010c  0249              LSLS     r1,r1,#9              ;224
00010e  e006              B        |L1.286|
000110  21b7              MOVS     r1,#0xb7              ;227
000112  0089              LSLS     r1,r1,#2              ;227
000114  e003              B        |L1.286|
000116  21b7              MOVS     r1,#0xb7              ;230
000118  00c9              LSLS     r1,r1,#3              ;230
00011a  e000              B        |L1.286|
00011c  4918              LDR      r1,|L1.384|
                  |L1.286|
00011e  4348              MULS     r0,r1,r0              ;230
000120  e7bb              B        |L1.154|
000122  4918              LDR      r1,|L1.388|
000124  4348              MULS     r0,r1,r0              ;236
000126  e7b8              B        |L1.154|
                  |L1.296|
000128  7921              LDRB     r1,[r4,#4]            ;243
00012a  06c9              LSLS     r1,r1,#27             ;243
00012c  0ec9              LSRS     r1,r1,#27             ;243
00012e  1c49              ADDS     r1,r1,#1              ;243
000130  f7fffffe          BL       __aeabi_uidivmod
000134  7961              LDRB     r1,[r4,#5]            ;245
000136  06c9              LSLS     r1,r1,#27             ;245
000138  0ec9              LSRS     r1,r1,#27             ;245
00013a  3118              ADDS     r1,r1,#0x18           ;245
00013c  e7ef              B        |L1.286|
                  |L1.318|
00013e  7860              LDRB     r0,[r4,#1]            ;250
000140  07c0              LSLS     r0,r0,#31             ;250
000142  d007              BEQ      |L1.340|
000144  7a20              LDRB     r0,[r4,#8]            ;253
000146  0700              LSLS     r0,r0,#28
000148  0f40              LSRS     r0,r0,#29
00014a  4081              LSLS     r1,r1,r0              ;253
00014c  480e              LDR      r0,|L1.392|
00014e  f7fffffe          BL       __aeabi_uidivmod
000152  e7a2              B        |L1.154|
                  |L1.340|
000154  4610              MOV      r0,r2                 ;251
000156  e7a0              B        |L1.154|
                          ENDP

                  |L1.344|
                          DCD      0x40048100
                  |L1.348|
                          DCD      0x40048000
                  |L1.352|
                          DCD      0x10010000
                  |L1.356|
                          DCD      0x40048040
                  |L1.360|
                          DCD      0x40049040
                  |L1.364|
                          DCD      0xfefff8ff
                  |L1.368|
                          DCD      0x40065000
                  |L1.372|
                          DCD      0x40064000
                  |L1.376|
                          DCD      0x007a1200
                  |L1.380|
                          DCD      ||.data||
                  |L1.384|
                          DCD      0x00000895
                  |L1.388|
                          DCD      0x00000b71
                  |L1.392|
                          DCD      0x003d0900

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x02dc6c00

;*** Start embedded assembler ***

#line 1 "src\\system_MKL25Z4.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_system_MKL25Z4_c_5d646a67____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_system_MKL25Z4_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_system_MKL25Z4_c_5d646a67____REVSH|
#line 144
|__asm___16_system_MKL25Z4_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
