; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\mma8451.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\mma8451.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\mma8451.crf src\MMA8451.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  init_mma PROC
;;;24      */
;;;25     int init_mma()
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27     	  //check for device
;;;28     		if(i2c_read_byte(MMA_ADDR, REG_WHOAMI) == WHOAMI)	{
000002  210d              MOVS     r1,#0xd
000004  203a              MOVS     r0,#0x3a
000006  f7fffffe          BL       i2c_read_byte
00000a  281a              CMP      r0,#0x1a
00000c  d001              BEQ      |L1.18|
;;;29     			
;;;30     		  Delay(100);
;;;31     		  //turn on data ready irq; defaults to int2 (PTA15)
;;;32     		  i2c_write_byte(MMA_ADDR, REG_CTRL4, 0x01);
;;;33     		  Delay(100);
;;;34     		  //set active 14bit mode and 100Hz (0x19)
;;;35     		  i2c_write_byte(MMA_ADDR, REG_CTRL1, 0x01);
;;;36     				
;;;37     		  //enable the irq in the NVIC
;;;38     		  //NVIC_EnableIRQ(PORTA_IRQn);
;;;39     		  return 1;
;;;40     		}
;;;41     		
;;;42     		//else error
;;;43     		return 0;
00000e  2000              MOVS     r0,#0
;;;44     	
;;;45     }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  2064              MOVS     r0,#0x64              ;30
000014  f7fffffe          BL       Delay
000018  2201              MOVS     r2,#1                 ;32
00001a  212d              MOVS     r1,#0x2d              ;32
00001c  203a              MOVS     r0,#0x3a              ;32
00001e  f7fffffe          BL       i2c_write_byte
000022  2064              MOVS     r0,#0x64              ;33
000024  f7fffffe          BL       Delay
000028  2201              MOVS     r2,#1                 ;35
00002a  212a              MOVS     r1,#0x2a              ;35
00002c  203a              MOVS     r0,#0x3a              ;35
00002e  f7fffffe          BL       i2c_write_byte
000032  2001              MOVS     r0,#1                 ;39
000034  bd10              POP      {r4,pc}
;;;46     
                          ENDP

                  read_full_xyz PROC
;;;49     */
;;;50     void read_full_xyz()
000036  b530              PUSH     {r4,r5,lr}
;;;51     {
000038  b083              SUB      sp,sp,#0xc
;;;52     	
;;;53     	int i;
;;;54     	uint8_t data[6];
;;;55     	
;;;56     	i2c_start();
00003a  f7fffffe          BL       i2c_start
;;;57     	i2c_read_setup(MMA_ADDR , REG_XHI);
00003e  2101              MOVS     r1,#1
000040  203a              MOVS     r0,#0x3a
000042  f7fffffe          BL       i2c_read_setup
;;;58     	
;;;59     	for( i=0;i<6;i++)	{
000046  2400              MOVS     r4,#0
000048  466d              MOV      r5,sp                 ;54
00004a  e001              B        |L1.80|
                  |L1.76|
;;;60     		if(i==5)
00004c  2c05              CMP      r4,#5
00004e  d015              BEQ      |L1.124|
                  |L1.80|
;;;61     			data[i] = i2c_repeated_read(1);
;;;62     		else
;;;63     			data[i] = i2c_repeated_read(0);
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       i2c_repeated_read
000056  5528              STRB     r0,[r5,r4]
000058  1c64              ADDS     r4,r4,#1
00005a  2c06              CMP      r4,#6                 ;59
00005c  dbf6              BLT      |L1.76|
                  |L1.94|
;;;64     	}
;;;65     	
;;;66     	acc_X = (((int16_t) data[0])<<8) | data[1];
00005e  4668              MOV      r0,sp
000060  8800              LDRH     r0,[r0,#0]
000062  4969              LDR      r1,|L1.520|
000064  ba40              REV16    r0,r0
000066  8008              STRH     r0,[r1,#0]
;;;67     	acc_Y = (((int16_t) data[2])<<8) | data[3];
000068  4668              MOV      r0,sp
00006a  8840              LDRH     r0,[r0,#2]
00006c  ba40              REV16    r0,r0
00006e  8048              STRH     r0,[r1,#2]
;;;68     	acc_Z = (((int16_t) data[4])<<8) | data[5];
000070  4668              MOV      r0,sp
000072  8880              LDRH     r0,[r0,#4]
000074  ba40              REV16    r0,r0
000076  8088              STRH     r0,[r1,#4]
;;;69     }
000078  b003              ADD      sp,sp,#0xc
00007a  bd30              POP      {r4,r5,pc}
                  |L1.124|
00007c  2001              MOVS     r0,#1                 ;61
00007e  f7fffffe          BL       i2c_repeated_read
000082  4669              MOV      r1,sp                 ;61
000084  7148              STRB     r0,[r1,#5]            ;61
000086  e7ea              B        |L1.94|
;;;70     
                          ENDP

                  read_xyz PROC
;;;71     
;;;72     void read_xyz(void)
000088  b510              PUSH     {r4,lr}
;;;73     {
;;;74     	// sign extend byte to 16 bits - need to cast to signed since function
;;;75     	// returns uint8_t which is unsigned
;;;76     	acc_X = ((int16_t) ((int8_t) i2c_read_byte(MMA_ADDR, REG_XHI))) << 8;
00008a  2101              MOVS     r1,#1
00008c  203a              MOVS     r0,#0x3a
00008e  f7fffffe          BL       i2c_read_byte
000092  4c5d              LDR      r4,|L1.520|
000094  0200              LSLS     r0,r0,#8
000096  8020              STRH     r0,[r4,#0]
;;;77     	Delay(100);
000098  2064              MOVS     r0,#0x64
00009a  f7fffffe          BL       Delay
;;;78     	acc_Y = ((int16_t) ((int8_t) i2c_read_byte(MMA_ADDR, REG_YHI))) << 8;
00009e  2103              MOVS     r1,#3
0000a0  203a              MOVS     r0,#0x3a
0000a2  f7fffffe          BL       i2c_read_byte
0000a6  0200              LSLS     r0,r0,#8
0000a8  8060              STRH     r0,[r4,#2]
;;;79     	Delay(100);
0000aa  2064              MOVS     r0,#0x64
0000ac  f7fffffe          BL       Delay
;;;80     	acc_Z = ((int16_t) ((int8_t) i2c_read_byte(MMA_ADDR, REG_ZHI))) << 8;
0000b0  2105              MOVS     r1,#5
0000b2  203a              MOVS     r0,#0x3a
0000b4  f7fffffe          BL       i2c_read_byte
0000b8  0200              LSLS     r0,r0,#8
0000ba  80a0              STRH     r0,[r4,#4]
;;;81     }
0000bc  bd10              POP      {r4,pc}
;;;82     
                          ENDP

                  approx_sqrtf PROC
;;;83     float approx_sqrtf(float z) { // from Wikipedia
0000be  2201              MOVS     r2,#1
;;;84     	int val_int = *(int*)&z; /* Same bits, but as an int */
;;;85     	const int a = 0x4c000;
;;;86     
;;;87       val_int -= 1 << 23; /* Subtract 2^m. */
0000c0  05d2              LSLS     r2,r2,#23
0000c2  1a80              SUBS     r0,r0,r2
0000c4  2113              MOVS     r1,#0x13              ;85
;;;88       val_int >>= 1; /* Divide by 2. */
0000c6  1040              ASRS     r0,r0,#1
;;;89       val_int += 1 << 29; /* Add ((b + 1) / 2) * 2^m. */
0000c8  0192              LSLS     r2,r2,#6
0000ca  0389              LSLS     r1,r1,#14             ;85
0000cc  1880              ADDS     r0,r0,r2
;;;90     	val_int += a;
0000ce  1840              ADDS     r0,r0,r1
;;;91     	//	val_int = (1 << 29) + (val_int >> 1) - (1 << 22) + a;
;;;92     	return *(float*)&val_int; /* Interpret again as float */
;;;93     }
0000d0  4770              BX       lr
;;;94     
                          ENDP

                  approx_atan2f PROC
;;;95     float approx_atan2f(float y, float x) {
0000d2  b5f3              PUSH     {r0,r1,r4-r7,lr}
0000d4  b083              SUB      sp,sp,#0xc
0000d6  4606              MOV      r6,r0
;;;96     	float a, abs_a, approx, adj=0.0;
0000d8  2500              MOVS     r5,#0
;;;97     	char negate = 0;
;;;98     	
;;;99     	if (x == 0) { // special cases
0000da  9804              LDR      r0,[sp,#0x10]
0000dc  462f              MOV      r7,r5                 ;97
0000de  0040              LSLS     r0,r0,#1
0000e0  d00f              BEQ      |L1.258|
;;;100    		if (y == 0.0)
;;;101    			return 0.0; // undefined, but return 0 by convention
;;;102    		else if (y < 0.0)
;;;103    			return -M_PI_2;
;;;104    		else
;;;105    			return M_PI_2;
;;;106    	}	else {
;;;107    	// Version 7
;;;108    #if 1		
;;;109    		a = y/x;
0000e2  4630              MOV      r0,r6
0000e4  9904              LDR      r1,[sp,#0x10]
0000e6  f7fffffe          BL       __aeabi_fdiv
;;;110    		if (a>1) {
0000ea  217f              MOVS     r1,#0x7f
0000ec  05c9              LSLS     r1,r1,#23
0000ee  4604              MOV      r4,r0                 ;109
0000f0  4288              CMP      r0,r1
0000f2  dd12              BLE      |L1.282|
;;;111    			a = x/y;
0000f4  4631              MOV      r1,r6
0000f6  9804              LDR      r0,[sp,#0x10]
0000f8  f7fffffe          BL       __aeabi_fdiv
0000fc  4604              MOV      r4,r0
;;;112    			adj = M_PI_2;
0000fe  4d43              LDR      r5,|L1.524|
;;;113    			negate = 1;
000100  e015              B        |L1.302|
                  |L1.258|
000102  0070              LSLS     r0,r6,#1              ;100
000104  d004              BEQ      |L1.272|
000106  2001              MOVS     r0,#1                 ;102
000108  07c0              LSLS     r0,r0,#31             ;102
00010a  4286              CMP      r6,r0                 ;102
00010c  d902              BLS      |L1.276|
00010e  4840              LDR      r0,|L1.528|
                  |L1.272|
;;;114    		} else if (a<-1) {
;;;115    			a = x/y;
;;;116    			adj = -M_PI_2;
;;;117    			negate = 1;
;;;118    		}
;;;119    #endif
;;;120    
;;;121    		abs_a = (a < 0)? -a : a;
;;;122    		approx = M_PI_4*a - a*(abs_a - 1)*(0.2447+0.0663*abs_a);
;;;123    		if (negate) {
;;;124    			approx = adj - approx;
;;;125    		}
;;;126    		
;;;127    		if (x > 0)
;;;128    			return approx;
;;;129    		else if (y >= 0)
;;;130    			return approx + M_PI;
;;;131    		else
;;;132    			return approx - M_PI;
;;;133    	}		
;;;134    }
000110  b005              ADD      sp,sp,#0x14
000112  bdf0              POP      {r4-r7,pc}
                  |L1.276|
000114  483d              LDR      r0,|L1.524|
                  |L1.278|
000116  b005              ADD      sp,sp,#0x14
000118  bdf0              POP      {r4-r7,pc}
                  |L1.282|
00011a  2081              MOVS     r0,#0x81              ;114
00011c  05c0              LSLS     r0,r0,#23             ;114
00011e  42c4              CMN      r4,r0                 ;114
000120  d906              BLS      |L1.304|
000122  4631              MOV      r1,r6                 ;115
000124  9804              LDR      r0,[sp,#0x10]         ;115
000126  f7fffffe          BL       __aeabi_fdiv
00012a  4d39              LDR      r5,|L1.528|
00012c  4604              MOV      r4,r0                 ;115
                  |L1.302|
00012e  2701              MOVS     r7,#1                 ;117
                  |L1.304|
000130  2001              MOVS     r0,#1                 ;121
000132  07c0              LSLS     r0,r0,#31             ;121
000134  4284              CMP      r4,r0                 ;121
000136  4620              MOV      r0,r4                 ;121
000138  d902              BLS      |L1.320|
00013a  2101              MOVS     r1,#1                 ;121
00013c  07c9              LSLS     r1,r1,#31             ;121
00013e  4048              EORS     r0,r0,r1              ;121
                  |L1.320|
000140  4934              LDR      r1,|L1.532|
000142  9000              STR      r0,[sp,#0]            ;122
000144  f7fffffe          BL       __aeabi_fmul
000148  4933              LDR      r1,|L1.536|
00014a  f7fffffe          BL       __aeabi_fadd
00014e  217f              MOVS     r1,#0x7f              ;122
000150  9001              STR      r0,[sp,#4]            ;122
000152  05c9              LSLS     r1,r1,#23             ;122
000154  9800              LDR      r0,[sp,#0]            ;122
000156  f7fffffe          BL       __aeabi_fsub
00015a  4621              MOV      r1,r4                 ;122
00015c  f7fffffe          BL       __aeabi_fmul
000160  9901              LDR      r1,[sp,#4]            ;122
000162  f7fffffe          BL       __aeabi_fmul
000166  9000              STR      r0,[sp,#0]            ;122
000168  492c              LDR      r1,|L1.540|
00016a  4620              MOV      r0,r4                 ;122
00016c  f7fffffe          BL       __aeabi_fmul
000170  9900              LDR      r1,[sp,#0]            ;122
000172  f7fffffe          BL       __aeabi_fsub
000176  2f00              CMP      r7,#0                 ;123
000178  d003              BEQ      |L1.386|
00017a  4601              MOV      r1,r0                 ;124
00017c  4628              MOV      r0,r5                 ;124
00017e  f7fffffe          BL       __aeabi_fsub
                  |L1.386|
000182  9904              LDR      r1,[sp,#0x10]         ;127
000184  2900              CMP      r1,#0                 ;127
000186  dcc6              BGT      |L1.278|
000188  2101              MOVS     r1,#1                 ;129
00018a  07c9              LSLS     r1,r1,#31             ;129
00018c  4a24              LDR      r2,|L1.544|
00018e  428e              CMP      r6,r1                 ;129
000190  4611              MOV      r1,r2                 ;132
000192  d803              BHI      |L1.412|
000194  f7fffffe          BL       __aeabi_fadd
000198  b005              ADD      sp,sp,#0x14
00019a  bdf0              POP      {r4-r7,pc}
                  |L1.412|
00019c  f7fffffe          BL       __aeabi_fsub
0001a0  b005              ADD      sp,sp,#0x14
0001a2  bdf0              POP      {r4-r7,pc}
;;;135    
                          ENDP

                  convert_xyz_to_roll_pitch PROC
;;;136    void convert_xyz_to_roll_pitch(void) {
0001a4  b570              PUSH     {r4-r6,lr}
;;;137    /*
;;;138    	float ax = acc_X/COUNTS_PER_G,
;;;139    				ay = acc_Y/COUNTS_PER_G,
;;;140    				az = acc_Z/COUNTS_PER_G;
;;;141    */
;;;142    	
;;;143    	roll = approx_atan2f(acc_Y, acc_Z)*(180/M_PI);
0001a6  4c18              LDR      r4,|L1.520|
0001a8  2004              MOVS     r0,#4
0001aa  5e20              LDRSH    r0,[r4,r0]  ; acc_Z
0001ac  f7fffffe          BL       __aeabi_i2f
0001b0  4605              MOV      r5,r0
0001b2  2002              MOVS     r0,#2
0001b4  5e20              LDRSH    r0,[r4,r0]  ; acc_Y
0001b6  f7fffffe          BL       __aeabi_i2f
0001ba  4629              MOV      r1,r5
0001bc  f7fffffe          BL       approx_atan2f
0001c0  4e18              LDR      r6,|L1.548|
0001c2  4631              MOV      r1,r6
0001c4  f7fffffe          BL       __aeabi_fmul
;;;144    	pitch = approx_atan2f(acc_X, approx_sqrtf(acc_Y*acc_Y + acc_Z*acc_Z))*(180/M_PI);
0001c8  60a0              STR      r0,[r4,#8]  ; roll
0001ca  2002              MOVS     r0,#2
0001cc  2104              MOVS     r1,#4
0001ce  5e20              LDRSH    r0,[r4,r0]  ; acc_Y
0001d0  5e61              LDRSH    r1,[r4,r1]  ; acc_Z
0001d2  4340              MULS     r0,r0,r0
0001d4  4349              MULS     r1,r1,r1
0001d6  1840              ADDS     r0,r0,r1
0001d8  f7fffffe          BL       __aeabi_i2f
0001dc  2201              MOVS     r2,#1
0001de  05d2              LSLS     r2,r2,#23
0001e0  1a80              SUBS     r0,r0,r2
0001e2  2113              MOVS     r1,#0x13
0001e4  1040              ASRS     r0,r0,#1
0001e6  0192              LSLS     r2,r2,#6
0001e8  0389              LSLS     r1,r1,#14
0001ea  1880              ADDS     r0,r0,r2
0001ec  1845              ADDS     r5,r0,r1
0001ee  2000              MOVS     r0,#0
0001f0  5e20              LDRSH    r0,[r4,r0]  ; acc_X
0001f2  f7fffffe          BL       __aeabi_i2f
0001f6  4629              MOV      r1,r5
0001f8  f7fffffe          BL       approx_atan2f
0001fc  4631              MOV      r1,r6
0001fe  f7fffffe          BL       __aeabi_fmul
000202  60e0              STR      r0,[r4,#0xc]  ; pitch
;;;145    #if 0	
;;;146    	roll = atan2(ay, az)*180/M_PI;
;;;147    	pitch = atan2(ax, sqrt(ay*ay + az*az))*180/M_PI;
;;;148    #endif
;;;149    }
000204  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

000206  0000              DCW      0x0000
                  |L1.520|
                          DCD      ||.data||
                  |L1.524|
                          DCD      0x3fc90fdb
                  |L1.528|
                          DCD      0xbfc90fdb
                  |L1.532|
                          DCD      0x3d87c84b
                  |L1.536|
                          DCD      0x3e7a92a3
                  |L1.540|
                          DCD      0x3f490fdb
                  |L1.544|
                          DCD      0x40490fdb
                  |L1.548|
                          DCD      0x42652ee1

                          AREA ||.data||, DATA, ALIGN=2

                  acc_X
000000  0000              DCW      0x0000
                  acc_Y
000002  0000              DCW      0x0000
                  acc_Z
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  roll
000008  00000000          DCFS     0x00000000 ; 0
                  pitch
00000c  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "src\\MMA8451.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_MMA8451_c_acc_X____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_MMA8451_c_acc_X____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_MMA8451_c_acc_X____REVSH|
#line 144
|__asm___9_MMA8451_c_acc_X____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
