; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\sound.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sound.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\sound.crf src\sound.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DAC_Init PROC
;;;17     
;;;18     void DAC_Init(void) {
000000  48fe              LDR      r0,|L1.1020|
;;;19       // Init DAC output
;;;20     	
;;;21     	SIM->SCGC6 |= MASK(SIM_SCGC6_DAC0_SHIFT); 
000002  6bc1              LDR      r1,[r0,#0x3c]
000004  0402              LSLS     r2,r0,#16
000006  4311              ORRS     r1,r1,r2
000008  63c1              STR      r1,[r0,#0x3c]
;;;22     	SIM->SCGC5 |= MASK(SIM_SCGC5_PORTE_SHIFT); 
00000a  6b81              LDR      r1,[r0,#0x38]
00000c  0c92              LSRS     r2,r2,#18
00000e  4311              ORRS     r1,r1,r2
000010  6381              STR      r1,[r0,#0x38]
;;;23     	
;;;24     	PORTE->PCR[DAC_POS] &= ~PORT_PCR_MUX_MASK;	
000012  48fb              LDR      r0,|L1.1024|
000014  6b81              LDR      r1,[r0,#0x38]
000016  2207              MOVS     r2,#7
000018  0212              LSLS     r2,r2,#8
00001a  4391              BICS     r1,r1,r2
00001c  6381              STR      r1,[r0,#0x38]
;;;25     	PORTE->PCR[DAC_POS] |= PORT_PCR_MUX(0);	// Select analog 
00001e  6b81              LDR      r1,[r0,#0x38]
000020  6381              STR      r1,[r0,#0x38]
;;;26     		
;;;27     	// Disable buffer mode
;;;28     	DAC0->C1 = 0;
000022  48f8              LDR      r0,|L1.1028|
000024  2100              MOVS     r1,#0
000026  7081              STRB     r1,[r0,#2]
;;;29     	DAC0->C2 = 0;
000028  70c1              STRB     r1,[r0,#3]
;;;30     	
;;;31     	// Enable DAC, select VDDA as reference voltage
;;;32     	DAC0->C0 = MASK(DAC_C0_DACEN_SHIFT) | MASK(DAC_C0_DACRFS_SHIFT);
00002a  21c0              MOVS     r1,#0xc0
00002c  7041              STRB     r1,[r0,#1]
;;;33     }
00002e  4770              BX       lr
;;;34     
                          ENDP

                  Play_Sound_Sample PROC
;;;37     */
;;;38     void Play_Sound_Sample(uint16_t val) {
000030  0501              LSLS     r1,r0,#20
;;;39     	DAC0->DAT[0].DATH = DAC_DATH_DATA1(val >> 8);
000032  0f0a              LSRS     r2,r1,#28
000034  49f4              LDR      r1,|L1.1032|
000036  704a              STRB     r2,[r1,#1]
;;;40     	DAC0->DAT[0].DATL = DAC_DATL_DATA0(val);
000038  7008              STRB     r0,[r1,#0]
;;;41     }
00003a  4770              BX       lr
;;;42     
                          ENDP

                  SineTable_Init PROC
;;;43     void SineTable_Init(void) {
00003c  b5f8              PUSH     {r3-r7,lr}
;;;44     	unsigned n;
;;;45     	
;;;46     	for (n=0; n<NUM_STEPS; n++) {
00003e  4df3              LDR      r5,|L1.1036|
;;;47     		SineTable[n] = (MAX_DAC_CODE/2)*sinf(n*(2*3.1415927/NUM_STEPS));
;;;48     	}
;;;49     }
000040  2400              MOVS     r4,#0
000042  4ff3              LDR      r7,|L1.1040|
000044  2620              MOVS     r6,#0x20              ;46
                  |L1.70|
000046  4620              MOV      r0,r4                 ;47
000048  f7fffffe          BL       __aeabi_i2f
00004c  4639              MOV      r1,r7                 ;47
00004e  f7fffffe          BL       __aeabi_fmul
000052  f7fffffe          BL       sinf
000056  49ef              LDR      r1,|L1.1044|
000058  f7fffffe          BL       __aeabi_fmul
00005c  f7fffffe          BL       __aeabi_f2iz
000060  8068              STRH     r0,[r5,#2]            ;47
000062  1c60              ADDS     r0,r4,#1              ;47
000064  f7fffffe          BL       __aeabi_i2f
000068  4639              MOV      r1,r7                 ;47
00006a  f7fffffe          BL       __aeabi_fmul
00006e  f7fffffe          BL       sinf
000072  49e8              LDR      r1,|L1.1044|
000074  f7fffffe          BL       __aeabi_fmul
000078  f7fffffe          BL       __aeabi_f2iz
00007c  80a8              STRH     r0,[r5,#4]            ;47
00007e  1ca4              ADDS     r4,r4,#2              ;47
000080  1d2d              ADDS     r5,r5,#4              ;47
000082  1e76              SUBS     r6,r6,#1              ;47
000084  d1df              BNE      |L1.70|
000086  bdf8              POP      {r3-r7,pc}
;;;50     
                          ENDP

                  Init_Waveform PROC
;;;51     /* Fill waveform buffer with silence. */
;;;52     void Init_Waveform(void) {
000088  48e3              LDR      r0,|L1.1048|
;;;53     	uint32_t i;
;;;54     	
;;;55     	for (i=0; i<NUM_WAVEFORM_SAMPLES; i++) {
00008a  22ff              MOVS     r2,#0xff
;;;56     		Waveform[i] = (MAX_DAC_CODE/2);
00008c  49e3              LDR      r1,|L1.1052|
00008e  3201              ADDS     r2,#1                 ;55
                  |L1.144|
000090  8041              STRH     r1,[r0,#2]
000092  8081              STRH     r1,[r0,#4]
000094  1d00              ADDS     r0,r0,#4
000096  1e52              SUBS     r2,r2,#1
000098  d1fa              BNE      |L1.144|
;;;57     	}
;;;58     }
00009a  4770              BX       lr
;;;59     
                          ENDP

                  Init_Voices PROC
;;;60     void Init_Voices(void) {
00009c  b4f0              PUSH     {r4-r7}
;;;61     	uint16_t i;
;;;62     	
;;;63     	for (i=0; i<NUM_VOICES; i++) {
00009e  4fe0              LDR      r7,|L1.1056|
0000a0  2208              MOVS     r2,#8
0000a2  4638              MOV      r0,r7
0000a4  1c81              ADDS     r1,r0,#2
0000a6  4edf              LDR      r6,|L1.1060|
0000a8  4ddf              LDR      r5,|L1.1064|
0000aa  4ce0              LDR      r4,|L1.1068|
0000ac  4be0              LDR      r3,|L1.1072|
0000ae  4694              MOV      r12,r2
0000b0  1d00              ADDS     r0,r0,#4
                  |L1.178|
;;;64     		Voice[i].Volume = 0;
0000b2  2200              MOVS     r2,#0
0000b4  803a              STRH     r2,[r7,#0]
;;;65     		Voice[i].Decay = 0;
0000b6  800a              STRH     r2,[r1,#0]
;;;66     		Voice[i].Duration = 0;
;;;67     		Voice[i].Period = 0;
0000b8  6002              STR      r2,[r0,#0]
0000ba  8032              STRH     r2,[r6,#0]
;;;68     		Voice[i].Counter = 0;
;;;69     		Voice[i].CounterIncrement = 0;
0000bc  602a              STR      r2,[r5,#0]
;;;70     		Voice[i].Type = VW_UNINIT;
0000be  6022              STR      r2,[r4,#0]
0000c0  701a              STRB     r2,[r3,#0]
0000c2  4662              MOV      r2,r12
0000c4  1e52              SUBS     r2,r2,#1
0000c6  3014              ADDS     r0,r0,#0x14
0000c8  3114              ADDS     r1,r1,#0x14
0000ca  3314              ADDS     r3,r3,#0x14
0000cc  3414              ADDS     r4,r4,#0x14
0000ce  3514              ADDS     r5,r5,#0x14
0000d0  3614              ADDS     r6,r6,#0x14
0000d2  3714              ADDS     r7,r7,#0x14
0000d4  4694              MOV      r12,r2
0000d6  2a00              CMP      r2,#0
0000d8  d1eb              BNE      |L1.178|
;;;71     	}
;;;72     }
0000da  bcf0              POP      {r4-r7}
0000dc  4770              BX       lr
;;;73     
                          ENDP

                  Sound_Init PROC
;;;74     /* Initialize sound hardware, sine table, and waveform buffer. */
;;;75     void Sound_Init(void) {
0000de  b5f8              PUSH     {r3-r7,lr}
0000e0  4dca              LDR      r5,|L1.1036|
0000e2  2400              MOVS     r4,#0
0000e4  4fca              LDR      r7,|L1.1040|
0000e6  2620              MOVS     r6,#0x20
                  |L1.232|
0000e8  4620              MOV      r0,r4
0000ea  f7fffffe          BL       __aeabi_i2f
0000ee  4639              MOV      r1,r7
0000f0  f7fffffe          BL       __aeabi_fmul
0000f4  f7fffffe          BL       sinf
0000f8  49c6              LDR      r1,|L1.1044|
0000fa  f7fffffe          BL       __aeabi_fmul
0000fe  f7fffffe          BL       __aeabi_f2iz
000102  8068              STRH     r0,[r5,#2]
000104  1c60              ADDS     r0,r4,#1
000106  f7fffffe          BL       __aeabi_i2f
00010a  4639              MOV      r1,r7
00010c  f7fffffe          BL       __aeabi_fmul
000110  f7fffffe          BL       sinf
000114  49bf              LDR      r1,|L1.1044|
000116  f7fffffe          BL       __aeabi_fmul
00011a  f7fffffe          BL       __aeabi_f2iz
00011e  80a8              STRH     r0,[r5,#4]
000120  1ca4              ADDS     r4,r4,#2
000122  1d2d              ADDS     r5,r5,#4
000124  1e76              SUBS     r6,r6,#1
000126  d1df              BNE      |L1.232|
000128  48bb              LDR      r0,|L1.1048|
00012a  21ff              MOVS     r1,#0xff
00012c  4abb              LDR      r2,|L1.1052|
00012e  3101              ADDS     r1,#1
                  |L1.304|
000130  8042              STRH     r2,[r0,#2]
000132  8082              STRH     r2,[r0,#4]
000134  1d00              ADDS     r0,r0,#4
000136  1e49              SUBS     r1,r1,#1
000138  d1fa              BNE      |L1.304|
00013a  4fb9              LDR      r7,|L1.1056|
00013c  2208              MOVS     r2,#8
00013e  4638              MOV      r0,r7
000140  1c81              ADDS     r1,r0,#2
000142  1d8d              ADDS     r5,r1,#6
000144  1d2c              ADDS     r4,r5,#4
000146  4eb7              LDR      r6,|L1.1060|
000148  1da3              ADDS     r3,r4,#6
00014a  4694              MOV      r12,r2
00014c  1d00              ADDS     r0,r0,#4
                  |L1.334|
00014e  2200              MOVS     r2,#0
000150  803a              STRH     r2,[r7,#0]
000152  800a              STRH     r2,[r1,#0]
000154  6002              STR      r2,[r0,#0]
000156  8032              STRH     r2,[r6,#0]
000158  602a              STR      r2,[r5,#0]
00015a  6022              STR      r2,[r4,#0]
00015c  701a              STRB     r2,[r3,#0]
00015e  4662              MOV      r2,r12
000160  1e52              SUBS     r2,r2,#1
000162  3014              ADDS     r0,r0,#0x14
000164  3114              ADDS     r1,r1,#0x14
000166  3314              ADDS     r3,r3,#0x14
000168  3414              ADDS     r4,r4,#0x14
00016a  3514              ADDS     r5,r5,#0x14
00016c  3614              ADDS     r6,r6,#0x14
00016e  3714              ADDS     r7,r7,#0x14
000170  4694              MOV      r12,r2
000172  2a00              CMP      r2,#0
000174  d1eb              BNE      |L1.334|
000176  4ca1              LDR      r4,|L1.1020|
000178  6be0              LDR      r0,[r4,#0x3c]
00017a  0421              LSLS     r1,r4,#16
00017c  4308              ORRS     r0,r0,r1
00017e  63e0              STR      r0,[r4,#0x3c]
000180  6ba0              LDR      r0,[r4,#0x38]
000182  0c8e              LSRS     r6,r1,#18
000184  4330              ORRS     r0,r0,r6
000186  63a0              STR      r0,[r4,#0x38]
000188  4d9d              LDR      r5,|L1.1024|
00018a  6ba8              LDR      r0,[r5,#0x38]
00018c  2707              MOVS     r7,#7
00018e  023f              LSLS     r7,r7,#8
000190  43b8              BICS     r0,r0,r7
000192  63a8              STR      r0,[r5,#0x38]
000194  6ba8              LDR      r0,[r5,#0x38]
000196  63a8              STR      r0,[r5,#0x38]
000198  489a              LDR      r0,|L1.1028|
00019a  2100              MOVS     r1,#0
00019c  7081              STRB     r1,[r0,#2]
00019e  70c1              STRB     r1,[r0,#3]
0001a0  21c0              MOVS     r1,#0xc0
0001a2  7041              STRB     r1,[r0,#1]
;;;76     	SineTable_Init();	
;;;77     	Init_Waveform();
;;;78     	Init_Voices();
;;;79     	
;;;80     	DAC_Init();
;;;81     	DMA_Init();
0001a4  f7fffffe          BL       DMA_Init
;;;82     	TPM0_Init();
0001a8  f7fffffe          BL       TPM0_Init
;;;83     	Configure_TPM0_for_DMA(AUDIO_SAMPLE_PERIOD_US); 
0001ac  202d              MOVS     r0,#0x2d
0001ae  f7fffffe          BL       Configure_TPM0_for_DMA
;;;84     
;;;85     	SIM->SOPT2 |= (SIM_SOPT2_TPMSRC(1) | SIM_SOPT2_PLLFLLSEL_MASK);
0001b2  6860              LDR      r0,[r4,#4]
0001b4  499f              LDR      r1,|L1.1076|
0001b6  4308              ORRS     r0,r0,r1
0001b8  6060              STR      r0,[r4,#4]
;;;86     
;;;87     
;;;88     	SIM->SCGC5 |= (1UL << SIM_SCGC5_PORTE_SHIFT); 
0001ba  6ba0              LDR      r0,[r4,#0x38]
0001bc  4330              ORRS     r0,r0,r6
0001be  63a0              STR      r0,[r4,#0x38]
;;;89     	
;;;90     	PORTE->PCR[AMP_ENABLE_POS] &= ~PORT_PCR_MUX_MASK;	
0001c0  6b68              LDR      r0,[r5,#0x34]
0001c2  43b8              BICS     r0,r0,r7
0001c4  6368              STR      r0,[r5,#0x34]
;;;91     	PORTE->PCR[AMP_ENABLE_POS] |= PORT_PCR_MUX(1);	// Select GPIO
0001c6  6b68              LDR      r0,[r5,#0x34]
0001c8  15a1              ASRS     r1,r4,#22
0001ca  4308              ORRS     r0,r0,r1
0001cc  6368              STR      r0,[r5,#0x34]
;;;92     	PTE->PDDR |= MASK(AMP_ENABLE_POS); // set to output
0001ce  489a              LDR      r0,|L1.1080|
0001d0  6942              LDR      r2,[r0,#0x14]
0001d2  0541              LSLS     r1,r0,#21
0001d4  430a              ORRS     r2,r2,r1
0001d6  6142              STR      r2,[r0,#0x14]
;;;93     	PTE->PSOR = MASK(AMP_ENABLE_POS);  // enable audio amp
0001d8  6041              STR      r1,[r0,#4]
;;;94     
;;;95     }
0001da  bdf8              POP      {r3-r7,pc}
;;;96     
                          ENDP

                  Sound_Enable_Amp PROC
;;;97     void Sound_Enable_Amp(void) {
0001dc  2001              MOVS     r0,#1
;;;98     	PTE->PSOR = MASK(AMP_ENABLE_POS);  // enable audio amp
0001de  4996              LDR      r1,|L1.1080|
0001e0  0740              LSLS     r0,r0,#29
0001e2  6048              STR      r0,[r1,#4]
;;;99     }
0001e4  4770              BX       lr
;;;100    
                          ENDP

                  Sound_Disable_Amp PROC
;;;101    void Sound_Disable_Amp(void) {
0001e6  2001              MOVS     r0,#1
;;;102    	PTE->PCOR = MASK(AMP_ENABLE_POS);  // disable audio amp
0001e8  4993              LDR      r1,|L1.1080|
0001ea  0740              LSLS     r0,r0,#29
0001ec  6088              STR      r0,[r1,#8]
;;;103    }
0001ee  4770              BX       lr
;;;104    
                          ENDP

                  Play_Tone PROC
;;;105    /* Simple audio test function using busy-waiting. */
;;;106    void Play_Tone(void) {
0001f0  b5f0              PUSH     {r4-r7,lr}
0001f2  b085              SUB      sp,sp,#0x14
;;;107    	int n, d=MAX_DAC_CODE>>1, p;
0001f4  4889              LDR      r0,|L1.1052|
;;;108    	
;;;109    	for (p=5; p>=1; p--) {
0001f6  2105              MOVS     r1,#5
;;;110    		for (n=0; n<20/p; n++) {
;;;111    			Play_Sound_Sample((MAX_DAC_CODE>>1)+d);
0001f8  9100              STR      r1,[sp,#0]
0001fa  0041              LSLS     r1,r0,#1
0001fc  050a              LSLS     r2,r1,#20
0001fe  b2c9              UXTB     r1,r1
;;;112    			Delay(p);
;;;113    			Play_Sound_Sample((MAX_DAC_CODE>>1)-d);
000200  1a00              SUBS     r0,r0,r0
000202  0f12              LSRS     r2,r2,#28
000204  9102              STR      r1,[sp,#8]
000206  4c80              LDR      r4,|L1.1032|
000208  0501              LSLS     r1,r0,#20
00020a  9203              STR      r2,[sp,#0xc]
00020c  0f0f              LSRS     r7,r1,#28
00020e  b2c6              UXTB     r6,r0
                  |L1.528|
000210  2500              MOVS     r5,#0                 ;110
000212  2014              MOVS     r0,#0x14              ;110
000214  9900              LDR      r1,[sp,#0]            ;110
000216  f7fffffe          BL       __aeabi_idivmod
00021a  9001              STR      r0,[sp,#4]            ;110
00021c  2800              CMP      r0,#0                 ;110
00021e  dd0f              BLE      |L1.576|
                  |L1.544|
000220  9803              LDR      r0,[sp,#0xc]          ;110
000222  7060              STRB     r0,[r4,#1]            ;110
000224  9802              LDR      r0,[sp,#8]            ;110
000226  7020              STRB     r0,[r4,#0]            ;110
000228  9800              LDR      r0,[sp,#0]            ;112
00022a  f7fffffe          BL       Delay
00022e  7067              STRB     r7,[r4,#1]            ;112
000230  7026              STRB     r6,[r4,#0]            ;112
;;;114    			Delay(p);
000232  9800              LDR      r0,[sp,#0]
000234  f7fffffe          BL       Delay
000238  9801              LDR      r0,[sp,#4]            ;110
00023a  1c6d              ADDS     r5,r5,#1
00023c  42a8              CMP      r0,r5                 ;110
00023e  dcef              BGT      |L1.544|
                  |L1.576|
000240  9800              LDR      r0,[sp,#0]            ;109
000242  1e40              SUBS     r0,r0,#1              ;109
000244  9000              STR      r0,[sp,#0]            ;109
000246  2801              CMP      r0,#1                 ;109
000248  dae2              BGE      |L1.528|
;;;115    		}
;;;116    	}
;;;117    }
00024a  b005              ADD      sp,sp,#0x14
00024c  bdf0              POP      {r4-r7,pc}
;;;118    
                          ENDP

                  Sound_Generate_Next_Sample PROC
;;;119    int16_t Sound_Generate_Next_Sample (VOICE_T *voice) {
00024e  b430              PUSH     {r4,r5}
;;;120    	uint16_t lfsr;
;;;121    	uint16_t bit;
;;;122    	int16_t sample;
;;;123    
;;;124    	switch (voice->Type) {
000250  7c82              LDRB     r2,[r0,#0x12]
;;;125    		case VW_NOISE:
;;;126    			lfsr = voice->Counter;
;;;127    			// source code from http://en.wikipedia.org/wiki/Linear_feedback_shift_register
;;;128    			/* taps: 16 14 13 11; characteristic polynomial: x^16 + x^14 + x^13 + x^11 + 1 */
;;;129    			bit  = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5) ) & 1;
;;;130    			lfsr =  (lfsr >> 1) | (bit << 15);
;;;131    			voice->Counter = lfsr;
;;;132    			sample = (lfsr >> 4) - (MAX_DAC_CODE/2); // scale to get 12-bit value
000252  497a              LDR      r1,|L1.1084|
000254  2a01              CMP      r2,#1                 ;124
000256  d008              BEQ      |L1.618|
000258  2300              MOVS     r3,#0                 ;119
00025a  2a02              CMP      r2,#2                 ;124
00025c  d015              BEQ      |L1.650|
00025e  2a03              CMP      r2,#3                 ;124
000260  d01e              BEQ      |L1.672|
;;;133    			break;
;;;134    		case VW_SQUARE:
;;;135    			if (voice->Counter < voice->Period/2) {
;;;136    				sample = MAX_DAC_CODE/2 - 1;
;;;137    			} else {
;;;138    				sample = -MAX_DAC_CODE/2;
;;;139    			}
;;;140    			voice->Counter++;
;;;141    			if (voice->Counter == voice->Period) {
;;;142    				voice->Counter = 0;
;;;143    			}
;;;144    			break;
;;;145    		case VW_SINE:
;;;146    			sample = SineTable[((voice->Counter)/256)]; // & (NUM_STEPS-1)]; 
;;;147    			voice->Counter += voice->CounterIncrement;
;;;148    			if (voice->Counter > voice->Period * voice->CounterIncrement){
;;;149    				voice->Counter = 0;
;;;150    			}
;;;151    			break;
;;;152    		default:
;;;153    			sample = 0;
000262  2100              MOVS     r1,#0
                  |L1.612|
;;;154    			break;
;;;155    	}
;;;156    	return sample;
;;;157    }
000264  bc30              POP      {r4,r5}
000266  4608              MOV      r0,r1                 ;156
000268  4770              BX       lr
                  |L1.618|
00026a  8902              LDRH     r2,[r0,#8]            ;126
00026c  b292              UXTH     r2,r2                 ;126
00026e  0893              LSRS     r3,r2,#2              ;129
000270  4053              EORS     r3,r3,r2              ;129
000272  08d4              LSRS     r4,r2,#3              ;129
000274  4063              EORS     r3,r3,r4              ;129
000276  0954              LSRS     r4,r2,#5              ;129
000278  4063              EORS     r3,r3,r4              ;129
00027a  07db              LSLS     r3,r3,#31             ;129
00027c  0852              LSRS     r2,r2,#1              ;130
00027e  0c1b              LSRS     r3,r3,#16             ;130
000280  431a              ORRS     r2,r2,r3              ;130
000282  6082              STR      r2,[r0,#8]            ;132
000284  0910              LSRS     r0,r2,#4              ;132
000286  1841              ADDS     r1,r0,r1              ;132
000288  e7ec              B        |L1.612|
                  |L1.650|
00028a  8a04              LDRH     r4,[r0,#0x10]         ;135
00028c  6882              LDR      r2,[r0,#8]            ;135
00028e  0865              LSRS     r5,r4,#1              ;135
000290  42aa              CMP      r2,r5                 ;135
000292  d200              BCS      |L1.662|
000294  496a              LDR      r1,|L1.1088|
                  |L1.662|
000296  1c52              ADDS     r2,r2,#1              ;136
000298  6082              STR      r2,[r0,#8]            ;141
00029a  42a2              CMP      r2,r4                 ;141
00029c  d00c              BEQ      |L1.696|
00029e  e7e1              B        |L1.612|
                  |L1.672|
0002a0  6884              LDR      r4,[r0,#8]            ;146
0002a2  4a68              LDR      r2,|L1.1092|
0002a4  0a21              LSRS     r1,r4,#8              ;146
0002a6  0049              LSLS     r1,r1,#1              ;146
0002a8  5e51              LDRSH    r1,[r2,r1]            ;146
0002aa  68c2              LDR      r2,[r0,#0xc]          ;147
0002ac  18a4              ADDS     r4,r4,r2              ;147
0002ae  6084              STR      r4,[r0,#8]            ;148
0002b0  8a05              LDRH     r5,[r0,#0x10]         ;148
0002b2  4355              MULS     r5,r2,r5              ;148
0002b4  42a5              CMP      r5,r4                 ;148
0002b6  d2d5              BCS      |L1.612|
                  |L1.696|
0002b8  6083              STR      r3,[r0,#8]            ;149
0002ba  e7d3              B        |L1.612|
;;;158    
                          ENDP

                  Play_Waveform_with_DMA PROC
;;;159    void Play_Waveform_with_DMA(void) {
0002bc  b510              PUSH     {r4,lr}
;;;160    	Configure_DMA_For_Playback(Waveform, NUM_WAVEFORM_SAMPLES, 1);
0002be  2201              MOVS     r2,#1
0002c0  0251              LSLS     r1,r2,#9
0002c2  4861              LDR      r0,|L1.1096|
0002c4  f7fffffe          BL       Configure_DMA_For_Playback
;;;161    	Start_DMA_Playback();
0002c8  f7fffffe          BL       Start_DMA_Playback
;;;162    }
0002cc  bd10              POP      {r4,pc}
;;;163    
                          ENDP

                  Task_Sound_Manager PROC
;;;164    __task void Task_Sound_Manager(void) {
0002ce  4f60              LDR      r7,|L1.1104|
;;;165    	uint32_t n=0;
0002d0  2500              MOVS     r5,#0
0002d2  b082              SUB      sp,sp,#8              ;164
;;;166    	uint16_t lfsr=1234;
0002d4  4c5d              LDR      r4,|L1.1100|
;;;167    	uint16_t bit;
;;;168    	os_itv_set(100);
0002d6  2064              MOVS     r0,#0x64
0002d8  46bc              MOV      r12,r7
0002da  df00              SVC      #0x0
;;;169    	
;;;170    	while (1) {
;;;171    		os_itv_wait();
;;;172    		//		os_evt_wait_and(EV_PLAYSOUND, WAIT_FOREVER); // wait for trigger
;;;173    		// make a new sound every second
;;;174    		
;;;175    		// Example code
;;;176    		if (n < 200) {
;;;177    				Voice[n&0x03].Volume = 0xFFFF; 
0002dc  4e50              LDR      r6,|L1.1056|
;;;178    				Voice[n&0x03].Duration = 3000;
;;;179    				bit  = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5) ) & 1;
;;;180    				lfsr =  (lfsr >> 1) | (bit << 15);
;;;181    				Voice[n&0x03].Period = FREQ_TO_PERIOD((lfsr & 0x03FF) + 100); 
;;;182    				Voice[n&0x03].Decay = 25;
;;;183    				Voice[n&0x03].Counter = 0; 
;;;184    				Voice[n&0x03].CounterIncrement = (NUM_STEPS*256)/Voice[n&0x03].Period; 
;;;185    				Voice[n&0x03].Type = VW_SINE;
;;;186    		} else if (n == 200) {
;;;187    			os_itv_set(250);
;;;188    		} else {
;;;189    			switch (n & 3) {
;;;190    				case 0:
;;;191    					Voice[0].Volume = 0xBFFF;
;;;192    					Voice[0].Duration = 11000;
;;;193    					Voice[0].Decay = 40;
;;;194    					Voice[0].Counter = 0xACE1u; // or 0 for non-noise
;;;195    					Voice[0].Type = VW_NOISE;
;;;196    					break;
;;;197    				case 1:
;;;198    					Voice[1].Volume = 0xFFFF; 
;;;199    					Voice[1].Duration = 11000;
;;;200    					Voice[1].Period = FREQ_TO_PERIOD(400);
;;;201    					Voice[1].Decay = 20;
;;;202    					Voice[1].Counter = 0; 
;;;203    					Voice[1].Type = VW_SQUARE;
0002de  4630              MOV      r0,r6
0002e0  3020              ADDS     r0,r0,#0x20
0002e2  9000              STR      r0,[sp,#0]
                  |L1.740|
0002e4  4f5b              LDR      r7,|L1.1108|
0002e6  46bc              MOV      r12,r7                ;171
0002e8  df00              SVC      #0x0                  ;171
0002ea  2dc8              CMP      r5,#0xc8              ;176
0002ec  d22e              BCS      |L1.844|
0002ee  07a8              LSLS     r0,r5,#30             ;177
0002f0  0f80              LSRS     r0,r0,#30             ;177
0002f2  2214              MOVS     r2,#0x14              ;177
0002f4  2100              MOVS     r1,#0                 ;177
0002f6  4350              MULS     r0,r2,r0              ;177
0002f8  43c9              MVNS     r1,r1                 ;177
0002fa  5231              STRH     r1,[r6,r0]            ;177
0002fc  1987              ADDS     r7,r0,r6              ;178
0002fe  4956              LDR      r1,|L1.1112|
000300  08a0              LSRS     r0,r4,#2              ;179
000302  6079              STR      r1,[r7,#4]            ;179
000304  4060              EORS     r0,r0,r4              ;179
000306  08e1              LSRS     r1,r4,#3              ;179
000308  4048              EORS     r0,r0,r1              ;179
00030a  0961              LSRS     r1,r4,#5              ;179
00030c  4048              EORS     r0,r0,r1              ;179
00030e  0861              LSRS     r1,r4,#1              ;180
000310  03c0              LSLS     r0,r0,#15             ;180
000312  4301              ORRS     r1,r1,r0              ;180
000314  b28c              UXTH     r4,r1                 ;180
000316  05a0              LSLS     r0,r4,#22             ;181
000318  0d80              LSRS     r0,r0,#22             ;181
00031a  3064              ADDS     r0,r0,#0x64           ;181
00031c  f7fffffe          BL       __aeabi_ui2d
000320  4602              MOV      r2,r0                 ;181
000322  460b              MOV      r3,r1                 ;181
000324  2000              MOVS     r0,#0                 ;181
000326  494d              LDR      r1,|L1.1116|
000328  f7fffffe          BL       __aeabi_ddiv
00032c  f7fffffe          BL       __aeabi_d2uiz
000330  b281              UXTH     r1,r0                 ;181
000332  8239              STRH     r1,[r7,#0x10]         ;181
000334  2019              MOVS     r0,#0x19              ;182
000336  8078              STRH     r0,[r7,#2]            ;182
000338  2000              MOVS     r0,#0                 ;183
00033a  60b8              STR      r0,[r7,#8]            ;184
00033c  2001              MOVS     r0,#1                 ;184
00033e  0380              LSLS     r0,r0,#14             ;184
000340  f7fffffe          BL       __aeabi_uidivmod
000344  60f8              STR      r0,[r7,#0xc]          ;185
000346  2003              MOVS     r0,#3                 ;185
000348  74b8              STRB     r0,[r7,#0x12]         ;185
00034a  e016              B        |L1.890|
                  |L1.844|
00034c  2dc8              CMP      r5,#0xc8              ;186
00034e  d023              BEQ      |L1.920|
000350  07a8              LSLS     r0,r5,#30             ;189
000352  0f80              LSRS     r0,r0,#30             ;189
000354  d025              BEQ      |L1.930|
000356  2801              CMP      r0,#1                 ;189
000358  4841              LDR      r0,|L1.1120|
00035a  d02d              BEQ      |L1.952|
;;;204    					break;
;;;205    				default:
;;;206    					Voice[2].Volume = 0xFFFF; 
00035c  8530              STRH     r0,[r6,#0x28]
;;;207    					Voice[2].Duration = 11000;
00035e  4841              LDR      r0,|L1.1124|
;;;208    					Voice[2].Period = FREQ_TO_PERIOD(700); 
000360  62f0              STR      r0,[r6,#0x2c]  ; Voice
000362  201f              MOVS     r0,#0x1f
000364  8730              STRH     r0,[r6,#0x38]
;;;209    					Voice[2].Decay = 10;
000366  200a              MOVS     r0,#0xa
000368  8570              STRH     r0,[r6,#0x2a]
;;;210    					Voice[2].Counter = 0; 
00036a  2000              MOVS     r0,#0
;;;211    					Voice[2].CounterIncrement = (NUM_STEPS*256)/Voice[2].Period; 
00036c  6330              STR      r0,[r6,#0x30]  ; Voice
00036e  2021              MOVS     r0,#0x21
000370  0100              LSLS     r0,r0,#4
;;;212    					Voice[2].Type = VW_SINE;
000372  6370              STR      r0,[r6,#0x34]  ; Voice
000374  9900              LDR      r1,[sp,#0]
000376  2003              MOVS     r0,#3
000378  7688              STRB     r0,[r1,#0x1a]
                  |L1.890|
;;;213    					break;
;;;214    			}
;;;215    		}
;;;216    		n++;
;;;217    		os_evt_set(EV_REFILL_SOUND, t_Refill_Sound_Buffer);	
00037a  483b              LDR      r0,|L1.1128|
00037c  4f3b              LDR      r7,|L1.1132|
00037e  6801              LDR      r1,[r0,#0]  ; t_Refill_Sound_Buffer
000380  2001              MOVS     r0,#1
000382  1c6d              ADDS     r5,r5,#1
000384  46bc              MOV      r12,r7
000386  df00              SVC      #0x0
000388  2201              MOVS     r2,#1
00038a  0251              LSLS     r1,r2,#9
00038c  482e              LDR      r0,|L1.1096|
00038e  f7fffffe          BL       Configure_DMA_For_Playback
000392  f7fffffe          BL       Start_DMA_Playback
000396  e7a5              B        |L1.740|
                  |L1.920|
000398  4f2d              LDR      r7,|L1.1104|
00039a  20fa              MOVS     r0,#0xfa              ;187
00039c  46bc              MOV      r12,r7                ;187
00039e  df00              SVC      #0x0                  ;187
0003a0  e7eb              B        |L1.890|
                  |L1.930|
0003a2  4833              LDR      r0,|L1.1136|
0003a4  8030              STRH     r0,[r6,#0]            ;191
0003a6  482f              LDR      r0,|L1.1124|
0003a8  6070              STR      r0,[r6,#4]            ;193  ; Voice
0003aa  2028              MOVS     r0,#0x28              ;193
0003ac  8070              STRH     r0,[r6,#2]            ;193
0003ae  4831              LDR      r0,|L1.1140|
0003b0  60b0              STR      r0,[r6,#8]            ;195  ; Voice
0003b2  2001              MOVS     r0,#1                 ;195
0003b4  74b0              STRB     r0,[r6,#0x12]         ;195
0003b6  e7e0              B        |L1.890|
                  |L1.952|
0003b8  82b0              STRH     r0,[r6,#0x14]         ;198
0003ba  482a              LDR      r0,|L1.1124|
0003bc  61b0              STR      r0,[r6,#0x18]         ;200  ; Voice
0003be  2037              MOVS     r0,#0x37              ;200
0003c0  84b0              STRH     r0,[r6,#0x24]         ;200
0003c2  2014              MOVS     r0,#0x14              ;201
0003c4  82f0              STRH     r0,[r6,#0x16]         ;201
0003c6  2000              MOVS     r0,#0                 ;202
0003c8  61f0              STR      r0,[r6,#0x1c]         ;203  ; Voice
0003ca  9900              LDR      r1,[sp,#0]            ;203
0003cc  2002              MOVS     r0,#2                 ;203
0003ce  7188              STRB     r0,[r1,#6]            ;203
0003d0  e7d3              B        |L1.890|
;;;218    		Play_Waveform_with_DMA();
;;;219    	}
;;;220    }
;;;221    
                          ENDP

                  Task_Refill_Sound_Buffer PROC
                  |L1.978|
;;;222    __task void Task_Refill_Sound_Buffer(void) {
0003d2  4f2a              LDR      r7,|L1.1148|
;;;223    	uint32_t i;
;;;224    	uint16_t v;
;;;225    	int32_t sum, sample;
;;;226    	
;;;227    	while (1) {
;;;228    		os_evt_wait_and(EV_REFILL_SOUND, WAIT_FOREVER); // wait for trigger
0003d4  2201              MOVS     r2,#1
0003d6  4928              LDR      r1,|L1.1144|
0003d8  4610              MOV      r0,r2
0003da  46bc              MOV      r12,r7
0003dc  df00              SVC      #0x0
;;;229    
;;;230    		PTB->PSOR = MASK(DEBUG_T2_POS);
0003de  4928              LDR      r1,|L1.1152|
0003e0  2004              MOVS     r0,#4
0003e2  6048              STR      r0,[r1,#4]
;;;231    
;;;232    		for (i=0; i<NUM_WAVEFORM_SAMPLES; i++) {
0003e4  2000              MOVS     r0,#0
0003e6  4684              MOV      r12,r0
                  |L1.1000|
;;;233    			sum = 0;
0003e8  2400              MOVS     r4,#0
;;;234    			for (v=0; v<NUM_VOICES; v++) {
0003ea  4621              MOV      r1,r4
                  |L1.1004|
;;;235    				if (Voice[v].Duration > 0) {
0003ec  2014              MOVS     r0,#0x14
0003ee  460b              MOV      r3,r1
0003f0  4a0b              LDR      r2,|L1.1056|
0003f2  4343              MULS     r3,r0,r3
0003f4  1898              ADDS     r0,r3,r2
0003f6  6845              LDR      r5,[r0,#4]
0003f8  2d00              CMP      r5,#0
0003fa  e043              B        |L1.1156|
                  |L1.1020|
                          DCD      0x40048000
                  |L1.1024|
                          DCD      0x4004d040
                  |L1.1028|
                          DCD      0x4003f020
                  |L1.1032|
                          DCD      0x4003f000
                  |L1.1036|
                          DCD      ||.bss||-0x2
                  |L1.1040|
                          DCD      0x3dc90fdb
                  |L1.1044|
                          DCD      0x44ffe000
                  |L1.1048|
                          DCD      ||.bss||+0x7e
                  |L1.1052|
                          DCD      0x000007ff
                  |L1.1056|
                          DCD      ||.bss||+0x480
                  |L1.1060|
                          DCD      ||.bss||+0x490
                  |L1.1064|
                          DCD      ||.bss||+0x488
                  |L1.1068|
                          DCD      ||.bss||+0x48c
                  |L1.1072|
                          DCD      ||.bss||+0x492
                  |L1.1076|
                          DCD      0x01010000
                  |L1.1080|
                          DCD      0x400ff100
                  |L1.1084|
                          DCD      0xfffff801
                  |L1.1088|
                          DCD      0x000007fe
                  |L1.1092|
                          DCD      ||.bss||
                  |L1.1096|
                          DCD      ||.bss||+0x80
                  |L1.1100|
                          DCD      0x000004d2
                  |L1.1104|
                          DCD      rt_itv_set
                  |L1.1108|
                          DCD      rt_itv_wait
                  |L1.1112|
                          DCD      0x00000bb8
                  |L1.1116|
                          DCD      0x40d57c00
                  |L1.1120|
                          DCD      0xffffffff
                  |L1.1124|
                          DCD      0x00002af8
                  |L1.1128|
                          DCD      t_Refill_Sound_Buffer
                  |L1.1132|
                          DCD      rt_evt_set
                  |L1.1136|
                          DCD      0x0000bfff
                  |L1.1140|
                          DCD      0x0000ace1
                  |L1.1144|
                          DCD      0x0000ffff
                  |L1.1148|
                          DCD      rt_evt_wait
                  |L1.1152|
                          DCD      0x400ff040
                  |L1.1156|
000484  d017              BEQ      |L1.1206|
000486  7c82              LDRB     r2,[r0,#0x12]
000488  2a01              CMP      r2,#1
00048a  d02d              BEQ      |L1.1256|
00048c  2a02              CMP      r2,#2
00048e  d03c              BEQ      |L1.1290|
000490  2a03              CMP      r2,#3
000492  d048              BEQ      |L1.1318|
000494  2200              MOVS     r2,#0
                  |L1.1174|
;;;236    					sample = Sound_Generate_Next_Sample(&(Voice[v]));
;;;237    					
;;;238    					sample = (sample*Voice[v].Volume)>>16;
000496  4e2c              LDR      r6,|L1.1352|
;;;239    					sum += sample;
;;;240    					// update volume with decayed version
;;;241    					Voice[v].Volume = (Voice[v].Volume * (((int32_t) 65536) - Voice[v].Decay)) >> 16; 
000498  2702              MOVS     r7,#2
00049a  5af5              LDRH     r5,[r6,r3]            ;238
00049c  5fc7              LDRSH    r7,[r0,r7]
00049e  436a              MULS     r2,r5,r2              ;238
0004a0  1412              ASRS     r2,r2,#16             ;238
0004a2  18a4              ADDS     r4,r4,r2              ;239
0004a4  2201              MOVS     r2,#1
0004a6  0412              LSLS     r2,r2,#16
0004a8  1bd2              SUBS     r2,r2,r7
0004aa  4355              MULS     r5,r2,r5
0004ac  0c2a              LSRS     r2,r5,#16
0004ae  52f2              STRH     r2,[r6,r3]
;;;242    					Voice[v].Duration--;
0004b0  6842              LDR      r2,[r0,#4]
0004b2  1e52              SUBS     r2,r2,#1
0004b4  6042              STR      r2,[r0,#4]
                  |L1.1206|
0004b6  1c49              ADDS     r1,r1,#1
0004b8  b289              UXTH     r1,r1                 ;234
0004ba  2908              CMP      r1,#8                 ;234
0004bc  d396              BCC      |L1.1004|
;;;243    				} 
;;;244    			}
;;;245    			sum = sum + (MAX_DAC_CODE/2);
0004be  4823              LDR      r0,|L1.1356|
;;;246    			sum = MIN(sum, MAX_DAC_CODE-1);
0004c0  4923              LDR      r1,|L1.1360|
0004c2  1820              ADDS     r0,r4,r0              ;245
0004c4  4288              CMP      r0,r1
0004c6  db00              BLT      |L1.1226|
0004c8  4608              MOV      r0,r1
                  |L1.1226|
;;;247    			Waveform[i] = sum; ; 
0004ca  4661              MOV      r1,r12
0004cc  004a              LSLS     r2,r1,#1
0004ce  4921              LDR      r1,|L1.1364|
0004d0  5288              STRH     r0,[r1,r2]
0004d2  4660              MOV      r0,r12                ;232
0004d4  1c40              ADDS     r0,r0,#1              ;232
0004d6  4684              MOV      r12,r0                ;232
0004d8  2001              MOVS     r0,#1                 ;232
0004da  0240              LSLS     r0,r0,#9              ;232
0004dc  4584              CMP      r12,r0                ;232
0004de  d383              BCC      |L1.1000|
;;;248    		}
;;;249    		PTB->PCOR = MASK(DEBUG_T2_POS);
0004e0  491d              LDR      r1,|L1.1368|
0004e2  2004              MOVS     r0,#4
0004e4  6088              STR      r0,[r1,#8]
0004e6  e774              B        |L1.978|
                  |L1.1256|
0004e8  8902              LDRH     r2,[r0,#8]
0004ea  b292              UXTH     r2,r2
0004ec  0895              LSRS     r5,r2,#2
0004ee  4055              EORS     r5,r5,r2
0004f0  08d6              LSRS     r6,r2,#3
0004f2  4075              EORS     r5,r5,r6
0004f4  0956              LSRS     r6,r2,#5
0004f6  4075              EORS     r5,r5,r6
0004f8  07ed              LSLS     r5,r5,#31
0004fa  0852              LSRS     r2,r2,#1
0004fc  0c2d              LSRS     r5,r5,#16
0004fe  432a              ORRS     r2,r2,r5
000500  0915              LSRS     r5,r2,#4
000502  6082              STR      r2,[r0,#8]
000504  4a15              LDR      r2,|L1.1372|
000506  18aa              ADDS     r2,r5,r2
000508  e7c5              B        |L1.1174|
                  |L1.1290|
00050a  8a02              LDRH     r2,[r0,#0x10]
00050c  6885              LDR      r5,[r0,#8]
00050e  0852              LSRS     r2,r2,#1
000510  4295              CMP      r5,r2
000512  d201              BCS      |L1.1304|
000514  4a12              LDR      r2,|L1.1376|
000516  e000              B        |L1.1306|
                  |L1.1304|
000518  4a10              LDR      r2,|L1.1372|
                  |L1.1306|
00051a  1c6d              ADDS     r5,r5,#1
00051c  6085              STR      r5,[r0,#8]
00051e  8a06              LDRH     r6,[r0,#0x10]
000520  42b5              CMP      r5,r6
000522  d00d              BEQ      |L1.1344|
000524  e7b7              B        |L1.1174|
                  |L1.1318|
000526  6885              LDR      r5,[r0,#8]
000528  0a2a              LSRS     r2,r5,#8
00052a  0056              LSLS     r6,r2,#1
00052c  4a0d              LDR      r2,|L1.1380|
00052e  5f92              LDRSH    r2,[r2,r6]
000530  68c6              LDR      r6,[r0,#0xc]
000532  19ad              ADDS     r5,r5,r6
000534  6085              STR      r5,[r0,#8]
000536  8a06              LDRH     r6,[r0,#0x10]
000538  68c7              LDR      r7,[r0,#0xc]
00053a  437e              MULS     r6,r7,r6
00053c  42ae              CMP      r6,r5
00053e  d2aa              BCS      |L1.1174|
                  |L1.1344|
000540  2500              MOVS     r5,#0
000542  6085              STR      r5,[r0,#8]
000544  e7a7              B        |L1.1174|
;;;250    	}
;;;251    }
;;;252    
                          ENDP

000546  0000              DCW      0x0000
                  |L1.1352|
                          DCD      ||.bss||+0x480
                  |L1.1356|
                          DCD      0x000007ff
                  |L1.1360|
                          DCD      0x00000ffe
                  |L1.1364|
                          DCD      ||.bss||+0x80
                  |L1.1368|
                          DCD      0x400ff040
                  |L1.1372|
                          DCD      0xfffff801
                  |L1.1376|
                          DCD      0x000007fe
                  |L1.1380|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  SineTable
                          %        128
                  Waveform
                          %        1024
                  Voice
                          %        160

;*** Start embedded assembler ***

#line 1 "src\\sound.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_sound_c_DAC_Init____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_sound_c_DAC_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_sound_c_DAC_Init____REVSH|
#line 144
|__asm___7_sound_c_DAC_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
