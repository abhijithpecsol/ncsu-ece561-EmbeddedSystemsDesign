; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tasks.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tasks.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tasks.crf src\tasks.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Init_Debug_Signals PROC
;;;20     
;;;21     void Init_Debug_Signals(void) {
000000  b470              PUSH     {r4-r6}
;;;22     	// Enable clock to port B
;;;23     	SIM->SCGC5 |= SIM_SCGC5_PORTB_MASK;
000002  48ae              LDR      r0,|L1.700|
000004  6b81              LDR      r1,[r0,#0x38]
000006  1502              ASRS     r2,r0,#20
000008  4311              ORRS     r1,r1,r2
00000a  6381              STR      r1,[r0,#0x38]
;;;24     	
;;;25     	// Make pins GPIO
;;;26     	PORTB->PCR[DEBUG_T0_POS] &= ~PORT_PCR_MUX_MASK;          
00000c  48ac              LDR      r0,|L1.704|
00000e  6801              LDR      r1,[r0,#0]
000010  2207              MOVS     r2,#7
000012  0212              LSLS     r2,r2,#8
000014  4391              BICS     r1,r1,r2
000016  6001              STR      r1,[r0,#0]
;;;27     	PORTB->PCR[DEBUG_T0_POS] |= PORT_PCR_MUX(1);          
000018  6803              LDR      r3,[r0,#0]
00001a  1581              ASRS     r1,r0,#22
00001c  430b              ORRS     r3,r3,r1
00001e  6003              STR      r3,[r0,#0]
;;;28     	PORTB->PCR[DEBUG_T1_POS] &= ~PORT_PCR_MUX_MASK;          
000020  6843              LDR      r3,[r0,#4]
000022  4393              BICS     r3,r3,r2
000024  6043              STR      r3,[r0,#4]
;;;29     	PORTB->PCR[DEBUG_T1_POS] |= PORT_PCR_MUX(1);          
000026  6843              LDR      r3,[r0,#4]
000028  430b              ORRS     r3,r3,r1
00002a  6043              STR      r3,[r0,#4]
;;;30     	PORTB->PCR[DEBUG_T2_POS] &= ~PORT_PCR_MUX_MASK;          
00002c  6883              LDR      r3,[r0,#8]
00002e  4393              BICS     r3,r3,r2
000030  6083              STR      r3,[r0,#8]
;;;31     	PORTB->PCR[DEBUG_T2_POS] |= PORT_PCR_MUX(1);          
000032  6883              LDR      r3,[r0,#8]
000034  430b              ORRS     r3,r3,r1
000036  6083              STR      r3,[r0,#8]
;;;32     	PORTB->PCR[DEBUG_T3_POS] &= ~PORT_PCR_MUX_MASK;          
000038  68c3              LDR      r3,[r0,#0xc]
00003a  4393              BICS     r3,r3,r2
00003c  60c3              STR      r3,[r0,#0xc]
;;;33     	PORTB->PCR[DEBUG_T3_POS] |= PORT_PCR_MUX(1);          
00003e  68c3              LDR      r3,[r0,#0xc]
000040  430b              ORRS     r3,r3,r1
000042  60c3              STR      r3,[r0,#0xc]
;;;34     
;;;35     	PORTB->PCR[DEBUG_I0_POS] &= ~PORT_PCR_MUX_MASK;          
000044  6a03              LDR      r3,[r0,#0x20]
000046  4393              BICS     r3,r3,r2
000048  6203              STR      r3,[r0,#0x20]
;;;36     	PORTB->PCR[DEBUG_I0_POS] |= PORT_PCR_MUX(1);          
00004a  6a02              LDR      r2,[r0,#0x20]
00004c  430a              ORRS     r2,r2,r1
00004e  6202              STR      r2,[r0,#0x20]
;;;37     
;;;38     	
;;;39     	// Set ports to outputs
;;;40     	PTB->PDDR |= MASK(DEBUG_T0_POS);
000050  489c              LDR      r0,|L1.708|
000052  6943              LDR      r3,[r0,#0x14]
000054  2201              MOVS     r2,#1
000056  4313              ORRS     r3,r3,r2
000058  6143              STR      r3,[r0,#0x14]
;;;41     	PTB->PDDR |= MASK(DEBUG_T1_POS);
00005a  6944              LDR      r4,[r0,#0x14]
00005c  2302              MOVS     r3,#2
00005e  431c              ORRS     r4,r4,r3
000060  6144              STR      r4,[r0,#0x14]
;;;42     	PTB->PDDR |= MASK(DEBUG_T2_POS);
000062  6945              LDR      r5,[r0,#0x14]
000064  2404              MOVS     r4,#4
000066  4325              ORRS     r5,r5,r4
000068  6145              STR      r5,[r0,#0x14]
;;;43     	PTB->PDDR |= MASK(DEBUG_T3_POS);
00006a  6946              LDR      r6,[r0,#0x14]
00006c  2508              MOVS     r5,#8
00006e  432e              ORRS     r6,r6,r5
000070  6146              STR      r6,[r0,#0x14]
;;;44     	PTB->PDDR |= MASK(DEBUG_I0_POS);
000072  6946              LDR      r6,[r0,#0x14]
000074  430e              ORRS     r6,r6,r1
000076  6146              STR      r6,[r0,#0x14]
;;;45     	
;;;46     	// Initial values are 0
;;;47     	PTB->PCOR = MASK(DEBUG_T0_POS);
000078  6082              STR      r2,[r0,#8]
;;;48     	PTB->PCOR = MASK(DEBUG_T1_POS);
00007a  6083              STR      r3,[r0,#8]
;;;49     	PTB->PCOR = MASK(DEBUG_T2_POS);
00007c  6084              STR      r4,[r0,#8]
;;;50     	PTB->PCOR = MASK(DEBUG_T3_POS);
00007e  6085              STR      r5,[r0,#8]
;;;51     	PTB->PCOR = MASK(DEBUG_I0_POS);
000080  6081              STR      r1,[r0,#8]
;;;52     
;;;53     }	
000082  bc70              POP      {r4-r6}
000084  4770              BX       lr
;;;54     
                          ENDP

                  Task_Update_Screen PROC
;;;138    
;;;139    __task void Task_Update_Screen(void) {
000086  b088              SUB      sp,sp,#0x20
;;;140    	int16_t paddle_pos=TFT_WIDTH/2;
;;;141    	PT_T p1, p2;
;;;142    	COLOR_T paddle_color, black;
;;;143    	
;;;144    	paddle_color.R = 100;
000088  2064              MOVS     r0,#0x64
00008a  4669              MOV      r1,sp
00008c  7108              STRB     r0,[r1,#4]
;;;145    	paddle_color.G = 200;
00008e  20c8              MOVS     r0,#0xc8
000090  7148              STRB     r0,[r1,#5]
;;;146    	paddle_color.B = 50;
000092  2032              MOVS     r0,#0x32
000094  7188              STRB     r0,[r1,#6]
;;;147    
;;;148    	black.R = 0;
000096  2000              MOVS     r0,#0
000098  7608              STRB     r0,[r1,#0x18]
;;;149    	black.G = 0;
00009a  7648              STRB     r0,[r1,#0x19]
;;;150    	black.B = 0;
;;;151    	
;;;152    	os_itv_set(TASK_UPDATE_SCREEN_PERIOD_TICKS);
00009c  4f8a              LDR      r7,|L1.712|
00009e  2478              MOVS     r4,#0x78              ;140
0000a0  7688              STRB     r0,[r1,#0x1a]         ;150
0000a2  2064              MOVS     r0,#0x64
0000a4  46bc              MOV      r12,r7
0000a6  df00              SVC      #0x0
;;;153    
;;;154    	while (1) {
;;;155    		os_itv_wait();
;;;156    		PTB->PSOR = MASK(DEBUG_T3_POS);
0000a8  4e86              LDR      r6,|L1.708|
0000aa  2508              MOVS     r5,#8
                  |L1.172|
0000ac  4f87              LDR      r7,|L1.716|
0000ae  46bc              MOV      r12,r7                ;155
0000b0  df00              SVC      #0x0                  ;155
0000b2  6075              STR      r5,[r6,#4]
;;;157    		
;;;158    		if ((roll < -2.0) || (roll > 2.0)) {
0000b4  4f86              LDR      r7,|L1.720|
0000b6  2103              MOVS     r1,#3
0000b8  6838              LDR      r0,[r7,#0]  ; roll
0000ba  0789              LSLS     r1,r1,#30
0000bc  4288              CMP      r0,r1
0000be  d802              BHI      |L1.198|
0000c0  4249              RSBS     r1,r1,#0
0000c2  4288              CMP      r0,r1
0000c4  dd2d              BLE      |L1.290|
                  |L1.198|
;;;159    			p1.X = paddle_pos;
;;;160    			p1.Y = PADDLE_Y_POS;
0000c6  20ff              MOVS     r0,#0xff
0000c8  302e              ADDS     r0,r0,#0x2e
;;;161    			p2.X = p1.X + PADDLE_WIDTH;
0000ca  9003              STR      r0,[sp,#0xc]
0000cc  4620              MOV      r0,r4
0000ce  3028              ADDS     r0,r0,#0x28
;;;162    			p2.Y = p1.Y + PADDLE_HEIGHT;
0000d0  9004              STR      r0,[sp,#0x10]
0000d2  20ff              MOVS     r0,#0xff
0000d4  303d              ADDS     r0,r0,#0x3d
;;;163    			TFT_Fill_Rectangle(&p1, &p2, &black); 		
0000d6  9005              STR      r0,[sp,#0x14]
0000d8  9402              STR      r4,[sp,#8]            ;161
0000da  aa06              ADD      r2,sp,#0x18
0000dc  a904              ADD      r1,sp,#0x10
0000de  a802              ADD      r0,sp,#8
0000e0  f7fffffe          BL       TFT_Fill_Rectangle
;;;164    			
;;;165    			paddle_pos += roll;
0000e4  4620              MOV      r0,r4
0000e6  f7fffffe          BL       __aeabi_i2f
0000ea  6839              LDR      r1,[r7,#0]  ; roll
0000ec  f7fffffe          BL       __aeabi_fadd
0000f0  f7fffffe          BL       __aeabi_f2iz
0000f4  b204              SXTH     r4,r0
;;;166    			paddle_pos = MAX(0, paddle_pos);
0000f6  2c00              CMP      r4,#0
0000f8  da01              BGE      |L1.254|
0000fa  2400              MOVS     r4,#0
0000fc  e002              B        |L1.260|
                  |L1.254|
;;;167    			paddle_pos = MIN(paddle_pos, TFT_WIDTH-1);
0000fe  2cef              CMP      r4,#0xef
000100  db00              BLT      |L1.260|
000102  24ef              MOVS     r4,#0xef
                  |L1.260|
;;;168    			
;;;169    			p1.X = paddle_pos;
;;;170    			p1.Y = PADDLE_Y_POS;
000104  20ff              MOVS     r0,#0xff
000106  302e              ADDS     r0,r0,#0x2e
;;;171    			p2.X = p1.X + PADDLE_WIDTH;
000108  9003              STR      r0,[sp,#0xc]
00010a  4620              MOV      r0,r4
00010c  3028              ADDS     r0,r0,#0x28
;;;172    			p2.Y = p1.Y + PADDLE_HEIGHT;
00010e  9004              STR      r0,[sp,#0x10]
000110  20ff              MOVS     r0,#0xff
000112  303d              ADDS     r0,r0,#0x3d
;;;173    			TFT_Fill_Rectangle(&p1, &p2, &paddle_color); 		
000114  9005              STR      r0,[sp,#0x14]
000116  9402              STR      r4,[sp,#8]            ;171
000118  aa01              ADD      r2,sp,#4
00011a  a904              ADD      r1,sp,#0x10
00011c  a802              ADD      r0,sp,#8
00011e  f7fffffe          BL       TFT_Fill_Rectangle
                  |L1.290|
;;;174    		}
;;;175    		
;;;176    		PTB->PCOR = MASK(DEBUG_T3_POS);
000122  60b5              STR      r5,[r6,#8]
000124  e7c2              B        |L1.172|
;;;177    	}
;;;178    }
                          ENDP

                  Task_Read_Accelerometer PROC
;;;110    
;;;111    __task void Task_Read_Accelerometer(void) {
000126  4f68              LDR      r7,|L1.712|
000128  b084              SUB      sp,sp,#0x10
;;;112    	char buffer[16];
;;;113    	
;;;114    	os_itv_set(TASK_READ_ACCELEROMETER_PERIOD_TICKS);
00012a  2064              MOVS     r0,#0x64
00012c  46bc              MOV      r12,r7
00012e  df00              SVC      #0x0
;;;115    
;;;116    	while (1) {
;;;117    		os_itv_wait();
;;;118    		PTB->PSOR = MASK(DEBUG_T0_POS);
000130  4d64              LDR      r5,|L1.708|
;;;119    		read_full_xyz();
;;;120    		convert_xyz_to_roll_pitch();
;;;121    
;;;122    		sprintf(buffer, "Roll: %6.2f", roll);
;;;123    		os_mut_wait(&LCD_mutex, WAIT_FOREVER);
000132  4e68              LDR      r6,|L1.724|
000134  2401              MOVS     r4,#1                 ;118
                  |L1.310|
000136  4f65              LDR      r7,|L1.716|
000138  46bc              MOV      r12,r7                ;117
00013a  df00              SVC      #0x0                  ;117
00013c  606c              STR      r4,[r5,#4]            ;118
00013e  f7fffffe          BL       read_full_xyz
000142  f7fffffe          BL       convert_xyz_to_roll_pitch
000146  4862              LDR      r0,|L1.720|
000148  6800              LDR      r0,[r0,#0]            ;122  ; roll
00014a  f7fffffe          BL       __aeabi_f2d
00014e  4602              MOV      r2,r0                 ;122
000150  460b              MOV      r3,r1                 ;122
000152  a161              ADR      r1,|L1.728|
000154  4668              MOV      r0,sp                 ;122
000156  f7fffffe          BL       __2sprintf
00015a  4f63              LDR      r7,|L1.744|
00015c  4631              MOV      r1,r6
00015e  4861              LDR      r0,|L1.740|
000160  46bc              MOV      r12,r7
000162  df00              SVC      #0x0
;;;124    		TFT_Text_PrintStr_RC(2, 0, buffer);
000164  466a              MOV      r2,sp
000166  2100              MOVS     r1,#0
000168  2002              MOVS     r0,#2
00016a  f7fffffe          BL       TFT_Text_PrintStr_RC
;;;125    		os_mut_release(&LCD_mutex);
00016e  4f5f              LDR      r7,|L1.748|
000170  485c              LDR      r0,|L1.740|
000172  46bc              MOV      r12,r7
000174  df00              SVC      #0x0
;;;126    
;;;127    		sprintf(buffer, "Pitch: %6.2f", pitch);
000176  485e              LDR      r0,|L1.752|
000178  6800              LDR      r0,[r0,#0]  ; pitch
00017a  f7fffffe          BL       __aeabi_f2d
00017e  4602              MOV      r2,r0
000180  460b              MOV      r3,r1
000182  a15c              ADR      r1,|L1.756|
000184  4668              MOV      r0,sp
000186  f7fffffe          BL       __2sprintf
;;;128    		os_mut_wait(&LCD_mutex, WAIT_FOREVER);
00018a  4f57              LDR      r7,|L1.744|
00018c  4631              MOV      r1,r6
00018e  4855              LDR      r0,|L1.740|
000190  46bc              MOV      r12,r7
000192  df00              SVC      #0x0
;;;129    		TFT_Text_PrintStr_RC(3, 0, buffer);
000194  466a              MOV      r2,sp
000196  2100              MOVS     r1,#0
000198  2003              MOVS     r0,#3
00019a  f7fffffe          BL       TFT_Text_PrintStr_RC
;;;130    		os_mut_release(&LCD_mutex);
00019e  4f53              LDR      r7,|L1.748|
0001a0  4850              LDR      r0,|L1.740|
0001a2  46bc              MOV      r12,r7
0001a4  df00              SVC      #0x0
;;;131    
;;;132    		PTB->PCOR = MASK(DEBUG_T0_POS);
0001a6  60ac              STR      r4,[r5,#8]
0001a8  e7c5              B        |L1.310|
;;;133    	}
;;;134    }
;;;135    
                          ENDP

                  Task_Read_TS PROC
;;;66     
;;;67     __task void Task_Read_TS(void) {
0001aa  b086              SUB      sp,sp,#0x18
;;;68     	PT_T p, pp;
;;;69     	COLOR_T c;
;;;70     	
;;;71     	c.R = 150;
0001ac  2196              MOVS     r1,#0x96
0001ae  4668              MOV      r0,sp
0001b0  7001              STRB     r1,[r0,#0]
;;;72     	c.G = 200;
0001b2  21c8              MOVS     r1,#0xc8
0001b4  7041              STRB     r1,[r0,#1]
;;;73     	c.B = 255;
0001b6  21ff              MOVS     r1,#0xff
;;;74     	
;;;75     	os_itv_set(TASK_READ_TS_PERIOD_TICKS);
0001b8  4f43              LDR      r7,|L1.712|
0001ba  7081              STRB     r1,[r0,#2]            ;73
0001bc  2014              MOVS     r0,#0x14
0001be  46bc              MOV      r12,r7
0001c0  df00              SVC      #0x0
;;;76     
;;;77     	TFT_Text_PrintStr_RC(TFT_MAX_ROWS-3, 0, "Mute");
0001c2  4c50              LDR      r4,|L1.772|
0001c4  25ff              MOVS     r5,#0xff
0001c6  3541              ADDS     r5,r5,#0x41
0001c8  7821              LDRB     r1,[r4,#0]  ; G_TFT_char_height
0001ca  4628              MOV      r0,r5
0001cc  f7fffffe          BL       __aeabi_uidivmod
0001d0  1ec0              SUBS     r0,r0,#3
0001d2  b2c0              UXTB     r0,r0
0001d4  a24c              ADR      r2,|L1.776|
0001d6  2100              MOVS     r1,#0
0001d8  f7fffffe          BL       TFT_Text_PrintStr_RC
;;;78     	TFT_Text_PrintStr_RC(TFT_MAX_ROWS-3, 12, "Unmute");
0001dc  7821              LDRB     r1,[r4,#0]  ; G_TFT_char_height
0001de  4628              MOV      r0,r5
0001e0  f7fffffe          BL       __aeabi_uidivmod
0001e4  1ec0              SUBS     r0,r0,#3
0001e6  b2c0              UXTB     r0,r0
0001e8  a249              ADR      r2,|L1.784|
0001ea  210c              MOVS     r1,#0xc
0001ec  f7fffffe          BL       TFT_Text_PrintStr_RC
0001f0  2600              MOVS     r6,#0
;;;79     	
;;;80     	while (1) {
;;;81     		os_itv_wait();
;;;82     		PTB->PSOR = MASK(DEBUG_T1_POS);
0001f2  4c34              LDR      r4,|L1.708|
0001f4  2502              MOVS     r5,#2
                  |L1.502|
0001f6  4f35              LDR      r7,|L1.716|
0001f8  46bc              MOV      r12,r7                ;81
0001fa  df00              SVC      #0x0                  ;81
0001fc  6065              STR      r5,[r4,#4]
;;;83     		if (TFT_TS_Read(&p)) { 
0001fe  a804              ADD      r0,sp,#0x10
000200  f7fffffe          BL       TFT_TS_Read
000204  2800              CMP      r0,#0
000206  d028              BEQ      |L1.602|
;;;84     			// Send message indicating screen was pressed
;;;85     			// os_evt_set(EV_PLAYSOUND, t_Sound);
;;;86     
;;;87     			if (p.Y > 240) { 
000208  9805              LDR      r0,[sp,#0x14]
00020a  28f0              CMP      r0,#0xf0
00020c  d908              BLS      |L1.544|
;;;88     				if (p.X < TFT_WIDTH/2) {
00020e  9804              LDR      r0,[sp,#0x10]
000210  2878              CMP      r0,#0x78
000212  d202              BCS      |L1.538|
;;;89     					Sound_Disable_Amp();
000214  f7fffffe          BL       Sound_Disable_Amp
000218  e021              B        |L1.606|
                  |L1.538|
;;;90     				} else {
;;;91     					Sound_Enable_Amp();
00021a  f7fffffe          BL       Sound_Enable_Amp
00021e  e01e              B        |L1.606|
                  |L1.544|
;;;92     				}
;;;93     			} else {
;;;94     				// Now draw on screen
;;;95     				if ((pp.X == 0) && (pp.Y == 0)) {
000220  9802              LDR      r0,[sp,#8]
000222  2800              CMP      r0,#0
000224  d106              BNE      |L1.564|
000226  9803              LDR      r0,[sp,#0xc]
000228  2800              CMP      r0,#0
00022a  d103              BNE      |L1.564|
;;;96     					pp = p;
00022c  9905              LDR      r1,[sp,#0x14]
00022e  9804              LDR      r0,[sp,#0x10]
000230  9103              STR      r1,[sp,#0xc]
000232  9002              STR      r0,[sp,#8]
                  |L1.564|
;;;97     				}
;;;98     				os_mut_wait(&LCD_mutex, WAIT_FOREVER);
000234  4f2c              LDR      r7,|L1.744|
000236  4927              LDR      r1,|L1.724|
000238  482a              LDR      r0,|L1.740|
00023a  46bc              MOV      r12,r7
00023c  df00              SVC      #0x0
;;;99     				TFT_Draw_Line(&p, &pp, &c);
00023e  466a              MOV      r2,sp
000240  a902              ADD      r1,sp,#8
000242  a804              ADD      r0,sp,#0x10
000244  f7fffffe          BL       TFT_Draw_Line
;;;100    				os_mut_release(&LCD_mutex);
000248  4f28              LDR      r7,|L1.748|
00024a  4826              LDR      r0,|L1.740|
00024c  46bc              MOV      r12,r7
00024e  df00              SVC      #0x0
;;;101    				pp = p;
000250  9905              LDR      r1,[sp,#0x14]
000252  9804              LDR      r0,[sp,#0x10]
000254  9103              STR      r1,[sp,#0xc]
000256  9002              STR      r0,[sp,#8]
000258  e001              B        |L1.606|
                  |L1.602|
;;;102    			} 
;;;103    		} else {
;;;104    			pp.X = 0;
;;;105    			pp.Y = 0;
00025a  9602              STR      r6,[sp,#8]
00025c  9603              STR      r6,[sp,#0xc]
                  |L1.606|
;;;106    		}
;;;107    		PTB->PCOR = MASK(DEBUG_T1_POS);
00025e  60a5              STR      r5,[r4,#8]
000260  e7c9              B        |L1.502|
;;;108    	}
;;;109    }
;;;110    
                          ENDP

                  Task_Init PROC
;;;54     
;;;55     __task void Task_Init(void) {
000262  4f2d              LDR      r7,|L1.792|
;;;56     	os_mut_init(&LCD_mutex);
000264  481f              LDR      r0,|L1.740|
000266  46bc              MOV      r12,r7
000268  df00              SVC      #0x0
;;;57     
;;;58     	t_Read_TS = os_tsk_create(Task_Read_TS, 4);
00026a  2300              MOVS     r3,#0
00026c  4f2c              LDR      r7,|L1.800|
00026e  461a              MOV      r2,r3
000270  2104              MOVS     r1,#4
000272  482a              LDR      r0,|L1.796|
000274  46bc              MOV      r12,r7
000276  df00              SVC      #0x0
000278  4c2a              LDR      r4,|L1.804|
;;;59     	t_Read_Accelerometer = os_tsk_create_user(Task_Read_Accelerometer, 3, RA_Stack, 512);
00027a  2300              MOVS     r3,#0
00027c  6020              STR      r0,[r4,#0]  ; t_Read_TS
00027e  4a2a              LDR      r2,|L1.808|
000280  492a              LDR      r1,|L1.812|
000282  482b              LDR      r0,|L1.816|
000284  46bc              MOV      r12,r7
000286  df00              SVC      #0x0
;;;60     	t_Sound_Manager = os_tsk_create(Task_Sound_Manager, 2); // Should be lower priority than Refill Sound Buffer
000288  2300              MOVS     r3,#0
00028a  6060              STR      r0,[r4,#4]  ; t_Read_Accelerometer
00028c  461a              MOV      r2,r3
00028e  2102              MOVS     r1,#2
000290  4828              LDR      r0,|L1.820|
000292  46bc              MOV      r12,r7
000294  df00              SVC      #0x0
;;;61     	t_US = os_tsk_create(Task_Update_Screen, 5);
000296  2300              MOVS     r3,#0
000298  60a0              STR      r0,[r4,#8]  ; t_Sound_Manager
00029a  461a              MOV      r2,r3
00029c  2105              MOVS     r1,#5
00029e  4826              LDR      r0,|L1.824|
0002a0  46bc              MOV      r12,r7
0002a2  df00              SVC      #0x0
;;;62     	t_Refill_Sound_Buffer = os_tsk_create(Task_Refill_Sound_Buffer, 1);
0002a4  2300              MOVS     r3,#0
0002a6  60e0              STR      r0,[r4,#0xc]  ; t_US
0002a8  461a              MOV      r2,r3
0002aa  2101              MOVS     r1,#1
0002ac  4823              LDR      r0,|L1.828|
0002ae  46bc              MOV      r12,r7
0002b0  df00              SVC      #0x0
;;;63     
;;;64       os_tsk_delete_self ();
0002b2  4f23              LDR      r7,|L1.832|
0002b4  6120              STR      r0,[r4,#0x10]  ; t_Refill_Sound_Buffer
0002b6  2000              MOVS     r0,#0
0002b8  46bc              MOV      r12,r7
0002ba  df00              SVC      #0x0
;;;65     }
;;;66     
                          ENDP

                  |L1.700|
                          DCD      0x40048000
                  |L1.704|
                          DCD      0x4004a000
                  |L1.708|
                          DCD      0x400ff040
                  |L1.712|
                          DCD      rt_itv_set
                  |L1.716|
                          DCD      rt_itv_wait
                  |L1.720|
                          DCD      roll
                  |L1.724|
                          DCD      0x0000ffff
                  |L1.728|
0002d8  526f6c6c          DCB      "Roll: %6.2f",0
0002dc  3a202536
0002e0  2e326600
                  |L1.740|
                          DCD      ||.bss||+0x200
                  |L1.744|
                          DCD      rt_mut_wait
                  |L1.748|
                          DCD      rt_mut_release
                  |L1.752|
                          DCD      pitch
                  |L1.756|
0002f4  50697463          DCB      "Pitch: %6.2f",0
0002f8  683a2025
0002fc  362e3266
000300  00      
000301  00                DCB      0
000302  00                DCB      0
000303  00                DCB      0
                  |L1.772|
                          DCD      G_TFT_char_height
                  |L1.776|
000308  4d757465          DCB      "Mute",0
00030c  00      
00030d  00                DCB      0
00030e  00                DCB      0
00030f  00                DCB      0
                  |L1.784|
000310  556e6d75          DCB      "Unmute",0
000314  746500  
000317  00                DCB      0
                  |L1.792|
                          DCD      rt_mut_init
                  |L1.796|
                          DCD      Task_Read_TS
                  |L1.800|
                          DCD      rt_tsk_create
                  |L1.804|
                          DCD      ||.data||
                  |L1.808|
                          DCD      ||.bss||
                  |L1.812|
                          DCD      0x00020003
                  |L1.816|
                          DCD      Task_Read_Accelerometer
                  |L1.820|
                          DCD      Task_Sound_Manager
                  |L1.824|
                          DCD      Task_Update_Screen
                  |L1.828|
                          DCD      Task_Refill_Sound_Buffer
                  |L1.832|
                          DCD      rt_tsk_delete

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  RA_Stack
                          %        512
                  LCD_mutex
                          %        16

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.bss||
                  TS_mutex
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  t_Read_TS
                          DCD      0x00000000
                  t_Read_Accelerometer
                          DCD      0x00000000
                  t_Sound_Manager
                          DCD      0x00000000
                  t_US
                          DCD      0x00000000
                  t_Refill_Sound_Buffer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\tasks.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_tasks_c_ebb4e44d____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_tasks_c_ebb4e44d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_tasks_c_ebb4e44d____REVSH|
#line 144
|__asm___7_tasks_c_ebb4e44d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
