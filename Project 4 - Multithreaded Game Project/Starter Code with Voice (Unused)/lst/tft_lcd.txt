; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tft_lcd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tft_lcd.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tft_lcd.crf src\TFT_lcd.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  TFT_GPIO_Init PROC
;;;21     /* Initialize GPIO ports for communicating with TFT LCD controller. */
;;;22     void TFT_GPIO_Init(void) {
000000  b430              PUSH     {r4,r5}
;;;23     	unsigned i;
;;;24     	
;;;25     	// Enable clock to ports
;;;26     	SIM->SCGC5 |= SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTE_MASK;
000002  48fc              LDR      r0,|L1.1012|
000004  6b81              LDR      r1,[r0,#0x38]
000006  2205              MOVS     r2,#5
000008  02d2              LSLS     r2,r2,#11
00000a  4311              ORRS     r1,r1,r2
00000c  6381              STR      r1,[r0,#0x38]
;;;27     	
;;;28     	// Make digital pins GPIO
;;;29     	// Data bus pins
;;;30     	for (i=TFT_DB8_POS; i<=TFT_DB15_POS; i++) {
;;;31     		PORTC->PCR[i] &= ~PORT_PCR_MUX_MASK;
00000e  48fa              LDR      r0,|L1.1016|
000010  68c1              LDR      r1,[r0,#0xc]
000012  2307              MOVS     r3,#7
000014  021b              LSLS     r3,r3,#8
000016  4399              BICS     r1,r1,r3
000018  60c1              STR      r1,[r0,#0xc]
;;;32     		PORTC->PCR[i] |= PORT_PCR_MUX(1);
00001a  68c1              LDR      r1,[r0,#0xc]
00001c  1582              ASRS     r2,r0,#22
00001e  4311              ORRS     r1,r1,r2
000020  60c1              STR      r1,[r0,#0xc]
;;;33     		PTC->PDDR |= MASK(i);
000022  49f6              LDR      r1,|L1.1020|
000024  694c              LDR      r4,[r1,#0x14]
000026  2508              MOVS     r5,#8
000028  432c              ORRS     r4,r4,r5
00002a  614c              STR      r4,[r1,#0x14]
00002c  6904              LDR      r4,[r0,#0x10]         ;31
00002e  439c              BICS     r4,r4,r3              ;31
000030  6104              STR      r4,[r0,#0x10]         ;31
000032  6904              LDR      r4,[r0,#0x10]         ;32
000034  4314              ORRS     r4,r4,r2              ;32
000036  6104              STR      r4,[r0,#0x10]         ;32
000038  694c              LDR      r4,[r1,#0x14]
00003a  2510              MOVS     r5,#0x10
00003c  432c              ORRS     r4,r4,r5
00003e  614c              STR      r4,[r1,#0x14]
000040  6944              LDR      r4,[r0,#0x14]         ;31
000042  439c              BICS     r4,r4,r3              ;31
000044  6144              STR      r4,[r0,#0x14]         ;31
000046  6944              LDR      r4,[r0,#0x14]         ;32
000048  4314              ORRS     r4,r4,r2              ;32
00004a  6144              STR      r4,[r0,#0x14]         ;32
00004c  694c              LDR      r4,[r1,#0x14]
00004e  2520              MOVS     r5,#0x20
000050  432c              ORRS     r4,r4,r5
000052  614c              STR      r4,[r1,#0x14]
000054  6984              LDR      r4,[r0,#0x18]         ;31
000056  439c              BICS     r4,r4,r3              ;31
000058  6184              STR      r4,[r0,#0x18]         ;31
00005a  6984              LDR      r4,[r0,#0x18]         ;32
00005c  4314              ORRS     r4,r4,r2              ;32
00005e  6184              STR      r4,[r0,#0x18]         ;32
000060  694c              LDR      r4,[r1,#0x14]
000062  2540              MOVS     r5,#0x40
000064  432c              ORRS     r4,r4,r5
000066  614c              STR      r4,[r1,#0x14]
000068  69c4              LDR      r4,[r0,#0x1c]         ;31
00006a  439c              BICS     r4,r4,r3              ;31
00006c  61c4              STR      r4,[r0,#0x1c]         ;31
00006e  69c4              LDR      r4,[r0,#0x1c]         ;32
000070  4314              ORRS     r4,r4,r2              ;32
000072  61c4              STR      r4,[r0,#0x1c]         ;32
000074  694c              LDR      r4,[r1,#0x14]
000076  2580              MOVS     r5,#0x80
000078  432c              ORRS     r4,r4,r5
00007a  614c              STR      r4,[r1,#0x14]
00007c  6a04              LDR      r4,[r0,#0x20]         ;31
00007e  439c              BICS     r4,r4,r3              ;31
000080  6204              STR      r4,[r0,#0x20]         ;31
000082  6a04              LDR      r4,[r0,#0x20]         ;32
000084  4314              ORRS     r4,r4,r2              ;32
000086  6204              STR      r4,[r0,#0x20]         ;32
000088  694c              LDR      r4,[r1,#0x14]
00008a  4314              ORRS     r4,r4,r2
00008c  614c              STR      r4,[r1,#0x14]
00008e  6a44              LDR      r4,[r0,#0x24]         ;31
000090  439c              BICS     r4,r4,r3              ;31
000092  6244              STR      r4,[r0,#0x24]         ;31
000094  6a44              LDR      r4,[r0,#0x24]         ;32
000096  4314              ORRS     r4,r4,r2              ;32
000098  6244              STR      r4,[r0,#0x24]         ;32
00009a  694c              LDR      r4,[r1,#0x14]
00009c  1545              ASRS     r5,r0,#21
00009e  432c              ORRS     r4,r4,r5
0000a0  614c              STR      r4,[r1,#0x14]
0000a2  6a84              LDR      r4,[r0,#0x28]         ;31
0000a4  439c              BICS     r4,r4,r3              ;31
0000a6  6284              STR      r4,[r0,#0x28]         ;31
0000a8  6a84              LDR      r4,[r0,#0x28]         ;32
0000aa  4314              ORRS     r4,r4,r2              ;32
0000ac  6284              STR      r4,[r0,#0x28]         ;32
0000ae  694c              LDR      r4,[r1,#0x14]
0000b0  1505              ASRS     r5,r0,#20
0000b2  432c              ORRS     r4,r4,r5
0000b4  614c              STR      r4,[r1,#0x14]
;;;34     	}
;;;35     	
;;;36     	// Data/Command
;;;37     	PORTC->PCR[TFT_D_NC_POS] &= ~PORT_PCR_MUX_MASK;
0000b6  6b01              LDR      r1,[r0,#0x30]
0000b8  4399              BICS     r1,r1,r3
0000ba  6301              STR      r1,[r0,#0x30]
;;;38     	PORTC->PCR[TFT_D_NC_POS] |= PORT_PCR_MUX(1);
0000bc  6b01              LDR      r1,[r0,#0x30]
0000be  4311              ORRS     r1,r1,r2
0000c0  6301              STR      r1,[r0,#0x30]
;;;39     	// /Write
;;;40     	PORTC->PCR[TFT_NWR_POS] &= ~PORT_PCR_MUX_MASK;
0000c2  6b41              LDR      r1,[r0,#0x34]
0000c4  4399              BICS     r1,r1,r3
0000c6  6341              STR      r1,[r0,#0x34]
;;;41     	PORTC->PCR[TFT_NWR_POS] |= PORT_PCR_MUX(1);
0000c8  6b41              LDR      r1,[r0,#0x34]
0000ca  4311              ORRS     r1,r1,r2
0000cc  6341              STR      r1,[r0,#0x34]
;;;42     	// /Read
;;;43     	PORTC->PCR[TFT_NRD_POS] &= ~PORT_PCR_MUX_MASK;
0000ce  48cc              LDR      r0,|L1.1024|
0000d0  6801              LDR      r1,[r0,#0]
0000d2  4399              BICS     r1,r1,r3
0000d4  6001              STR      r1,[r0,#0]
;;;44     	PORTC->PCR[TFT_NRD_POS] |= PORT_PCR_MUX(1);
0000d6  6801              LDR      r1,[r0,#0]
0000d8  4311              ORRS     r1,r1,r2
0000da  6001              STR      r1,[r0,#0]
;;;45     	// /Reset
;;;46     	PORTC->PCR[TFT_NRST_POS] &= ~PORT_PCR_MUX_MASK;
0000dc  6841              LDR      r1,[r0,#4]
0000de  4399              BICS     r1,r1,r3
0000e0  6041              STR      r1,[r0,#4]
;;;47     	PORTC->PCR[TFT_NRST_POS] |= PORT_PCR_MUX(1);
0000e2  6841              LDR      r1,[r0,#4]
0000e4  4311              ORRS     r1,r1,r2
0000e6  6041              STR      r1,[r0,#4]
;;;48     
;;;49     	// Set port directions to outputs
;;;50     	FPTC->PDDR |= MASK(TFT_D_NC_POS);
0000e8  48c6              LDR      r0,|L1.1028|
0000ea  6942              LDR      r2,[r0,#0x14]
0000ec  00a9              LSLS     r1,r5,#2
0000ee  430a              ORRS     r2,r2,r1
0000f0  6142              STR      r2,[r0,#0x14]
;;;51     	FPTC->PDDR |= MASK(TFT_NWR_POS);
0000f2  6943              LDR      r3,[r0,#0x14]
0000f4  004a              LSLS     r2,r1,#1
0000f6  4313              ORRS     r3,r3,r2
0000f8  6143              STR      r3,[r0,#0x14]
;;;52     	FPTC->PDDR |= MASK(TFT_NRD_POS);
0000fa  6944              LDR      r4,[r0,#0x14]
0000fc  010b              LSLS     r3,r1,#4
0000fe  431c              ORRS     r4,r4,r3
000100  6144              STR      r4,[r0,#0x14]
;;;53     	FPTC->PDDR |= MASK(TFT_NRST_POS);
000102  6945              LDR      r5,[r0,#0x14]
000104  014c              LSLS     r4,r1,#5
000106  4325              ORRS     r5,r5,r4
000108  6145              STR      r5,[r0,#0x14]
;;;54     
;;;55     	// Set initial control line values to inactive (1)
;;;56     	FPTC->PDOR |= MASK(TFT_D_NC_POS);
00010a  6805              LDR      r5,[r0,#0]
00010c  430d              ORRS     r5,r5,r1
00010e  6005              STR      r5,[r0,#0]
;;;57     	FPTC->PDOR |= MASK(TFT_NWR_POS);
000110  6801              LDR      r1,[r0,#0]
000112  4311              ORRS     r1,r1,r2
000114  6001              STR      r1,[r0,#0]
;;;58     	FPTC->PDOR |= MASK(TFT_NRD_POS);
000116  6801              LDR      r1,[r0,#0]
000118  4319              ORRS     r1,r1,r3
00011a  6001              STR      r1,[r0,#0]
;;;59     	FPTC->PDOR |= MASK(TFT_NRST_POS);
00011c  6801              LDR      r1,[r0,#0]
00011e  4321              ORRS     r1,r1,r4
000120  6001              STR      r1,[r0,#0]
;;;60     }
000122  bc30              POP      {r4,r5}
000124  4770              BX       lr
;;;61     
                          ENDP

                  TFT_Init_Backlight PROC
;;;64     /* Initialize hardware for LCD backlight control and set to default value. */
;;;65     void TFT_Init_Backlight(void) {
000126  b510              PUSH     {r4,lr}
;;;66     	// Init_PWM(TFT_BL_TPM, TFT_BL_TPM_CHANNEL, 10000 /* TFT_BL_PERIOD*/, 5000 /* TFT_BL_PERIOD/2*/);	
;;;67     	Old_Init_PWM();
000128  f7fffffe          BL       Old_Init_PWM
;;;68     	// TFT_Set_Backlight_Brightness(100);
;;;69     }
00012c  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  TFT_Set_Backlight_Brightness PROC
;;;71     /* Set backlight brightness for LCD via duty cycle. Function is currently broken. */
;;;72     void TFT_Set_Backlight_Brightness(uint16_t brightness_percent){
00012e  b510              PUSH     {r4,lr}
000130  4604              MOV      r4,r0
;;;73     	PWM_Set_Value(TFT_BL_TPM, TFT_BL_TPM_CHANNEL, (brightness_percent*100)/TFT_BL_PERIOD);
000132  48b6              LDR      r0,|L1.1036|
000134  49b4              LDR      r1,|L1.1032|
000136  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000138  f7fffffe          BL       __aeabi_uidivmod
00013c  2264              MOVS     r2,#0x64
00013e  4354              MULS     r4,r2,r4
000140  4601              MOV      r1,r0
000142  4620              MOV      r0,r4
000144  f7fffffe          BL       __aeabi_uidivmod
000148  b282              UXTH     r2,r0
00014a  2100              MOVS     r1,#0
00014c  48b0              LDR      r0,|L1.1040|
00014e  f7fffffe          BL       PWM_Set_Value
;;;74     }
000152  bd10              POP      {r4,pc}
;;;75     
                          ENDP

                  TFT_24S_Write_Command PROC
;;;77     /* Write one byte as a command to the TFT LCD controller. */
;;;78     void TFT_24S_Write_Command(uint8_t command)
000154  2201              MOVS     r2,#1
;;;79     {
;;;80     	GPIO_ResetBit(TFT_D_NC_POS);
000156  49ab              LDR      r1,|L1.1028|
000158  0312              LSLS     r2,r2,#12
00015a  608a              STR      r2,[r1,#8]
;;;81     	GPIO_Write(command);
00015c  680a              LDR      r2,[r1,#0]
00015e  23ff              MOVS     r3,#0xff
000160  00db              LSLS     r3,r3,#3
000162  439a              BICS     r2,r2,r3
000164  600a              STR      r2,[r1,#0]
000166  680a              LDR      r2,[r1,#0]
000168  00c0              LSLS     r0,r0,#3
00016a  4302              ORRS     r2,r2,r0
00016c  600a              STR      r2,[r1,#0]
;;;82     	GPIO_ResetBit(TFT_NWR_POS);
00016e  2001              MOVS     r0,#1
000170  0340              LSLS     r0,r0,#13
000172  6088              STR      r0,[r1,#8]
;;;83     	GPIO_SetBit(TFT_NWR_POS);
000174  6048              STR      r0,[r1,#4]
;;;84     }
000176  4770              BX       lr
;;;85     
                          ENDP

                  TFT_24S_Write_Data PROC
;;;86     /* Write one byte as data to the TFT LCD Controller. */
;;;87     void TFT_24S_Write_Data(uint8_t data)
000178  2201              MOVS     r2,#1
;;;88     {
;;;89     	GPIO_SetBit(TFT_D_NC_POS);
00017a  49a2              LDR      r1,|L1.1028|
00017c  0312              LSLS     r2,r2,#12
00017e  604a              STR      r2,[r1,#4]
;;;90     	GPIO_Write(data);
000180  680a              LDR      r2,[r1,#0]
000182  23ff              MOVS     r3,#0xff
000184  00db              LSLS     r3,r3,#3
000186  439a              BICS     r2,r2,r3
000188  600a              STR      r2,[r1,#0]
00018a  680a              LDR      r2,[r1,#0]
00018c  00c0              LSLS     r0,r0,#3
00018e  4302              ORRS     r2,r2,r0
000190  600a              STR      r2,[r1,#0]
;;;91     	GPIO_ResetBit(TFT_NWR_POS);
000192  2001              MOVS     r0,#1
000194  0340              LSLS     r0,r0,#13
000196  6088              STR      r0,[r1,#8]
;;;92     	GPIO_SetBit(TFT_NWR_POS);
000198  6048              STR      r0,[r1,#4]
;;;93     }
00019a  4770              BX       lr
;;;94     
                          ENDP

                  Init_ADC PROC
;;;342    
;;;343    void Init_ADC(void) {
00019c  4895              LDR      r0,|L1.1012|
;;;344    	
;;;345    	SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK; 
00019e  6bc1              LDR      r1,[r0,#0x3c]
0001a0  2201              MOVS     r2,#1
0001a2  06d2              LSLS     r2,r2,#27
0001a4  4311              ORRS     r1,r1,r2
0001a6  63c1              STR      r1,[r0,#0x3c]
;;;346    	ADC0->CFG1 = 0x9C; // 16 bit
0001a8  489a              LDR      r0,|L1.1044|
0001aa  219c              MOVS     r1,#0x9c
0001ac  6081              STR      r1,[r0,#8]
;;;347    	ADC0->SC2 = 0;
0001ae  2100              MOVS     r1,#0
0001b0  6201              STR      r1,[r0,#0x20]
;;;348    }
0001b2  4770              BX       lr
;;;349    
                          ENDP

                  TFT_TS_Init PROC
;;;351    /* Initialize touchscreen hardware (ADC). */
;;;352    void TFT_TS_Init(void) {
0001b4  488f              LDR      r0,|L1.1012|
0001b6  6bc1              LDR      r1,[r0,#0x3c]
0001b8  2201              MOVS     r2,#1
0001ba  06d2              LSLS     r2,r2,#27
0001bc  4311              ORRS     r1,r1,r2
0001be  63c1              STR      r1,[r0,#0x3c]
0001c0  4894              LDR      r0,|L1.1044|
0001c2  219c              MOVS     r1,#0x9c
0001c4  6081              STR      r1,[r0,#8]
0001c6  2100              MOVS     r1,#0
0001c8  6201              STR      r1,[r0,#0x20]
;;;353    	// Configure ADC
;;;354    	Init_ADC();
;;;355    }
0001ca  4770              BX       lr
;;;356    
                          ENDP

                  TFT_Init PROC
;;;96     components (TFT LCD controller, touch screen and backlight controller). */ 
;;;97     void TFT_Init()
0001cc  b570              PUSH     {r4-r6,lr}
;;;98     {
;;;99     	TFT_GPIO_Init();
0001ce  f7fffffe          BL       TFT_GPIO_Init
0001d2  4888              LDR      r0,|L1.1012|
0001d4  6bc1              LDR      r1,[r0,#0x3c]
0001d6  2201              MOVS     r2,#1
0001d8  06d2              LSLS     r2,r2,#27
0001da  4311              ORRS     r1,r1,r2
0001dc  63c1              STR      r1,[r0,#0x3c]
0001de  488d              LDR      r0,|L1.1044|
0001e0  219c              MOVS     r1,#0x9c
0001e2  6081              STR      r1,[r0,#8]
0001e4  2100              MOVS     r1,#0
0001e6  6201              STR      r1,[r0,#0x20]
0001e8  f7fffffe          BL       Old_Init_PWM
;;;100    	TFT_TS_Init();
;;;101    	TFT_Init_Backlight();
;;;102    	
;;;103    	GPIO_SetBit(TFT_NRD_POS);
0001ec  2001              MOVS     r0,#1
0001ee  4c85              LDR      r4,|L1.1028|
0001f0  0400              LSLS     r0,r0,#16
0001f2  6060              STR      r0,[r4,#4]
;;;104    	GPIO_ResetBit(TFT_NWR_POS);
0001f4  10c0              ASRS     r0,r0,#3
0001f6  60a0              STR      r0,[r4,#8]
;;;105    	GPIO_ResetBit(TFT_NRST_POS);
0001f8  0105              LSLS     r5,r0,#4
0001fa  60a5              STR      r5,[r4,#8]
;;;106    	Delay(100);
0001fc  2064              MOVS     r0,#0x64
0001fe  f7fffffe          BL       Delay
;;;107    	GPIO_SetBit(TFT_NRST_POS);
000202  6065              STR      r5,[r4,#4]
;;;108    	Delay(200);
000204  20c8              MOVS     r0,#0xc8
000206  f7fffffe          BL       Delay
;;;109    	TFT_24S_Write_Command(0x0028); //display OFF
00020a  2028              MOVS     r0,#0x28
00020c  f7fffffe          BL       TFT_24S_Write_Command
;;;110    	TFT_24S_Write_Command(0x0011); //exit SLEEP mode
000210  2011              MOVS     r0,#0x11
000212  f7fffffe          BL       TFT_24S_Write_Command
;;;111    	TFT_24S_Write_Data(0x0000);
000216  2000              MOVS     r0,#0
000218  f7fffffe          BL       TFT_24S_Write_Data
;;;112    	TFT_24S_Write_Command(0x00CB); //Power Control A
00021c  20cb              MOVS     r0,#0xcb
00021e  f7fffffe          BL       TFT_24S_Write_Command
;;;113    	TFT_24S_Write_Data(0x0039); //always 0x39
000222  2039              MOVS     r0,#0x39
000224  f7fffffe          BL       TFT_24S_Write_Data
;;;114    	TFT_24S_Write_Data(0x002C); //always 0x2C
000228  202c              MOVS     r0,#0x2c
00022a  f7fffffe          BL       TFT_24S_Write_Data
;;;115    	TFT_24S_Write_Data(0x0000); //always 0x00
00022e  2000              MOVS     r0,#0
000230  f7fffffe          BL       TFT_24S_Write_Data
;;;116    	TFT_24S_Write_Data(0x0034); //Vcore = 1.6V
000234  2034              MOVS     r0,#0x34
000236  f7fffffe          BL       TFT_24S_Write_Data
;;;117    	TFT_24S_Write_Data(0x0002); //DDVDH = 5.6V
00023a  2002              MOVS     r0,#2
00023c  f7fffffe          BL       TFT_24S_Write_Data
;;;118    	TFT_24S_Write_Command(0x00CF); //Power Control B
000240  20cf              MOVS     r0,#0xcf
000242  f7fffffe          BL       TFT_24S_Write_Command
;;;119    	TFT_24S_Write_Data(0x0000); //always 0x00
000246  2000              MOVS     r0,#0
000248  f7fffffe          BL       TFT_24S_Write_Data
;;;120    	TFT_24S_Write_Data(0x0081); //PCEQ off
00024c  2081              MOVS     r0,#0x81
00024e  f7fffffe          BL       TFT_24S_Write_Data
;;;121    	TFT_24S_Write_Data(0x0030); //ESD protection
000252  2030              MOVS     r0,#0x30
000254  f7fffffe          BL       TFT_24S_Write_Data
;;;122    	TFT_24S_Write_Command(0x00E8); //Driver timing control A
000258  20e8              MOVS     r0,#0xe8
00025a  f7fffffe          BL       TFT_24S_Write_Command
;;;123    	TFT_24S_Write_Data(0x0085); //non-overlap
00025e  2085              MOVS     r0,#0x85
000260  f7fffffe          BL       TFT_24S_Write_Data
;;;124    	TFT_24S_Write_Data(0x0001); //EQ timing
000264  2001              MOVS     r0,#1
000266  f7fffffe          BL       TFT_24S_Write_Data
;;;125    	TFT_24S_Write_Data(0x0079); //Pre-charge timing
00026a  2079              MOVS     r0,#0x79
00026c  f7fffffe          BL       TFT_24S_Write_Data
;;;126    	TFT_24S_Write_Command(0x00EA); //Driver timing control B
000270  20ea              MOVS     r0,#0xea
000272  f7fffffe          BL       TFT_24S_Write_Command
;;;127    	TFT_24S_Write_Data(0x0000); //Gate driver timing
000276  2000              MOVS     r0,#0
000278  f7fffffe          BL       TFT_24S_Write_Data
;;;128    	TFT_24S_Write_Data(0x0000); //always 0x00
00027c  2000              MOVS     r0,#0
00027e  f7fffffe          BL       TFT_24S_Write_Data
;;;129    	TFT_24S_Write_Command(0x00ED); //Power-On sequence control
000282  20ed              MOVS     r0,#0xed
000284  f7fffffe          BL       TFT_24S_Write_Command
;;;130    	TFT_24S_Write_Data(0x0064); //soft start
000288  2064              MOVS     r0,#0x64
00028a  f7fffffe          BL       TFT_24S_Write_Data
;;;131    	TFT_24S_Write_Data(0x0003); //power on sequence
00028e  2003              MOVS     r0,#3
000290  f7fffffe          BL       TFT_24S_Write_Data
;;;132    	TFT_24S_Write_Data(0x0012); //power on sequence
000294  2012              MOVS     r0,#0x12
000296  f7fffffe          BL       TFT_24S_Write_Data
;;;133    	TFT_24S_Write_Data(0x0081); //DDVDH enhance on
00029a  2081              MOVS     r0,#0x81
00029c  f7fffffe          BL       TFT_24S_Write_Data
;;;134    	TFT_24S_Write_Command(0x00F7); //Pump ratio control
0002a0  20f7              MOVS     r0,#0xf7
0002a2  f7fffffe          BL       TFT_24S_Write_Command
;;;135    	TFT_24S_Write_Data(0x0020); //DDVDH=2xVCI
0002a6  2020              MOVS     r0,#0x20
0002a8  f7fffffe          BL       TFT_24S_Write_Data
;;;136    	TFT_24S_Write_Command(0x00C0); //power control 1
0002ac  20c0              MOVS     r0,#0xc0
0002ae  f7fffffe          BL       TFT_24S_Write_Command
;;;137    	TFT_24S_Write_Data(0x0026);
0002b2  2026              MOVS     r0,#0x26
0002b4  f7fffffe          BL       TFT_24S_Write_Data
;;;138    	TFT_24S_Write_Data(0x0004); //second parameter for ILI9340 (ignored by ILI9341)
0002b8  2004              MOVS     r0,#4
0002ba  f7fffffe          BL       TFT_24S_Write_Data
;;;139    	TFT_24S_Write_Command(0x00C1); //power control 2
0002be  20c1              MOVS     r0,#0xc1
0002c0  f7fffffe          BL       TFT_24S_Write_Command
;;;140    	TFT_24S_Write_Data(0x0011);
0002c4  2011              MOVS     r0,#0x11
0002c6  f7fffffe          BL       TFT_24S_Write_Data
;;;141    	TFT_24S_Write_Command(0x00C5); //VCOM control 1
0002ca  20c5              MOVS     r0,#0xc5
0002cc  f7fffffe          BL       TFT_24S_Write_Command
;;;142    	TFT_24S_Write_Data(0x0035);
0002d0  2035              MOVS     r0,#0x35
0002d2  f7fffffe          BL       TFT_24S_Write_Data
;;;143    	TFT_24S_Write_Data(0x003E);
0002d6  203e              MOVS     r0,#0x3e
0002d8  f7fffffe          BL       TFT_24S_Write_Data
;;;144    	TFT_24S_Write_Command(0x00C7); //VCOM control 2
0002dc  20c7              MOVS     r0,#0xc7
0002de  f7fffffe          BL       TFT_24S_Write_Command
;;;145    	TFT_24S_Write_Data(0x00BE);
0002e2  20be              MOVS     r0,#0xbe
0002e4  f7fffffe          BL       TFT_24S_Write_Data
;;;146    	TFT_24S_Write_Command(0x0036); //memory access control = BGR
0002e8  2036              MOVS     r0,#0x36
0002ea  f7fffffe          BL       TFT_24S_Write_Command
;;;147    #if 1
;;;148    	TFT_24S_Write_Data(0x0008); // Portrait mode
0002ee  2008              MOVS     r0,#8
0002f0  f7fffffe          BL       TFT_24S_Write_Data
;;;149    #else
;;;150    	TFT_24S_Write_Data(0x00A8); // Landscape mode
;;;151    #endif
;;;152    	TFT_24S_Write_Command(0x00B1); //frame rate control
0002f4  20b1              MOVS     r0,#0xb1
0002f6  f7fffffe          BL       TFT_24S_Write_Command
;;;153    	TFT_24S_Write_Data(0x0000);
0002fa  2000              MOVS     r0,#0
0002fc  f7fffffe          BL       TFT_24S_Write_Data
;;;154    	TFT_24S_Write_Data(0x0010);
000300  2010              MOVS     r0,#0x10
000302  f7fffffe          BL       TFT_24S_Write_Data
;;;155    	TFT_24S_Write_Command(0x00B6); //display function control
000306  20b6              MOVS     r0,#0xb6
000308  f7fffffe          BL       TFT_24S_Write_Command
;;;156    	TFT_24S_Write_Data(0x000A);
00030c  200a              MOVS     r0,#0xa
00030e  f7fffffe          BL       TFT_24S_Write_Data
;;;157    	TFT_24S_Write_Data(0x00A2);
000312  20a2              MOVS     r0,#0xa2
000314  f7fffffe          BL       TFT_24S_Write_Data
;;;158    	TFT_24S_Write_Command(0x003A); //pixel format = 16 bit per pixel
000318  203a              MOVS     r0,#0x3a
00031a  f7fffffe          BL       TFT_24S_Write_Command
;;;159    	TFT_24S_Write_Data(0x0055);
00031e  2055              MOVS     r0,#0x55
000320  f7fffffe          BL       TFT_24S_Write_Data
;;;160    	TFT_24S_Write_Command(0x00F2); //3G Gamma control
000324  20f2              MOVS     r0,#0xf2
000326  f7fffffe          BL       TFT_24S_Write_Command
;;;161    	TFT_24S_Write_Data(0x0002); //off
00032a  2002              MOVS     r0,#2
00032c  f7fffffe          BL       TFT_24S_Write_Data
;;;162    	TFT_24S_Write_Command(0x0026); //Gamma curve 3
000330  2026              MOVS     r0,#0x26
000332  f7fffffe          BL       TFT_24S_Write_Command
;;;163    	TFT_24S_Write_Data(0x0001);
000336  2001              MOVS     r0,#1
000338  f7fffffe          BL       TFT_24S_Write_Data
;;;164    	TFT_24S_Write_Command(0x002A); //column address set
00033c  202a              MOVS     r0,#0x2a
00033e  f7fffffe          BL       TFT_24S_Write_Command
;;;165    	TFT_24S_Write_Data(0x0000);
000342  2000              MOVS     r0,#0
000344  f7fffffe          BL       TFT_24S_Write_Data
;;;166    	TFT_24S_Write_Data(0x0000); //start 0x0000
000348  2000              MOVS     r0,#0
00034a  f7fffffe          BL       TFT_24S_Write_Data
;;;167    	TFT_24S_Write_Data(0x0000);
00034e  2000              MOVS     r0,#0
000350  f7fffffe          BL       TFT_24S_Write_Data
;;;168    	TFT_24S_Write_Data(0x00EF); //end 0x00EF
000354  20ef              MOVS     r0,#0xef
000356  f7fffffe          BL       TFT_24S_Write_Data
;;;169    	TFT_24S_Write_Command(0x002B); //page address set
00035a  202b              MOVS     r0,#0x2b
00035c  f7fffffe          BL       TFT_24S_Write_Command
;;;170    	TFT_24S_Write_Data(0x0000);
000360  2000              MOVS     r0,#0
000362  f7fffffe          BL       TFT_24S_Write_Data
;;;171    	TFT_24S_Write_Data(0x0000); //start 0x0000
000366  2000              MOVS     r0,#0
000368  f7fffffe          BL       TFT_24S_Write_Data
;;;172    	TFT_24S_Write_Data(0x0001);
00036c  2001              MOVS     r0,#1
00036e  f7fffffe          BL       TFT_24S_Write_Data
;;;173    	TFT_24S_Write_Data(0x003F); //end 0x013F
000372  203f              MOVS     r0,#0x3f
000374  f7fffffe          BL       TFT_24S_Write_Data
;;;174    	TFT_24S_Write_Command(0x0029); //Display ON
000378  2029              MOVS     r0,#0x29
00037a  f7fffffe          BL       TFT_24S_Write_Command
;;;175    }
00037e  bd70              POP      {r4-r6,pc}
;;;176    
                          ENDP

                  TFT_Plot_Pixel PROC
;;;177    /* Set the pixel at pos to the given color. */
;;;178    void TFT_Plot_Pixel(PT_T * pos, COLOR_T * color) {
000380  b570              PUSH     {r4-r6,lr}
000382  4605              MOV      r5,r0
000384  460c              MOV      r4,r1
;;;179    	uint8_t b1, b2;
;;;180    
;;;181    	// Column address set 0x2a
;;;182    	TFT_24S_Write_Command(0x002A); //column address set
000386  202a              MOVS     r0,#0x2a
000388  f7fffffe          BL       TFT_24S_Write_Command
;;;183    	TFT_24S_Write_Data(0);
00038c  2000              MOVS     r0,#0
00038e  f7fffffe          BL       TFT_24S_Write_Data
;;;184    	TFT_24S_Write_Data(pos->X & 0xff); //start 
000392  7828              LDRB     r0,[r5,#0]
000394  f7fffffe          BL       TFT_24S_Write_Data
;;;185    	TFT_24S_Write_Data(0x0000);
000398  2000              MOVS     r0,#0
00039a  f7fffffe          BL       TFT_24S_Write_Data
;;;186    	TFT_24S_Write_Data(0x00EF); //end 0x00EF
00039e  20ef              MOVS     r0,#0xef
0003a0  f7fffffe          BL       TFT_24S_Write_Data
;;;187    	
;;;188    	// Page (row) address set 0x2b
;;;189    	TFT_24S_Write_Command(0x002B); //page address set
0003a4  202b              MOVS     r0,#0x2b
0003a6  f7fffffe          BL       TFT_24S_Write_Command
;;;190    	TFT_24S_Write_Data(pos->Y >> 8);
0003aa  88a8              LDRH     r0,[r5,#4]
0003ac  0400              LSLS     r0,r0,#16
0003ae  0e00              LSRS     r0,r0,#24
0003b0  f7fffffe          BL       TFT_24S_Write_Data
;;;191    	TFT_24S_Write_Data(pos->Y & 0xff); //start 
0003b4  7928              LDRB     r0,[r5,#4]
0003b6  f7fffffe          BL       TFT_24S_Write_Data
;;;192    	TFT_24S_Write_Data(0x0001);
0003ba  2001              MOVS     r0,#1
0003bc  f7fffffe          BL       TFT_24S_Write_Data
;;;193    	TFT_24S_Write_Data(0x003F); //end 0x013F	
0003c0  203f              MOVS     r0,#0x3f
0003c2  f7fffffe          BL       TFT_24S_Write_Data
;;;194    	
;;;195    	// Memory Write 0x2c
;;;196    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;197    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
0003c6  7820              LDRB     r0,[r4,#0]
0003c8  08c6              LSRS     r6,r0,#3
0003ca  7860              LDRB     r0,[r4,#1]
0003cc  00f6              LSLS     r6,r6,#3
0003ce  0941              LSRS     r1,r0,#5
0003d0  430e              ORRS     r6,r6,r1
;;;198    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
0003d2  211c              MOVS     r1,#0x1c
0003d4  4008              ANDS     r0,r0,r1
0003d6  00c5              LSLS     r5,r0,#3
0003d8  78a0              LDRB     r0,[r4,#2]
0003da  08c0              LSRS     r0,r0,#3
0003dc  4305              ORRS     r5,r5,r0
;;;199    
;;;200    	TFT_24S_Write_Command(0x002c);
0003de  202c              MOVS     r0,#0x2c
0003e0  f7fffffe          BL       TFT_24S_Write_Command
;;;201    	TFT_24S_Write_Data(b1);
0003e4  4630              MOV      r0,r6
0003e6  f7fffffe          BL       TFT_24S_Write_Data
;;;202    	TFT_24S_Write_Data(b2);
0003ea  4628              MOV      r0,r5
0003ec  f7fffffe          BL       TFT_24S_Write_Data
;;;203    }
0003f0  bd70              POP      {r4-r6,pc}
0003f2  0000              DCW      0x0000
                  |L1.1012|
                          DCD      0x40048000
                  |L1.1016|
                          DCD      0x4004b000
                  |L1.1020|
                          DCD      0x400ff080
                  |L1.1024|
                          DCD      0x4004b040
                  |L1.1028|
                          DCD      0xf80ff080
                  |L1.1032|
                          DCD      0x00009c40
                  |L1.1036|
                          DCD      SystemCoreClock
                  |L1.1040|
                          DCD      0x40039000
                  |L1.1044|
                          DCD      0x4003b000
                          ENDP

                  TFT_Fill_Buffer PROC
;;;205    /* Fill the entire display buffer with the given color. */
;;;206    void TFT_Fill_Buffer(COLOR_T * color) {
000418  b5f0              PUSH     {r4-r7,lr}
00041a  4604              MOV      r4,r0
;;;207    	uint32_t x, y;
;;;208    	uint8_t b1, b2;
;;;209    	
;;;210    	// Enable access to full screen, reset write pointer to origin
;;;211    	TFT_24S_Write_Command(0x002A); //column address set
00041c  202a              MOVS     r0,#0x2a
00041e  f7fffffe          BL       TFT_24S_Write_Command
;;;212    	TFT_24S_Write_Data(0x0000);
000422  2000              MOVS     r0,#0
000424  f7fffffe          BL       TFT_24S_Write_Data
;;;213    	TFT_24S_Write_Data(0x0000); //start 0x0000
000428  2000              MOVS     r0,#0
00042a  f7fffffe          BL       TFT_24S_Write_Data
;;;214    	TFT_24S_Write_Data(0x0000);
00042e  2000              MOVS     r0,#0
000430  f7fffffe          BL       TFT_24S_Write_Data
;;;215    	TFT_24S_Write_Data(0x00EF); //end 0x00EF
000434  20ef              MOVS     r0,#0xef
000436  f7fffffe          BL       TFT_24S_Write_Data
;;;216    	TFT_24S_Write_Command(0x002B); //page address set
00043a  202b              MOVS     r0,#0x2b
00043c  f7fffffe          BL       TFT_24S_Write_Command
;;;217    	TFT_24S_Write_Data(0x0000);
000440  2000              MOVS     r0,#0
000442  f7fffffe          BL       TFT_24S_Write_Data
;;;218    	TFT_24S_Write_Data(0x0000); //start 0x0000
000446  2000              MOVS     r0,#0
000448  f7fffffe          BL       TFT_24S_Write_Data
;;;219    	TFT_24S_Write_Data(0x0001);
00044c  2001              MOVS     r0,#1
00044e  f7fffffe          BL       TFT_24S_Write_Data
;;;220    	TFT_24S_Write_Data(0x003F); //end 0x013F
000452  203f              MOVS     r0,#0x3f
000454  f7fffffe          BL       TFT_24S_Write_Data
;;;221    	
;;;222    	// Memory Write 0x2c
;;;223    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;224    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
000458  7820              LDRB     r0,[r4,#0]
00045a  08c1              LSRS     r1,r0,#3
00045c  7860              LDRB     r0,[r4,#1]
00045e  00c9              LSLS     r1,r1,#3
000460  0942              LSRS     r2,r0,#5
000462  4311              ORRS     r1,r1,r2
000464  468c              MOV      r12,r1
;;;225    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
000466  211c              MOVS     r1,#0x1c
000468  4008              ANDS     r0,r0,r1
00046a  00c6              LSLS     r6,r0,#3
00046c  78a0              LDRB     r0,[r4,#2]
00046e  08c0              LSRS     r0,r0,#3
000470  4306              ORRS     r6,r6,r0
;;;226    	
;;;227    	TFT_24S_Write_Command(0x002c);
000472  202c              MOVS     r0,#0x2c
000474  f7fffffe          BL       TFT_24S_Write_Command
;;;228    	for (y=0; y<320; y++) {
000478  2500              MOVS     r5,#0
00047a  27ff              MOVS     r7,#0xff
00047c  3741              ADDS     r7,r7,#0x41
                  |L1.1150|
;;;229    		for (x=0; x<240; x++) {
00047e  2400              MOVS     r4,#0
                  |L1.1152|
;;;230    			TFT_24S_Write_Data(b1);
000480  4660              MOV      r0,r12
000482  f7fffffe          BL       TFT_24S_Write_Data
;;;231    			TFT_24S_Write_Data(b2);
000486  4630              MOV      r0,r6
000488  f7fffffe          BL       TFT_24S_Write_Data
00048c  1c64              ADDS     r4,r4,#1
00048e  2cf0              CMP      r4,#0xf0              ;229
000490  d3f6              BCC      |L1.1152|
000492  1c6d              ADDS     r5,r5,#1              ;229
000494  42bd              CMP      r5,r7                 ;228
000496  d3f2              BCC      |L1.1150|
;;;232    		}
;;;233    	}		
;;;234    }
000498  bdf0              POP      {r4-r7,pc}
;;;235    /* Draw a rectangle from p1 to p2 filled with specified color. */
                          ENDP

                  TFT_Fill_Rectangle PROC
;;;236    void TFT_Fill_Rectangle(PT_T * p1, PT_T * p2, COLOR_T * color) {
00049a  b5f8              PUSH     {r3-r7,lr}
00049c  4694              MOV      r12,r2
;;;237    	uint32_t n;
;;;238    	uint8_t b1, b2;
;;;239    	uint16_t c_min, c_max, r_min, r_max;
;;;240    	
;;;241    	c_min = MIN(p1->X, p2->X);
00049e  6804              LDR      r4,[r0,#0]
0004a0  680a              LDR      r2,[r1,#0]
0004a2  4294              CMP      r4,r2
0004a4  d201              BCS      |L1.1194|
0004a6  4623              MOV      r3,r4                 ;236
0004a8  e000              B        |L1.1196|
                  |L1.1194|
0004aa  4613              MOV      r3,r2
                  |L1.1196|
0004ac  b29f              UXTH     r7,r3
;;;242    	c_max = MAX(p1->X, p2->X);
0004ae  4294              CMP      r4,r2
0004b0  d900              BLS      |L1.1204|
0004b2  4622              MOV      r2,r4
                  |L1.1204|
0004b4  b295              UXTH     r5,r2
;;;243    	c_max = MIN(c_max, TFT_WIDTH-1);
0004b6  2def              CMP      r5,#0xef
0004b8  d300              BCC      |L1.1212|
0004ba  25ef              MOVS     r5,#0xef
                  |L1.1212|
;;;244    	
;;;245    	r_min = MIN(p1->Y, p2->Y);
0004bc  6840              LDR      r0,[r0,#4]
0004be  6849              LDR      r1,[r1,#4]
0004c0  4288              CMP      r0,r1
0004c2  d201              BCS      |L1.1224|
0004c4  4602              MOV      r2,r0
0004c6  e000              B        |L1.1226|
                  |L1.1224|
0004c8  460a              MOV      r2,r1
                  |L1.1226|
0004ca  b296              UXTH     r6,r2
;;;246    	r_max = MAX(p1->Y, p2->Y);
0004cc  4288              CMP      r0,r1
0004ce  d800              BHI      |L1.1234|
0004d0  4608              MOV      r0,r1
                  |L1.1234|
0004d2  b284              UXTH     r4,r0
;;;247    	r_max = MIN(r_max, TFT_HEIGHT-1);
0004d4  20ff              MOVS     r0,#0xff
0004d6  3040              ADDS     r0,r0,#0x40
0004d8  4284              CMP      r4,r0
0004da  d300              BCC      |L1.1246|
0004dc  4604              MOV      r4,r0
                  |L1.1246|
;;;248    
;;;249    	n = (c_max - c_min + 1)*(r_max - r_min + 1);
0004de  1be8              SUBS     r0,r5,r7
0004e0  1ba1              SUBS     r1,r4,r6
0004e2  1c40              ADDS     r0,r0,#1
0004e4  1c49              ADDS     r1,r1,#1
0004e6  4348              MULS     r0,r1,r0
;;;250    	if (n == 0)
0004e8  9000              STR      r0,[sp,#0]
0004ea  d039              BEQ      |L1.1376|
;;;251    		return;
;;;252    	
;;;253    	// Enable access to full screen, reset write pointer to origin
;;;254    	TFT_24S_Write_Command(0x002A); //column address set
0004ec  202a              MOVS     r0,#0x2a
0004ee  f7fffffe          BL       TFT_24S_Write_Command
;;;255    	TFT_24S_Write_Data(c_min >> 8);
0004f2  0a38              LSRS     r0,r7,#8
0004f4  f7fffffe          BL       TFT_24S_Write_Data
;;;256    	TFT_24S_Write_Data(c_min & 0xff); //start 
0004f8  b2f8              UXTB     r0,r7
0004fa  f7fffffe          BL       TFT_24S_Write_Data
;;;257    	TFT_24S_Write_Data(c_max >> 8);
0004fe  0a28              LSRS     r0,r5,#8
000500  f7fffffe          BL       TFT_24S_Write_Data
;;;258    	TFT_24S_Write_Data(c_max & 0xff); //end 
000504  b2e8              UXTB     r0,r5
000506  f7fffffe          BL       TFT_24S_Write_Data
;;;259    	TFT_24S_Write_Command(0x002B); //page address set
00050a  202b              MOVS     r0,#0x2b
00050c  f7fffffe          BL       TFT_24S_Write_Command
;;;260    	TFT_24S_Write_Data(r_min >> 8);
000510  0a30              LSRS     r0,r6,#8
000512  f7fffffe          BL       TFT_24S_Write_Data
;;;261    	TFT_24S_Write_Data(r_min & 0xff); //start 
000516  b2f0              UXTB     r0,r6
000518  f7fffffe          BL       TFT_24S_Write_Data
;;;262    	TFT_24S_Write_Data(r_max >> 8);
00051c  0a20              LSRS     r0,r4,#8
00051e  f7fffffe          BL       TFT_24S_Write_Data
;;;263    	TFT_24S_Write_Data(r_max & 0xff); //end 
000522  b2e0              UXTB     r0,r4
000524  f7fffffe          BL       TFT_24S_Write_Data
;;;264    	
;;;265    	// Memory Write 0x2c
;;;266    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;267    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
000528  4660              MOV      r0,r12
00052a  7800              LDRB     r0,[r0,#0]
00052c  08c5              LSRS     r5,r0,#3
00052e  4660              MOV      r0,r12
000530  7840              LDRB     r0,[r0,#1]
000532  00ed              LSLS     r5,r5,#3
000534  0941              LSRS     r1,r0,#5
000536  430d              ORRS     r5,r5,r1
;;;268    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
000538  211c              MOVS     r1,#0x1c
00053a  4008              ANDS     r0,r0,r1
00053c  00c6              LSLS     r6,r0,#3
00053e  4660              MOV      r0,r12
000540  7880              LDRB     r0,[r0,#2]
000542  08c0              LSRS     r0,r0,#3
000544  4306              ORRS     r6,r6,r0
;;;269    	
;;;270    	TFT_24S_Write_Command(0x002c);
000546  202c              MOVS     r0,#0x2c
000548  f7fffffe          BL       TFT_24S_Write_Command
;;;271    	
;;;272    	while (n-- > 0) {
00054c  9c00              LDR      r4,[sp,#0]
00054e  1e64              SUBS     r4,r4,#1
                  |L1.1360|
;;;273    		TFT_24S_Write_Data(b1);
000550  4628              MOV      r0,r5
000552  f7fffffe          BL       TFT_24S_Write_Data
;;;274    		TFT_24S_Write_Data(b2);
000556  4630              MOV      r0,r6
000558  f7fffffe          BL       TFT_24S_Write_Data
00055c  1e64              SUBS     r4,r4,#1
00055e  d2f7              BCS      |L1.1360|
                  |L1.1376|
;;;275    	}	
;;;276    }
000560  bdf8              POP      {r3-r7,pc}
;;;277    
                          ENDP

                  TFT_Start_Rectangle PROC
;;;281    */
;;;282    uint32_t TFT_Start_Rectangle(PT_T * p1, PT_T * p2) {
000562  b5f0              PUSH     {r4-r7,lr}
;;;283    	uint32_t n;
;;;284    	uint16_t c_min, c_max, r_min, r_max;
;;;285    	
;;;286    	// Find bounds of rectangle
;;;287    	c_min = MIN(p1->X, p2->X);
000564  6803              LDR      r3,[r0,#0]
000566  680a              LDR      r2,[r1,#0]
000568  4293              CMP      r3,r2
00056a  d201              BCS      |L1.1392|
00056c  461c              MOV      r4,r3
00056e  e000              B        |L1.1394|
                  |L1.1392|
000570  4614              MOV      r4,r2
                  |L1.1394|
000572  b2a7              UXTH     r7,r4
;;;288    	c_max = MAX(p1->X, p2->X);
000574  4293              CMP      r3,r2
000576  d900              BLS      |L1.1402|
000578  461a              MOV      r2,r3
                  |L1.1402|
;;;289    	
;;;290    	r_min = MIN(p1->Y, p2->Y);
00057a  6840              LDR      r0,[r0,#4]
00057c  6849              LDR      r1,[r1,#4]
00057e  b295              UXTH     r5,r2                 ;288
000580  4288              CMP      r0,r1
000582  d201              BCS      |L1.1416|
000584  4602              MOV      r2,r0
000586  e000              B        |L1.1418|
                  |L1.1416|
000588  460a              MOV      r2,r1
                  |L1.1418|
00058a  b296              UXTH     r6,r2
;;;291    	r_max = MAX(p1->Y, p2->Y);
00058c  4288              CMP      r0,r1
00058e  d800              BHI      |L1.1426|
000590  4608              MOV      r0,r1
                  |L1.1426|
000592  b284              UXTH     r4,r0
;;;292    
;;;293    	// Clip to display size
;;;294    	c_max = MIN(c_max, TFT_WIDTH-1);
000594  2def              CMP      r5,#0xef
000596  d300              BCC      |L1.1434|
000598  25ef              MOVS     r5,#0xef
                  |L1.1434|
;;;295    	r_max = MIN(r_max, TFT_HEIGHT-1);
00059a  20ff              MOVS     r0,#0xff
00059c  3040              ADDS     r0,r0,#0x40
00059e  4284              CMP      r4,r0
0005a0  d300              BCC      |L1.1444|
0005a2  4604              MOV      r4,r0
                  |L1.1444|
;;;296    	
;;;297    	n = (c_max - c_min + 1)*(r_max - r_min + 1);
0005a4  1be8              SUBS     r0,r5,r7
0005a6  1ba1              SUBS     r1,r4,r6
0005a8  1c40              ADDS     r0,r0,#1
0005aa  1c49              ADDS     r1,r1,#1
0005ac  4348              MULS     r0,r1,r0
0005ae  4684              MOV      r12,r0
;;;298    	if (n > 0) {
0005b0  d020              BEQ      |L1.1524|
;;;299    		// Enable access to full screen, reset write pointer to origin
;;;300    		TFT_24S_Write_Command(0x002A); //column address set
0005b2  202a              MOVS     r0,#0x2a
0005b4  f7fffffe          BL       TFT_24S_Write_Command
;;;301    		TFT_24S_Write_Data(c_min >> 8);
0005b8  0a38              LSRS     r0,r7,#8
0005ba  f7fffffe          BL       TFT_24S_Write_Data
;;;302    		TFT_24S_Write_Data(c_min & 0xff); //start 
0005be  b2f8              UXTB     r0,r7
0005c0  f7fffffe          BL       TFT_24S_Write_Data
;;;303    		TFT_24S_Write_Data(c_max >> 8);
0005c4  0a28              LSRS     r0,r5,#8
0005c6  f7fffffe          BL       TFT_24S_Write_Data
;;;304    		TFT_24S_Write_Data(c_max & 0xff); //end 
0005ca  b2e8              UXTB     r0,r5
0005cc  f7fffffe          BL       TFT_24S_Write_Data
;;;305    		TFT_24S_Write_Command(0x002B); //page address set
0005d0  202b              MOVS     r0,#0x2b
0005d2  f7fffffe          BL       TFT_24S_Write_Command
;;;306    		TFT_24S_Write_Data(r_min >> 8);
0005d6  0a30              LSRS     r0,r6,#8
0005d8  f7fffffe          BL       TFT_24S_Write_Data
;;;307    		TFT_24S_Write_Data(r_min & 0xff); //start 
0005dc  b2f0              UXTB     r0,r6
0005de  f7fffffe          BL       TFT_24S_Write_Data
;;;308    		TFT_24S_Write_Data(r_max >> 8);
0005e2  0a20              LSRS     r0,r4,#8
0005e4  f7fffffe          BL       TFT_24S_Write_Data
;;;309    		TFT_24S_Write_Data(r_max & 0xff); //end 
0005e8  b2e0              UXTB     r0,r4
0005ea  f7fffffe          BL       TFT_24S_Write_Data
;;;310    		
;;;311    		// Memory Write 0x2c
;;;312    		TFT_24S_Write_Command(0x002c);
0005ee  202c              MOVS     r0,#0x2c
0005f0  f7fffffe          BL       TFT_24S_Write_Command
                  |L1.1524|
;;;313    	}	
;;;314    	return n;
0005f4  4660              MOV      r0,r12
;;;315    }
0005f6  bdf0              POP      {r4-r7,pc}
;;;316    
                          ENDP

                  TFT_Write_Rectangle_Pixel PROC
;;;318    have called TFT_Write_Rectangle before calling this function. */
;;;319    void TFT_Write_Rectangle_Pixel(COLOR_T * color, unsigned int count) {
0005f8  b570              PUSH     {r4-r6,lr}
;;;320    	uint8_t b1, b2;
;;;321    
;;;322    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;323    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
0005fa  7802              LDRB     r2,[r0,#0]
;;;324    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
;;;325    	while (count--) {
0005fc  1e4c              SUBS     r4,r1,#1
0005fe  08d6              LSRS     r6,r2,#3              ;323
000600  7842              LDRB     r2,[r0,#1]            ;323
000602  00f6              LSLS     r6,r6,#3              ;323
000604  0953              LSRS     r3,r2,#5              ;323
000606  431e              ORRS     r6,r6,r3              ;323
000608  231c              MOVS     r3,#0x1c              ;324
00060a  7880              LDRB     r0,[r0,#2]            ;324
00060c  401a              ANDS     r2,r2,r3              ;324
00060e  00d5              LSLS     r5,r2,#3              ;324
000610  08c0              LSRS     r0,r0,#3              ;324
000612  4305              ORRS     r5,r5,r0              ;324
000614  1c60              ADDS     r0,r4,#1
000616  d007              BEQ      |L1.1576|
                  |L1.1560|
;;;326    		TFT_24S_Write_Data(b1);
000618  4630              MOV      r0,r6
00061a  f7fffffe          BL       TFT_24S_Write_Data
;;;327    		TFT_24S_Write_Data(b2);
00061e  4628              MOV      r0,r5
000620  f7fffffe          BL       TFT_24S_Write_Data
000624  1e64              SUBS     r4,r4,#1
000626  d2f7              BCS      |L1.1560|
                  |L1.1576|
;;;328    	}
;;;329    }
000628  bd70              POP      {r4-r6,pc}
;;;330    
                          ENDP

                  TFT_Set_BL PROC
;;;331    /* Enable (on > 0) or disable LED backlight via LCD controller. */
;;;332    void TFT_Set_BL(uint8_t on) {
00062a  b510              PUSH     {r4,lr}
00062c  4604              MOV      r4,r0
;;;333    	TFT_24S_Write_Command(0x53);
00062e  2053              MOVS     r0,#0x53
000630  f7fffffe          BL       TFT_24S_Write_Command
;;;334    	TFT_24S_Write_Data(0x28 | (on? 4 : 0));
000634  2c00              CMP      r4,#0
000636  d001              BEQ      |L1.1596|
000638  2004              MOVS     r0,#4
00063a  e000              B        |L1.1598|
                  |L1.1596|
00063c  2000              MOVS     r0,#0
                  |L1.1598|
00063e  3028              ADDS     r0,r0,#0x28
000640  f7fffffe          BL       TFT_24S_Write_Data
;;;335    }
000644  bd10              POP      {r4,pc}
;;;336    
                          ENDP

                  TFT_Set_Brightness PROC
;;;337    /* Set brightness via LCD controller. */
;;;338    void TFT_Set_Brightness(uint8_t brightness) {
000646  b510              PUSH     {r4,lr}
000648  4604              MOV      r4,r0
;;;339    	TFT_24S_Write_Command(0x51);
00064a  2051              MOVS     r0,#0x51
00064c  f7fffffe          BL       TFT_24S_Write_Command
;;;340    	TFT_24S_Write_Data(brightness);
000650  4620              MOV      r0,r4
000652  f7fffffe          BL       TFT_24S_Write_Data
;;;341    }
000656  bd10              POP      {r4,pc}
;;;342    
                          ENDP

                  TFT_TS_Read PROC
;;;361    position unchanged. */
;;;362    uint32_t TFT_TS_Read(PT_T * position) {
000658  b5f8              PUSH     {r3-r7,lr}
;;;363    	uint32_t x, y;
;;;364    	uint32_t b;
;;;365    
;;;366    	// Determine if screen was pressed.
;;;367    	// Set YU digital output at ground, 
;;;368    	PORTE->PCR[TFT_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
00065a  4cb3              LDR      r4,|L1.2344|
00065c  4606              MOV      r6,r0                 ;362
00065e  69a1              LDR      r1,[r4,#0x18]
000660  2007              MOVS     r0,#7
000662  0200              LSLS     r0,r0,#8
000664  4381              BICS     r1,r1,r0
000666  61a1              STR      r1,[r4,#0x18]
;;;369    	PORTE->PCR[TFT_TS_YU_BIT] |= PORT_PCR_MUX(1);
000668  69a2              LDR      r2,[r4,#0x18]
00066a  15a1              ASRS     r1,r4,#22
00066c  430a              ORRS     r2,r2,r1
00066e  61a2              STR      r2,[r4,#0x18]
;;;370    	PTE->PDDR |= MASK(TFT_TS_YU_BIT);
000670  4dae              LDR      r5,|L1.2348|
000672  696b              LDR      r3,[r5,#0x14]
000674  038a              LSLS     r2,r1,#14
000676  4313              ORRS     r3,r3,r2
000678  616b              STR      r3,[r5,#0x14]
;;;371    	PTE->PCOR = MASK(TFT_TS_YU_BIT); // Clear YU to 0
00067a  60aa              STR      r2,[r5,#8]
;;;372    
;;;373    	// Set YD + XL to open
;;;374    	// Set YD as ADC input
;;;375    	PORTE->PCR[TFT_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
00067c  6922              LDR      r2,[r4,#0x10]
00067e  4382              BICS     r2,r2,r0
000680  6122              STR      r2,[r4,#0x10]
;;;376    	PORTE->PCR[TFT_TS_YD_BIT] |= PORT_PCR_MUX(0);
000682  6922              LDR      r2,[r4,#0x10]
000684  6122              STR      r2,[r4,#0x10]
;;;377    
;;;378    	// Set XL as digital input
;;;379    	PORTE->PCR[TFT_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
000686  6962              LDR      r2,[r4,#0x14]
000688  4382              BICS     r2,r2,r0
00068a  6162              STR      r2,[r4,#0x14]
;;;380    	PORTE->PCR[TFT_TS_XL_BIT] |= PORT_PCR_MUX(1);
00068c  6962              LDR      r2,[r4,#0x14]
00068e  430a              ORRS     r2,r2,r1
000690  6162              STR      r2,[r4,#0x14]
;;;381    	PTE->PDDR &= ~MASK(TFT_TS_XL_BIT); // Input
000692  696a              LDR      r2,[r5,#0x14]
000694  034b              LSLS     r3,r1,#13
000696  439a              BICS     r2,r2,r3
000698  616a              STR      r2,[r5,#0x14]
;;;382    	
;;;383    	// Set XR as digital input with pull-up
;;;384    	PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
00069a  69e2              LDR      r2,[r4,#0x1c]
00069c  4382              BICS     r2,r2,r0
00069e  61e2              STR      r2,[r4,#0x1c]
;;;385    	PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_MUX(1);
0006a0  69e0              LDR      r0,[r4,#0x1c]
0006a2  4308              ORRS     r0,r0,r1
0006a4  61e0              STR      r0,[r4,#0x1c]
;;;386    	PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_PE_MASK; // Enable pull-up
0006a6  69e0              LDR      r0,[r4,#0x1c]
0006a8  2102              MOVS     r1,#2
0006aa  4308              ORRS     r0,r0,r1
0006ac  61e0              STR      r0,[r4,#0x1c]
;;;387    	PTE->PDDR &= ~MASK(TFT_TS_XR_BIT); // Input
0006ae  6968              LDR      r0,[r5,#0x14]
0006b0  058f              LSLS     r7,r1,#22
0006b2  43b8              BICS     r0,r0,r7
0006b4  6168              STR      r0,[r5,#0x14]
;;;388    		
;;;389    	// Wait for the inputs to settle
;;;390    	Delay(TS_DELAY);
0006b6  2001              MOVS     r0,#1
0006b8  f7fffffe          BL       Delay
;;;391    	// Read XR input via digital
;;;392    	// if XR is 0, then screen is pressed
;;;393    	b = (PTE->PDIR) & MASK(TFT_TS_XR_BIT);
0006bc  6928              LDR      r0,[r5,#0x10]
0006be  4238              TST      r0,r7
;;;394    	
;;;395    	if (b>0) {
0006c0  d001              BEQ      |L1.1734|
;;;396    		// Screen not pressed
;;;397    		return 0;
0006c2  2000              MOVS     r0,#0
;;;398    	} else {
;;;399    		// Read X Position
;;;400    		// Configure inputs to ADC
;;;401    		PORTE->PCR[TFT_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;402    		PORTE->PCR[TFT_TS_YU_BIT] |= PORT_PCR_MUX(0);
;;;403    		PORTE->PCR[TFT_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;404    		PORTE->PCR[TFT_TS_YD_BIT] |= PORT_PCR_MUX(0);
;;;405    
;;;406    		
;;;407    		// Configure outputs to GPIO
;;;408    		PORTE->PCR[TFT_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;409    		PORTE->PCR[TFT_TS_XL_BIT] |= PORT_PCR_MUX(1);
;;;410    		PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;411    		PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_MUX(1);
;;;412    		PTE->PDDR |= MASK(TFT_TS_XL_BIT) | MASK(TFT_TS_XR_BIT);
;;;413    		PTE->PSOR = MASK(TFT_TS_XR_BIT); // Set XR to 1
;;;414    		PTE->PCOR = MASK(TFT_TS_XL_BIT); // Clear XL to 0
;;;415    		// Wait for inputs to settle
;;;416    		Delay(TS_DELAY);
;;;417    		
;;;418    		// Read inputs
;;;419    		ADC0->SC1[0] = TFT_TS_YU_CHANNEL; // start conversion on channel YU
;;;420    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;421    			;
;;;422    		yu = ADC0->R[0];
;;;423    		x = yu;
;;;424    
;;;425    		// Read Y Position
;;;426    		// Configure inputs to ADC
;;;427    		PORTE->PCR[TFT_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;428    		PORTE->PCR[TFT_TS_XL_BIT] |= PORT_PCR_MUX(0);
;;;429    		PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;430    		PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_MUX(0);
;;;431    		// Disable pull-up - just to be sure
;;;432    		PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_PE_MASK; 
;;;433    		
;;;434    		// Configure outputs to GPIO
;;;435    		PORTE->PCR[TFT_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;436    		PORTE->PCR[TFT_TS_YU_BIT] |= PORT_PCR_MUX(1);
;;;437    		PORTE->PCR[TFT_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;438    		PORTE->PCR[TFT_TS_YD_BIT] |= PORT_PCR_MUX(1);
;;;439    		PTE->PDDR |= MASK(TFT_TS_YU_BIT) | MASK(TFT_TS_YD_BIT);
;;;440    		PTE->PSOR = MASK(TFT_TS_YD_BIT); // Set YD to 1
;;;441    		PTE->PCOR = MASK(TFT_TS_YU_BIT); // Clear YU to 0
;;;442    		// Wait for the inputs to settle
;;;443    		Delay(TS_DELAY);
;;;444    
;;;445    		// Read inputs
;;;446    		ADC0->SC1[0] = TFT_TS_XL_CHANNEL; // start conversion on channel XL
;;;447    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;448    			;
;;;449    		xl = ADC0->R[0];
;;;450    		y = xl;
;;;451    
;;;452    		// Apply calibration factors to raw position information
;;;453    		if (TFT_TS_Calibrated) {
;;;454    			if (x<TFT_TS_X_Offset) {
;;;455    				position->X = 0;
;;;456    			} else {
;;;457    				position->X = (x - TFT_TS_X_Offset)/TFT_TS_X_Scale;
;;;458    			}
;;;459    			if (y<TFT_TS_Y_Offset) {
;;;460    				position->Y = 0;
;;;461    			} else {
;;;462    				position->Y = (y - TFT_TS_Y_Offset)/TFT_TS_Y_Scale;
;;;463    			}
;;;464    		} else {
;;;465    			position->X = x;
;;;466    			position->Y = y;
;;;467    		}
;;;468    		return 1;
;;;469    	}
;;;470    }
0006c4  bdf8              POP      {r3-r7,pc}
                  |L1.1734|
0006c6  69a1              LDR      r1,[r4,#0x18]         ;401
0006c8  2007              MOVS     r0,#7                 ;401
0006ca  0200              LSLS     r0,r0,#8              ;401
0006cc  4381              BICS     r1,r1,r0              ;401
0006ce  61a1              STR      r1,[r4,#0x18]         ;401
0006d0  69a1              LDR      r1,[r4,#0x18]         ;402
0006d2  61a1              STR      r1,[r4,#0x18]         ;402
0006d4  6921              LDR      r1,[r4,#0x10]         ;403
0006d6  4381              BICS     r1,r1,r0              ;403
0006d8  6121              STR      r1,[r4,#0x10]         ;403
0006da  6921              LDR      r1,[r4,#0x10]         ;404
0006dc  6121              STR      r1,[r4,#0x10]         ;404
0006de  6961              LDR      r1,[r4,#0x14]         ;408
0006e0  4381              BICS     r1,r1,r0              ;408
0006e2  6161              STR      r1,[r4,#0x14]         ;408
0006e4  6962              LDR      r2,[r4,#0x14]         ;409
0006e6  21ff              MOVS     r1,#0xff              ;409
0006e8  3101              ADDS     r1,#1                 ;409
0006ea  430a              ORRS     r2,r2,r1              ;409
0006ec  6162              STR      r2,[r4,#0x14]         ;409
0006ee  69e2              LDR      r2,[r4,#0x1c]         ;410
0006f0  4382              BICS     r2,r2,r0              ;410
0006f2  61e2              STR      r2,[r4,#0x1c]         ;410
0006f4  69e0              LDR      r0,[r4,#0x1c]         ;411
0006f6  4308              ORRS     r0,r0,r1              ;411
0006f8  61e0              STR      r0,[r4,#0x1c]         ;411
0006fa  6968              LDR      r0,[r5,#0x14]         ;412
0006fc  2105              MOVS     r1,#5                 ;412
0006fe  0549              LSLS     r1,r1,#21             ;412
000700  4308              ORRS     r0,r0,r1              ;412
000702  6168              STR      r0,[r5,#0x14]         ;412
000704  606f              STR      r7,[r5,#4]            ;413
000706  2001              MOVS     r0,#1                 ;414
000708  0540              LSLS     r0,r0,#21             ;414
00070a  60a8              STR      r0,[r5,#8]            ;414
00070c  2001              MOVS     r0,#1                 ;416
00070e  f7fffffe          BL       Delay
000712  4887              LDR      r0,|L1.2352|
000714  2103              MOVS     r1,#3                 ;419
000716  6001              STR      r1,[r0,#0]            ;419
                  |L1.1816|
000718  6801              LDR      r1,[r0,#0]            ;420
00071a  0609              LSLS     r1,r1,#24             ;420
00071c  d5fc              BPL      |L1.1816|
00071e  4884              LDR      r0,|L1.2352|
000720  6900              LDR      r0,[r0,#0x10]         ;422
000722  b287              UXTH     r7,r0                 ;422
000724  4883              LDR      r0,|L1.2356|
000726  8087              STRH     r7,[r0,#4]            ;422
000728  6961              LDR      r1,[r4,#0x14]         ;427
00072a  2007              MOVS     r0,#7                 ;427
00072c  0200              LSLS     r0,r0,#8              ;427
00072e  4381              BICS     r1,r1,r0              ;427
000730  6161              STR      r1,[r4,#0x14]         ;427
000732  6961              LDR      r1,[r4,#0x14]         ;428
000734  6161              STR      r1,[r4,#0x14]         ;428
000736  69e1              LDR      r1,[r4,#0x1c]         ;429
000738  4381              BICS     r1,r1,r0              ;429
00073a  61e1              STR      r1,[r4,#0x1c]         ;429
00073c  69e1              LDR      r1,[r4,#0x1c]         ;430
00073e  61e1              STR      r1,[r4,#0x1c]         ;430
000740  69e2              LDR      r2,[r4,#0x1c]         ;432
000742  2102              MOVS     r1,#2                 ;432
000744  438a              BICS     r2,r2,r1              ;432
000746  61e2              STR      r2,[r4,#0x1c]         ;432
000748  69a1              LDR      r1,[r4,#0x18]         ;435
00074a  4381              BICS     r1,r1,r0              ;435
00074c  61a1              STR      r1,[r4,#0x18]         ;435
00074e  69a2              LDR      r2,[r4,#0x18]         ;436
000750  21ff              MOVS     r1,#0xff              ;436
000752  3101              ADDS     r1,#1                 ;436
000754  430a              ORRS     r2,r2,r1              ;436
000756  61a2              STR      r2,[r4,#0x18]         ;436
000758  6922              LDR      r2,[r4,#0x10]         ;437
00075a  4382              BICS     r2,r2,r0              ;437
00075c  6122              STR      r2,[r4,#0x10]         ;437
00075e  6920              LDR      r0,[r4,#0x10]         ;438
000760  4308              ORRS     r0,r0,r1              ;438
000762  6120              STR      r0,[r4,#0x10]         ;438
000764  6968              LDR      r0,[r5,#0x14]         ;439
000766  2105              MOVS     r1,#5                 ;439
000768  0509              LSLS     r1,r1,#20             ;439
00076a  4308              ORRS     r0,r0,r1              ;439
00076c  6168              STR      r0,[r5,#0x14]         ;439
00076e  2001              MOVS     r0,#1                 ;440
000770  0500              LSLS     r0,r0,#20             ;440
000772  6068              STR      r0,[r5,#4]            ;440
000774  0080              LSLS     r0,r0,#2              ;441
000776  60a8              STR      r0,[r5,#8]            ;441
000778  2001              MOVS     r0,#1                 ;443
00077a  f7fffffe          BL       Delay
00077e  486c              LDR      r0,|L1.2352|
000780  2104              MOVS     r1,#4                 ;446
000782  6001              STR      r1,[r0,#0]            ;446
                  |L1.1924|
000784  6801              LDR      r1,[r0,#0]            ;447
000786  0609              LSLS     r1,r1,#24             ;447
000788  d5fc              BPL      |L1.1924|
00078a  6900              LDR      r0,[r0,#0x10]         ;449
00078c  4d69              LDR      r5,|L1.2356|
00078e  b284              UXTH     r4,r0                 ;449
000790  806c              STRH     r4,[r5,#2]            ;449
000792  7828              LDRB     r0,[r5,#0]            ;453  ; TFT_TS_Calibrated
000794  2800              CMP      r0,#0                 ;453
000796  d014              BEQ      |L1.1986|
000798  68e8              LDR      r0,[r5,#0xc]          ;454  ; TFT_TS_X_Offset
00079a  4287              CMP      r7,r0                 ;454
00079c  d201              BCS      |L1.1954|
00079e  2000              MOVS     r0,#0                 ;455
0007a0  e003              B        |L1.1962|
                  |L1.1954|
0007a2  1a38              SUBS     r0,r7,r0              ;457
0007a4  68a9              LDR      r1,[r5,#8]            ;457  ; TFT_TS_X_Scale
0007a6  f7fffffe          BL       __aeabi_uidivmod
                  |L1.1962|
0007aa  6030              STR      r0,[r6,#0]            ;459
0007ac  6968              LDR      r0,[r5,#0x14]         ;459  ; TFT_TS_Y_Offset
0007ae  4284              CMP      r4,r0                 ;459
0007b0  d201              BCS      |L1.1974|
0007b2  2000              MOVS     r0,#0                 ;460
0007b4  e003              B        |L1.1982|
                  |L1.1974|
0007b6  1a20              SUBS     r0,r4,r0              ;462
0007b8  6929              LDR      r1,[r5,#0x10]         ;462  ; TFT_TS_Y_Scale
0007ba  f7fffffe          BL       __aeabi_uidivmod
                  |L1.1982|
0007be  6070              STR      r0,[r6,#4]            ;460
0007c0  e001              B        |L1.1990|
                  |L1.1986|
0007c2  6037              STR      r7,[r6,#0]            ;466
0007c4  6074              STR      r4,[r6,#4]            ;466
                  |L1.1990|
0007c6  2001              MOVS     r0,#1                 ;468
0007c8  bdf8              POP      {r3-r7,pc}
;;;471    
                          ENDP

                  TFT_TS_Test PROC
;;;472    /* Test touchscreen by printing touch coordinates and drawing lines where touched. */
;;;473    void TFT_TS_Test(void) {
0007ca  b090              SUB      sp,sp,#0x40
;;;474    	PT_T p, bp, pp;
;;;475    	COLOR_T c;
;;;476    	char buffer[32];
;;;477    	
;;;478    	TFT_Erase();
0007cc  f7fffffe          BL       TFT_Erase
;;;479    
;;;480    	pp.X = 0;
0007d0  2400              MOVS     r4,#0
;;;481    	pp.Y = 0;
0007d2  9402              STR      r4,[sp,#8]
;;;482    	
;;;483    	bp.X = COL_TO_X(0);
0007d4  9403              STR      r4,[sp,#0xc]
;;;484    	bp.Y = ROW_TO_Y(0);
0007d6  9406              STR      r4,[sp,#0x18]
;;;485    	c.R = 255;
0007d8  20ff              MOVS     r0,#0xff
0007da  4669              MOV      r1,sp
0007dc  9407              STR      r4,[sp,#0x1c]
0007de  7008              STRB     r0,[r1,#0]
;;;486    	c.G = 100;
0007e0  2064              MOVS     r0,#0x64
0007e2  7048              STRB     r0,[r1,#1]
;;;487    	c.B = 100;
0007e4  7088              STRB     r0,[r1,#2]
                  |L1.2022|
;;;488    	
;;;489    	while (1) {
;;;490    		if (TFT_TS_Read(&p)) {
0007e6  a804              ADD      r0,sp,#0x10
0007e8  f7fffffe          BL       TFT_TS_Read
0007ec  2800              CMP      r0,#0
0007ee  d01e              BEQ      |L1.2094|
;;;491    			bp.X = 0;
;;;492    			sprintf(buffer, "X:%5d Y:%5d", p.X, p.Y);
0007f0  9406              STR      r4,[sp,#0x18]
0007f2  a151              ADR      r1,|L1.2360|
0007f4  a808              ADD      r0,sp,#0x20
0007f6  9b05              LDR      r3,[sp,#0x14]
0007f8  9a04              LDR      r2,[sp,#0x10]
0007fa  f7fffffe          BL       __2sprintf
;;;493    			TFT_Text_PrintStr(&bp, buffer);
0007fe  a908              ADD      r1,sp,#0x20
000800  a806              ADD      r0,sp,#0x18
000802  f7fffffe          BL       TFT_Text_PrintStr
;;;494    
;;;495    #if 0
;;;496    			TFT_Plot_Pixel(&p, &c);
;;;497    			p.X++;
;;;498    			TFT_Plot_Pixel(&p, &c);
;;;499    			p.X-=2;
;;;500    			TFT_Plot_Pixel(&p, &c);
;;;501    			p.X++;
;;;502    			
;;;503    			p.Y++;
;;;504    			TFT_Plot_Pixel(&p, &c);
;;;505    			p.Y-=2;
;;;506    			TFT_Plot_Pixel(&p, &c);
;;;507    #else
;;;508    			if ((pp.X == 0) && (pp.Y == 0)) {
000806  9802              LDR      r0,[sp,#8]
000808  2800              CMP      r0,#0
00080a  d106              BNE      |L1.2074|
00080c  9803              LDR      r0,[sp,#0xc]
00080e  2800              CMP      r0,#0
000810  d103              BNE      |L1.2074|
;;;509    				pp = p;
000812  9905              LDR      r1,[sp,#0x14]
000814  9804              LDR      r0,[sp,#0x10]
000816  9103              STR      r1,[sp,#0xc]
000818  9002              STR      r0,[sp,#8]
                  |L1.2074|
;;;510    			}
;;;511    			TFT_Draw_Line(&p, &pp, &c);
00081a  466a              MOV      r2,sp
00081c  a902              ADD      r1,sp,#8
00081e  a804              ADD      r0,sp,#0x10
000820  f7fffffe          BL       TFT_Draw_Line
;;;512    			pp = p;
000824  9905              LDR      r1,[sp,#0x14]
000826  9804              LDR      r0,[sp,#0x10]
000828  9103              STR      r1,[sp,#0xc]
00082a  9002              STR      r0,[sp,#8]
00082c  e7db              B        |L1.2022|
                  |L1.2094|
;;;513    #endif
;;;514    		} else {
;;;515    			pp.X = 0;
;;;516    			pp.Y = 0;
00082e  9402              STR      r4,[sp,#8]
;;;517    	
;;;518    			bp.X = 0;
000830  9403              STR      r4,[sp,#0xc]
;;;519    			TFT_Text_PrintStr(&bp, "Not Pressed    ");
000832  a144              ADR      r1,|L1.2372|
000834  a806              ADD      r0,sp,#0x18
000836  9406              STR      r4,[sp,#0x18]
000838  f7fffffe          BL       TFT_Text_PrintStr
00083c  e7d3              B        |L1.2022|
;;;520    		}
;;;521    	}
;;;522    }
;;;523    
                          ENDP

                  TFT_TS_Calibrate PROC
;;;524    /* Calibrate touchscreen. */
;;;525    void TFT_TS_Calibrate(void) {
00083e  b5f0              PUSH     {r4-r7,lr}
000840  b085              SUB      sp,sp,#0x14
;;;526    	PT_T p, bp, p_bound;
;;;527    	uint32_t i;
;;;528    	
;;;529    	bp.X = COL_TO_X(0);
000842  2400              MOVS     r4,#0
;;;530    	bp.Y = ROW_TO_Y(3);
000844  4f43              LDR      r7,|L1.2388|
000846  9402              STR      r4,[sp,#8]
000848  7838              LDRB     r0,[r7,#0]  ; G_TFT_char_height
00084a  0041              LSLS     r1,r0,#1
00084c  1840              ADDS     r0,r0,r1
;;;531    
;;;532    	TFT_Text_PrintStr(&bp, "Calibrate TS");
00084e  9003              STR      r0,[sp,#0xc]
000850  a141              ADR      r1,|L1.2392|
000852  a802              ADD      r0,sp,#8
000854  f7fffffe          BL       TFT_Text_PrintStr
;;;533    	bp.X = COL_TO_X(0);
;;;534    	bp.Y = ROW_TO_Y(4);
000858  9402              STR      r4,[sp,#8]
00085a  7838              LDRB     r0,[r7,#0]  ; G_TFT_char_height
;;;535    	TFT_Text_PrintStr(&bp, "by pressing each +");
00085c  a142              ADR      r1,|L1.2408|
00085e  0080              LSLS     r0,r0,#2              ;534
000860  9003              STR      r0,[sp,#0xc]
000862  a802              ADD      r0,sp,#8
000864  f7fffffe          BL       TFT_Text_PrintStr
;;;536    	
;;;537    	bp.X = COL_TO_X(0);
;;;538    	bp.Y = ROW_TO_Y(0);
000868  9402              STR      r4,[sp,#8]
;;;539    	TFT_Text_PrintStr(&bp, "+");
00086a  a144              ADR      r1,|L1.2428|
00086c  a802              ADD      r0,sp,#8
00086e  9403              STR      r4,[sp,#0xc]
000870  f7fffffe          BL       TFT_Text_PrintStr
;;;540    	
;;;541    	p_bound.X = 0xffff;
000874  4c42              LDR      r4,|L1.2432|
;;;542    	p_bound.Y = 0xffff;
;;;543    	for (i=0; i<TS_CALIB_SAMPLES; i++){
000876  2600              MOVS     r6,#0
000878  4625              MOV      r5,r4                 ;542
                  |L1.2170|
;;;544    		while (!TFT_TS_Read(&p))
00087a  4668              MOV      r0,sp
00087c  f7fffffe          BL       TFT_TS_Read
000880  2800              CMP      r0,#0
000882  d0fa              BEQ      |L1.2170|
;;;545    			;
;;;546    		if (p.X < p_bound.X)
;;;547    			p_bound.X = p.X;
000884  9800              LDR      r0,[sp,#0]
000886  42a0              CMP      r0,r4
000888  d800              BHI      |L1.2188|
00088a  4604              MOV      r4,r0
                  |L1.2188|
;;;548    		if (p.Y < p_bound.Y)
;;;549    			p_bound.Y = p.Y;
00088c  9801              LDR      r0,[sp,#4]
00088e  42a8              CMP      r0,r5
000890  d800              BHI      |L1.2196|
000892  4605              MOV      r5,r0
                  |L1.2196|
000894  1c76              ADDS     r6,r6,#1
000896  2e0a              CMP      r6,#0xa
000898  d3ef              BCC      |L1.2170|
;;;550    	}
;;;551    	
;;;552    	TFT_TS_X_Offset = p_bound.X;
00089a  4e26              LDR      r6,|L1.2356|
;;;553    	TFT_TS_Y_Offset = p_bound.Y;
;;;554    	
;;;555    	TS_Min = p_bound;
00089c  6175              STR      r5,[r6,#0x14]  ; TFT_TS_Y_Offset
00089e  4630              MOV      r0,r6
0008a0  60f4              STR      r4,[r6,#0xc]  ; TFT_TS_X_Offset
0008a2  61c5              STR      r5,[r0,#0x1c]  ; TS_Min
0008a4  6184              STR      r4,[r0,#0x18]  ; TS_Min
                  |L1.2214|
;;;556    	
;;;557    	// Wait for release
;;;558    	while (TFT_TS_Read(&p))
0008a6  4668              MOV      r0,sp
0008a8  f7fffffe          BL       TFT_TS_Read
0008ac  2800              CMP      r0,#0
0008ae  d1fa              BNE      |L1.2214|
;;;559    		;
;;;560    	
;;;561    	TFT_Erase();
0008b0  f7fffffe          BL       TFT_Erase
;;;562    
;;;563    	/*
;;;564    	bp.X = COL_TO_X(TFT_MAX_COLS-1);
;;;565    	bp.Y = ROW_TO_Y(TFT_MAX_ROWS-1);
;;;566    	*/
;;;567    	bp.X = TFT_WIDTH - CHAR_WIDTH - 1;
0008b4  4833              LDR      r0,|L1.2436|
0008b6  21ef              MOVS     r1,#0xef
0008b8  7800              LDRB     r0,[r0,#0]  ; G_TFT_char_width
0008ba  1a08              SUBS     r0,r1,r0
;;;568    	bp.Y = TFT_HEIGHT - CHAR_HEIGHT - 1;
0008bc  9002              STR      r0,[sp,#8]
0008be  7839              LDRB     r1,[r7,#0]  ; G_TFT_char_height
0008c0  20ff              MOVS     r0,#0xff
0008c2  3040              ADDS     r0,r0,#0x40
0008c4  1a40              SUBS     r0,r0,r1
;;;569    	TFT_Text_PrintStr(&bp, "+");
0008c6  9003              STR      r0,[sp,#0xc]
0008c8  a12c              ADR      r1,|L1.2428|
0008ca  a802              ADD      r0,sp,#8
0008cc  f7fffffe          BL       TFT_Text_PrintStr
;;;570    
;;;571    	p_bound.X = 0;
0008d0  2400              MOVS     r4,#0
;;;572    	p_bound.Y = 0;
0008d2  4625              MOV      r5,r4
;;;573    	for (i=0; i<TS_CALIB_SAMPLES; i++){
0008d4  4627              MOV      r7,r4
                  |L1.2262|
;;;574    		while (!TFT_TS_Read(&p))
0008d6  4668              MOV      r0,sp
0008d8  f7fffffe          BL       TFT_TS_Read
0008dc  2800              CMP      r0,#0
0008de  d0fa              BEQ      |L1.2262|
;;;575    			;
;;;576    		if (p.X > p_bound.X)
;;;577    			p_bound.X = p.X;
0008e0  9800              LDR      r0,[sp,#0]
0008e2  42a0              CMP      r0,r4
0008e4  d900              BLS      |L1.2280|
0008e6  4604              MOV      r4,r0
                  |L1.2280|
;;;578    		if (p.Y > p_bound.Y)
;;;579    			p_bound.Y = p.Y;
0008e8  9801              LDR      r0,[sp,#4]
0008ea  42a8              CMP      r0,r5
0008ec  d900              BLS      |L1.2288|
0008ee  4605              MOV      r5,r0
                  |L1.2288|
0008f0  1c7f              ADDS     r7,r7,#1
0008f2  2f0a              CMP      r7,#0xa
0008f4  d3ef              BCC      |L1.2262|
;;;580    	}
;;;581    	
;;;582    	TS_Max = p_bound;
0008f6  480f              LDR      r0,|L1.2356|
;;;583    	
;;;584    	TFT_TS_X_Scale = (p_bound.X-TFT_TS_X_Offset)/TFT_WIDTH;
0008f8  21f0              MOVS     r1,#0xf0
0008fa  6245              STR      r5,[r0,#0x24]  ; TS_Max
0008fc  6204              STR      r4,[r0,#0x20]  ; TS_Max
0008fe  68f0              LDR      r0,[r6,#0xc]  ; TFT_TS_X_Offset
000900  1a20              SUBS     r0,r4,r0
000902  f7fffffe          BL       __aeabi_uidivmod
;;;585    	TFT_TS_Y_Scale = (p_bound.Y-TFT_TS_Y_Offset)/TFT_HEIGHT;
000906  60b0              STR      r0,[r6,#8]  ; TFT_TS_X_Scale
000908  6970              LDR      r0,[r6,#0x14]  ; TFT_TS_Y_Offset
00090a  21ff              MOVS     r1,#0xff
00090c  1a28              SUBS     r0,r5,r0
00090e  3141              ADDS     r1,r1,#0x41
000910  f7fffffe          BL       __aeabi_uidivmod
000914  6130              STR      r0,[r6,#0x10]  ; TFT_TS_Y_Scale
                  |L1.2326|
;;;586    
;;;587    	// Wait for release
;;;588    	while (TFT_TS_Read(&p))
000916  4668              MOV      r0,sp
000918  f7fffffe          BL       TFT_TS_Read
00091c  2800              CMP      r0,#0
00091e  d1fa              BNE      |L1.2326|
;;;589    		;
;;;590    	
;;;591    	TFT_TS_Calibrated = 1;
000920  2001              MOVS     r0,#1
000922  7030              STRB     r0,[r6,#0]
;;;592    
;;;593    }
000924  b005              ADD      sp,sp,#0x14
000926  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L1.2344|
                          DCD      0x4004d040
                  |L1.2348|
                          DCD      0x400ff100
                  |L1.2352|
                          DCD      0x4003b000
                  |L1.2356|
                          DCD      ||.data||
                  |L1.2360|
000938  583a2535          DCB      "X:%5d Y:%5d",0
00093c  6420593a
000940  25356400
                  |L1.2372|
000944  4e6f7420          DCB      "Not Pressed    ",0
000948  50726573
00094c  73656420
000950  20202000
                  |L1.2388|
                          DCD      G_TFT_char_height
                  |L1.2392|
000958  43616c69          DCB      "Calibrate TS",0
00095c  62726174
000960  65205453
000964  00      
000965  00                DCB      0
000966  00                DCB      0
000967  00                DCB      0
                  |L1.2408|
000968  62792070          DCB      "by pressing each +",0
00096c  72657373
000970  696e6720
000974  65616368
000978  202b00  
00097b  00                DCB      0
                  |L1.2428|
00097c  2b00              DCB      "+",0
00097e  00                DCB      0
00097f  00                DCB      0
                  |L1.2432|
                          DCD      0x0000ffff
                  |L1.2436|
                          DCD      G_TFT_char_width

                          AREA ||.data||, DATA, ALIGN=2

                  TFT_TS_Calibrated
000000  0100              DCB      0x01,0x00
                  ||xl||
000002  0000              DCW      0x0000
                  ||yu||
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  TFT_TS_X_Scale
                          DCD      0x000000d1
                  TFT_TS_X_Offset
                          DCD      0x000019f8
                  TFT_TS_Y_Scale
                          DCD      0x0000009f
                  TFT_TS_Y_Offset
                          DCD      0x00001a21
                  TS_Min
                          %        8
                  TS_Max
                          %        8

;*** Start embedded assembler ***

#line 1 "src\\TFT_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_TFT_lcd_c_72135517____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_TFT_lcd_c_72135517____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_TFT_lcd_c_72135517____REVSH|
#line 144
|__asm___9_TFT_lcd_c_72135517____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
