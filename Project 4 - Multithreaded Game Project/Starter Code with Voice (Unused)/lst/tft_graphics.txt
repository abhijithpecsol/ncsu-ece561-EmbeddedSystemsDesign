; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tft_graphics.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tft_graphics.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tft_graphics.crf src\TFT_graphics.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  TFT_Draw_Line PROC
;;;49     
;;;50     void TFT_Draw_Line(PT_T * p1, PT_T * p2, COLOR_T * color)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;51     {
;;;52     	PT_T p;
;;;53       int Temp, AdjUp, AdjDown, ErrorTerm, XAdvance, XDelta, YDelta;	 
;;;54       int WholeStep, InitialPixelCount, FinalPixelCount, i,j, RunLength;
;;;55       int XStart;
;;;56       int YStart;
;;;57       int XEnd;
;;;58       int YEnd;
;;;59     
;;;60       XStart = p1->X;
;;;61       YStart = p1->Y;
000002  6802              LDR      r2,[r0,#0]
;;;62       XEnd = p2->X;
;;;63       YEnd = p2->Y;
000004  680b              LDR      r3,[r1,#0]
000006  6840              LDR      r0,[r0,#4]            ;61
000008  6849              LDR      r1,[r1,#4]
00000a  b08e              SUB      sp,sp,#0x38           ;51
;;;64     
;;;65       /* We'll always draw top to bottom, to reduce the number of cases we have to
;;;66          ** handle, and to make lines between the same endpoints draw the same pixels
;;;67       */
;;;68       if (YStart > YEnd)	
00000c  4288              CMP      r0,r1
00000e  dd05              BLE      |L1.28|
;;;69         {
;;;70           Temp = YStart;
000010  4604              MOV      r4,r0
;;;71           YStart = YEnd;
000012  4608              MOV      r0,r1
;;;72           YEnd = Temp;
000014  4621              MOV      r1,r4
;;;73           Temp = XStart;
000016  4614              MOV      r4,r2
;;;74           XStart = XEnd;
000018  461a              MOV      r2,r3
;;;75           XEnd = Temp;
00001a  4623              MOV      r3,r4
                  |L1.28|
;;;76         }
;;;77     
;;;78       /* Figure out whethere we're going left or right, and how far we're going
;;;79       ** horizontally  */
;;;80       XDelta = XEnd - XStart;
00001c  1a9d              SUBS     r5,r3,r2
;;;81       if (XDelta < 0) {
00001e  d503              BPL      |L1.40|
;;;82           XAdvance = -1;
000020  2400              MOVS     r4,#0
000022  43e4              MVNS     r4,r4
;;;83           XDelta = -XDelta;
000024  426d              RSBS     r5,r5,#0
000026  e000              B        |L1.42|
                  |L1.40|
;;;84     	} else {
;;;85           XAdvance = 1;
000028  2401              MOVS     r4,#1
                  |L1.42|
;;;86        }
;;;87     
;;;88       /* Figure out how far we're going vertically */
;;;89       YDelta = YEnd - YStart;
00002a  1a0e              SUBS     r6,r1,r0
;;;90     
;;;91       /* Special-case horizontal, vertical, and diagonal lines, for speed and
;;;92       ** to avoid nasty boundary conditions and division by 0
;;;93       */
;;;94     
;;;95     	p.X = XStart;
;;;96     	p.Y = YStart;
;;;97     	 
;;;98       /* Vertical Line case */
;;;99       if (XDelta == 0) {
00002c  9204              STR      r2,[sp,#0x10]
00002e  9005              STR      r0,[sp,#0x14]
000030  2d00              CMP      r5,#0
000032  d015              BEQ      |L1.96|
;;;100        /* Vertical line */
;;;101        for (i = 0; i <= YDelta; i++) {
;;;102    				p.Y++;
;;;103    				TFT_Plot_Pixel(&p, color);
;;;104         }
;;;105        return;
;;;106      }
;;;107      
;;;108      /* Horizontal Line Case */
;;;109      if (YDelta == 0) {
000034  2e00              CMP      r6,#0
000036  d022              BEQ      |L1.126|
;;;110        /* Horizontal line */
;;;111        for (i = 0; i <= XDelta; i++) {
;;;112    				TFT_Plot_Pixel(&p, color);
;;;113    				p.X += XAdvance;
;;;114        }  
;;;115        return;
;;;116      }
;;;117       
;;;118      /* Diagonal Case */
;;;119      if (XDelta == YDelta) {
000038  42b5              CMP      r5,r6
00003a  d12f              BNE      |L1.156|
;;;120        /* Diagonal line */
;;;121        for (i = 0; i <= XDelta; i++)
00003c  2600              MOVS     r6,#0
00003e  2d00              CMP      r5,#0
000040  db0c              BLT      |L1.92|
                  |L1.66|
;;;122          {
;;;123    				TFT_Plot_Pixel(&p, color);
000042  a804              ADD      r0,sp,#0x10
000044  9910              LDR      r1,[sp,#0x40]
000046  f7fffffe          BL       TFT_Plot_Pixel
;;;124    				p.X += XAdvance;
00004a  9804              LDR      r0,[sp,#0x10]
;;;125    				p.Y++;
00004c  1c76              ADDS     r6,r6,#1
00004e  1900              ADDS     r0,r0,r4              ;124
000050  9004              STR      r0,[sp,#0x10]
000052  9805              LDR      r0,[sp,#0x14]
000054  1c40              ADDS     r0,r0,#1
000056  9005              STR      r0,[sp,#0x14]         ;121
000058  42ae              CMP      r6,r5                 ;121
00005a  ddf2              BLE      |L1.66|
                  |L1.92|
;;;126          }
;;;127        return;
;;;128      }
;;;129       
;;;130       
;;;131      /* Determine whether the line is X or Y major, and handle accordingly */
;;;132      if (XDelta >= YDelta) {
;;;133        /* X major line */
;;;134        /* Minimum # of pixels in a run in this line */
;;;135        WholeStep = XDelta / YDelta;													/* DIV */
;;;136        
;;;137        /* Error term adjust eacn time Y steps by 1; used to tel when one
;;;138        ** extra pixel should be drawn as part of a run, to account for
;;;139        ** fractional steps along the X axis per 1-pixel steps along Y
;;;140        */
;;;141        AdjUp = (XDelta % YDelta) * 2;													/* DIV */
;;;142        
;;;143        /* Error term adjust when the error term turns over, used to factor
;;;144        ** out the X step made at that time
;;;145        */
;;;146        AdjDown = YDelta * 2;
;;;147        
;;;148        /* Initial error term; reflects an initial step of 0.5 along the Y axis 
;;;149         */
;;;150        ErrorTerm = (XDelta % YDelta) - (YDelta * 2);											/* DIV */
;;;151        
;;;152        /* The initial and last runs are partial, because Y advancse only 0.5
;;;153        ** for these runs, rather than 1.  Divide one full run, plus the
;;;154        ** initial pixel, between the initial and last runs.
;;;155        */
;;;156        InitialPixelCount = (WholeStep / 2) + 1;
;;;157        FinalPixelCount = InitialPixelCount;
;;;158        
;;;159        /* If the basic run length is even and there's no fractional
;;;160        ** advance, we have one pixel that could go to either the initial
;;;161        ** or last partial run, which we'll arbitrarily allocate to the
;;;162        ** last run
;;;163        */
;;;164        if ((AdjUp == 0) && ((WholeStep & 0x01) == 0))
;;;165          InitialPixelCount--;
;;;166        
;;;167        /* If there's an odd number of pixels per run, we have 1 pixel that can't
;;;168           ** be allocated to either the initial run or last partial run, so we'll add 0.5
;;;169           ** to error term so this pixel will be handled by the normal full-run loop
;;;170        */
;;;171        if ((WholeStep & 0x01) != 0)
;;;172          ErrorTerm += YDelta;
;;;173        
;;;174        /* Draw the first, partial run of pixels */
;;;175    #ifdef USE_DRAW_LINE_FUNC
;;;176        Line_DrawHorizontalRun(pThis, &XStart, &YStart, XAdvance, 
;;;177    			   InitialPixelCount, pThis->PenColor);
;;;178    #else
;;;179        for (j = 0; j < InitialPixelCount; j++)
;;;180          {
;;;181    				TFT_Plot_Pixel(&p, color);
;;;182    				p.X += XAdvance;
;;;183          }
;;;184        p.Y++;
;;;185    #endif
;;;186        
;;;187        /* Draw all full runs */
;;;188        for (i = 0; i < (YDelta - 1); i++)
;;;189          {
;;;190    				RunLength = WholeStep; /* run is at least this long */
;;;191    				/* Advance the error term and add an extra pixel if the error
;;;192    				** term so indicates
;;;193    				*/
;;;194    				if ((ErrorTerm += AdjUp) > 0)
;;;195    					{
;;;196    						RunLength++;
;;;197    						ErrorTerm -= AdjDown; /* reset the error term */
;;;198    					}
;;;199    	
;;;200    				/* Draw this scan line's run */
;;;201    #ifdef USE_DRAW_LINE_FUNC
;;;202    				Line_DrawHorizontalRun(pThis, &XStart, &YStart, XAdvance, RunLength, 
;;;203    			       pThis->PenColor);
;;;204    #else
;;;205    				for (j = 0; j < RunLength; j++) {
;;;206    					TFT_Plot_Pixel(&p, color);
;;;207    					p.X += XAdvance;
;;;208    				}
;;;209    				p.Y++;
;;;210    #endif
;;;211    				}
;;;212        
;;;213        /* Draw the final run of pixels */
;;;214    #ifdef USE_DRAW_LINE_FUNC
;;;215        Line_DrawHorizontalRun(pThis, &XStart, &YStart, XAdvance, 
;;;216    			   FinalPixelCount, pThis->PenColor);
;;;217    #else
;;;218        for (j = 0; j < FinalPixelCount; j++)
;;;219          {
;;;220    				TFT_Plot_Pixel(&p, color);
;;;221    				p.X += XAdvance;
;;;222          }
;;;223        p.Y++;
;;;224    #endif
;;;225        
;;;226        return;
;;;227      } else {
;;;228        /* Y major line */
;;;229        
;;;230        /* Minimum # of pixels in a run in this line */
;;;231        WholeStep = YDelta / XDelta;										/* DIV */
;;;232        
;;;233        /* Error term adjust each time X steps by 1; used to tell when 1 extra
;;;234        ** pixel should be drawn as part of a run, to account for
;;;235        ** fractional steps along the Y axis per 1-pixel steps along X
;;;236        */
;;;237        AdjUp = (YDelta % XDelta) * 2;										/* DIV */
;;;238        
;;;239        /* Error term adjust when the error term turns over, used to factor
;;;240        ** out the Y step made at that time
;;;241        */
;;;242        AdjDown = XDelta * 2;
;;;243        
;;;244        /* Initial error term; reflects initial step of 0.5 along the X axis */
;;;245        ErrorTerm = (YDelta % XDelta) - (XDelta * 2);								/* DIV */
;;;246        
;;;247        /* The initial and last runs are partial, because X advances only 0.5
;;;248        ** for these runs, rather than 1.  Divide ony full run, plus the
;;;249        ** initial pixel, between the initial and last runs
;;;250        */
;;;251        
;;;252        InitialPixelCount = (WholeStep / 2) + 1;
;;;253        FinalPixelCount = InitialPixelCount;
;;;254        
;;;255        /* If the basic run length is even and there's no fractional
;;;256          ** advance, we have one pixel that could go to either the initial
;;;257          ** or last partial run, which we'll arbitrarily allocate to the
;;;258          ** last run
;;;259          */
;;;260          if ((AdjUp == 0) && ((WholeStep & 0x01) == 0))
;;;261    	{
;;;262    	  InitialPixelCount--;
;;;263    	}
;;;264          
;;;265          /* If there's an odd number of pixels per run, we have 1 pixel that 
;;;266    	 can't
;;;267    	 ** be allocated to either the initial run or last partial run, so we'll 
;;;268    	 add 0.5
;;;269    	 ** to error term so this pixel will be handled by the normal full-run 
;;;270    	 loop
;;;271          */
;;;272          if ((WholeStep & 0x01) != 0)
;;;273    	{
;;;274    	  ErrorTerm += XDelta;
;;;275    	}
;;;276          
;;;277          /* Draw the first, partial run of pixels */
;;;278    #ifdef USE_DRAW_LINE_FUNC
;;;279          Line_DrawVerticalRun(pThis, &XStart, &YStart, XAdvance, 
;;;280    			   InitialPixelCount, pThis->PenColor);
;;;281    #else
;;;282          for (j = 0; j < InitialPixelCount; j++) {
;;;283    				TFT_Plot_Pixel(&p, color);
;;;284    				p.Y++;
;;;285    			}
;;;286          /* Update x,y position */
;;;287          p.X += XAdvance;
;;;288    #endif
;;;289          
;;;290          /* Draw all full runs */
;;;291          for (i = 0; i < (XDelta - 1); i++) {
;;;292    				RunLength = WholeStep; /* run is at least this long */
;;;293    	  
;;;294    				/* Advance the error term and add an extra pixel if the error
;;;295    				** term so indicates
;;;296    				*/
;;;297    	  if ((ErrorTerm += AdjUp) > 0)
;;;298    	    {
;;;299    	      RunLength++;
;;;300    	      ErrorTerm -= AdjDown; /* reset the error term */
;;;301    	    }
;;;302    	  
;;;303    	  /* Draw this scan line's run */
;;;304    #ifdef USE_DRAW_LINE_FUNC
;;;305    	  Line_DrawVerticalRun(pThis, &XStart, &YStart, XAdvance, RunLength, 
;;;306    			       pThis->PenColor);
;;;307    #else
;;;308    	  for (j = 0; j < RunLength; j++)
;;;309    	    {
;;;310    				TFT_Plot_Pixel(&p, color);
;;;311    	      p.Y++;
;;;312    	    }
;;;313    	  /* Update x,y position */
;;;314    	  p.X += XAdvance;
;;;315    #endif
;;;316    	  
;;;317    	}
;;;318          
;;;319          /* Draw the final run of pixels */
;;;320    #ifdef USE_DRAW_LINE_FUNC
;;;321          Line_DrawVerticalRun(pThis, &XStart, &YStart, XAdvance, 
;;;322    			   FinalPixelCount, pThis->PenColor);
;;;323    #else
;;;324          for (j= 0; j < FinalPixelCount; j++)
;;;325    			{
;;;326    				TFT_Plot_Pixel(&p, color);
;;;327    				p.Y++;
;;;328    			}
;;;329          /* Update x,y position */
;;;330          p.X += XAdvance;
;;;331    #endif    
;;;332          return;
;;;333        }
;;;334    }
00005c  b011              ADD      sp,sp,#0x44
00005e  bdf0              POP      {r4-r7,pc}
                  |L1.96|
000060  2400              MOVS     r4,#0                 ;101
000062  2e00              CMP      r6,#0                 ;101
000064  dbfa              BLT      |L1.92|
                  |L1.102|
000066  9805              LDR      r0,[sp,#0x14]         ;102
000068  9910              LDR      r1,[sp,#0x40]         ;103
00006a  1c40              ADDS     r0,r0,#1              ;102
00006c  9005              STR      r0,[sp,#0x14]         ;103
00006e  a804              ADD      r0,sp,#0x10           ;103
000070  f7fffffe          BL       TFT_Plot_Pixel
000074  1c64              ADDS     r4,r4,#1              ;103
000076  42b4              CMP      r4,r6                 ;101
000078  ddf5              BLE      |L1.102|
                  |L1.122|
00007a  b011              ADD      sp,sp,#0x44
00007c  bdf0              POP      {r4-r7,pc}
                  |L1.126|
00007e  2600              MOVS     r6,#0                 ;111
000080  2d00              CMP      r5,#0                 ;111
000082  dbfa              BLT      |L1.122|
                  |L1.132|
000084  a804              ADD      r0,sp,#0x10           ;112
000086  9910              LDR      r1,[sp,#0x40]         ;112
000088  f7fffffe          BL       TFT_Plot_Pixel
00008c  9804              LDR      r0,[sp,#0x10]         ;113
00008e  1c76              ADDS     r6,r6,#1              ;113
000090  1900              ADDS     r0,r0,r4              ;113
000092  9004              STR      r0,[sp,#0x10]         ;111
000094  42ae              CMP      r6,r5                 ;111
000096  ddf5              BLE      |L1.132|
                  |L1.152|
000098  b011              ADD      sp,sp,#0x44
00009a  bdf0              POP      {r4-r7,pc}
                  |L1.156|
00009c  42b5              CMP      r5,r6                 ;132
00009e  db64              BLT      |L1.362|
0000a0  4631              MOV      r1,r6                 ;135
0000a2  4628              MOV      r0,r5                 ;135
0000a4  f7fffffe          BL       __aeabi_idivmod
0000a8  9008              STR      r0,[sp,#0x20]         ;141
0000aa  0048              LSLS     r0,r1,#1              ;141
0000ac  900c              STR      r0,[sp,#0x30]         ;146
0000ae  0070              LSLS     r0,r6,#1              ;146
0000b0  1a0f              SUBS     r7,r1,r0              ;150
0000b2  900b              STR      r0,[sp,#0x2c]         ;156
0000b4  9808              LDR      r0,[sp,#0x20]         ;156
0000b6  0fc1              LSRS     r1,r0,#31             ;156
0000b8  1808              ADDS     r0,r1,r0              ;156
0000ba  1040              ASRS     r0,r0,#1              ;156
0000bc  1c40              ADDS     r0,r0,#1              ;156
0000be  900a              STR      r0,[sp,#0x28]         ;157
0000c0  9009              STR      r0,[sp,#0x24]         ;164
0000c2  9808              LDR      r0,[sp,#0x20]         ;164
0000c4  07c1              LSLS     r1,r0,#31             ;164
0000c6  980c              LDR      r0,[sp,#0x30]         ;164
0000c8  0fc9              LSRS     r1,r1,#31             ;164
0000ca  4301              ORRS     r1,r1,r0              ;164
0000cc  d102              BNE      |L1.212|
0000ce  980a              LDR      r0,[sp,#0x28]         ;165
0000d0  1e40              SUBS     r0,r0,#1              ;165
0000d2  900a              STR      r0,[sp,#0x28]         ;165
                  |L1.212|
0000d4  9808              LDR      r0,[sp,#0x20]         ;171
0000d6  07c0              LSLS     r0,r0,#31             ;171
0000d8  d000              BEQ      |L1.220|
0000da  19bf              ADDS     r7,r7,r6              ;172
                  |L1.220|
0000dc  980a              LDR      r0,[sp,#0x28]         ;179
0000de  2500              MOVS     r5,#0                 ;179
0000e0  2800              CMP      r0,#0                 ;179
0000e2  dd0a              BLE      |L1.250|
                  |L1.228|
0000e4  a804              ADD      r0,sp,#0x10           ;181
0000e6  9910              LDR      r1,[sp,#0x40]         ;181
0000e8  f7fffffe          BL       TFT_Plot_Pixel
0000ec  9804              LDR      r0,[sp,#0x10]         ;182
0000ee  1c6d              ADDS     r5,r5,#1              ;179
0000f0  1900              ADDS     r0,r0,r4              ;182
0000f2  9004              STR      r0,[sp,#0x10]         ;179
0000f4  980a              LDR      r0,[sp,#0x28]         ;179
0000f6  4285              CMP      r5,r0                 ;179
0000f8  dbf4              BLT      |L1.228|
                  |L1.250|
0000fa  9805              LDR      r0,[sp,#0x14]         ;184
0000fc  1e76              SUBS     r6,r6,#1              ;188
0000fe  1c40              ADDS     r0,r0,#1              ;184
000100  9005              STR      r0,[sp,#0x14]         ;188
000102  2000              MOVS     r0,#0                 ;188
000104  9601              STR      r6,[sp,#4]            ;188
000106  9000              STR      r0,[sp,#0]            ;188
000108  2e00              CMP      r6,#0                 ;188
00010a  dd1d              BLE      |L1.328|
                  |L1.268|
00010c  980c              LDR      r0,[sp,#0x30]         ;194
00010e  9d08              LDR      r5,[sp,#0x20]         ;194
000110  183f              ADDS     r7,r7,r0              ;194
000112  2f00              CMP      r7,#0                 ;194
000114  dd02              BLE      |L1.284|
000116  980b              LDR      r0,[sp,#0x2c]         ;197
000118  1a3f              SUBS     r7,r7,r0              ;197
00011a  1c6d              ADDS     r5,r5,#1              ;197
                  |L1.284|
00011c  2600              MOVS     r6,#0                 ;205
00011e  2d00              CMP      r5,#0                 ;205
000120  dd09              BLE      |L1.310|
                  |L1.290|
000122  a804              ADD      r0,sp,#0x10           ;206
000124  9910              LDR      r1,[sp,#0x40]         ;206
000126  f7fffffe          BL       TFT_Plot_Pixel
00012a  9804              LDR      r0,[sp,#0x10]         ;207
00012c  1c76              ADDS     r6,r6,#1              ;207
00012e  1900              ADDS     r0,r0,r4              ;207
000130  9004              STR      r0,[sp,#0x10]         ;205
000132  42ae              CMP      r6,r5                 ;205
000134  dbf5              BLT      |L1.290|
                  |L1.310|
000136  9805              LDR      r0,[sp,#0x14]         ;209
000138  9901              LDR      r1,[sp,#4]            ;188
00013a  1c40              ADDS     r0,r0,#1              ;209
00013c  9005              STR      r0,[sp,#0x14]         ;188
00013e  9800              LDR      r0,[sp,#0]            ;188
000140  1c40              ADDS     r0,r0,#1              ;188
000142  9000              STR      r0,[sp,#0]            ;188
000144  4288              CMP      r0,r1                 ;188
000146  dbe1              BLT      |L1.268|
                  |L1.328|
000148  9809              LDR      r0,[sp,#0x24]         ;218
00014a  2500              MOVS     r5,#0                 ;218
00014c  2800              CMP      r0,#0                 ;218
00014e  dda3              BLE      |L1.152|
                  |L1.336|
000150  a804              ADD      r0,sp,#0x10           ;220
000152  9910              LDR      r1,[sp,#0x40]         ;220
000154  f7fffffe          BL       TFT_Plot_Pixel
000158  9804              LDR      r0,[sp,#0x10]         ;221
00015a  1c6d              ADDS     r5,r5,#1              ;218
00015c  1900              ADDS     r0,r0,r4              ;221
00015e  9004              STR      r0,[sp,#0x10]         ;218
000160  9809              LDR      r0,[sp,#0x24]         ;218
000162  4285              CMP      r5,r0                 ;218
000164  dbf4              BLT      |L1.336|
                  |L1.358|
000166  b011              ADD      sp,sp,#0x44
000168  bdf0              POP      {r4-r7,pc}
                  |L1.362|
00016a  4629              MOV      r1,r5                 ;231
00016c  4630              MOV      r0,r6                 ;231
00016e  f7fffffe          BL       __aeabi_idivmod
000172  9008              STR      r0,[sp,#0x20]         ;237
000174  0048              LSLS     r0,r1,#1              ;237
000176  900c              STR      r0,[sp,#0x30]         ;242
000178  0068              LSLS     r0,r5,#1              ;242
00017a  1a0f              SUBS     r7,r1,r0              ;245
00017c  900b              STR      r0,[sp,#0x2c]         ;252
00017e  9808              LDR      r0,[sp,#0x20]         ;252
000180  0fc1              LSRS     r1,r0,#31             ;252
000182  1808              ADDS     r0,r1,r0              ;252
000184  1040              ASRS     r0,r0,#1              ;252
000186  1c40              ADDS     r0,r0,#1              ;252
000188  900a              STR      r0,[sp,#0x28]         ;253
00018a  9009              STR      r0,[sp,#0x24]         ;260
00018c  9808              LDR      r0,[sp,#0x20]         ;260
00018e  07c1              LSLS     r1,r0,#31             ;260
000190  980c              LDR      r0,[sp,#0x30]         ;260
000192  0fc9              LSRS     r1,r1,#31             ;260
000194  4301              ORRS     r1,r1,r0              ;260
000196  d102              BNE      |L1.414|
000198  980a              LDR      r0,[sp,#0x28]         ;262
00019a  1e40              SUBS     r0,r0,#1              ;262
00019c  900a              STR      r0,[sp,#0x28]         ;262
                  |L1.414|
00019e  9808              LDR      r0,[sp,#0x20]         ;272
0001a0  07c0              LSLS     r0,r0,#31             ;272
0001a2  d000              BEQ      |L1.422|
0001a4  197f              ADDS     r7,r7,r5              ;274
                  |L1.422|
0001a6  980a              LDR      r0,[sp,#0x28]         ;282
0001a8  2600              MOVS     r6,#0                 ;282
0001aa  2800              CMP      r0,#0                 ;282
0001ac  dd0a              BLE      |L1.452|
                  |L1.430|
0001ae  a804              ADD      r0,sp,#0x10           ;283
0001b0  9910              LDR      r1,[sp,#0x40]         ;283
0001b2  f7fffffe          BL       TFT_Plot_Pixel
0001b6  9805              LDR      r0,[sp,#0x14]         ;284
0001b8  1c76              ADDS     r6,r6,#1              ;282
0001ba  1c40              ADDS     r0,r0,#1              ;284
0001bc  9005              STR      r0,[sp,#0x14]         ;282
0001be  980a              LDR      r0,[sp,#0x28]         ;282
0001c0  4286              CMP      r6,r0                 ;282
0001c2  dbf4              BLT      |L1.430|
                  |L1.452|
0001c4  9804              LDR      r0,[sp,#0x10]         ;287
0001c6  1e6d              SUBS     r5,r5,#1              ;291
0001c8  1900              ADDS     r0,r0,r4              ;287
0001ca  9004              STR      r0,[sp,#0x10]         ;291
0001cc  2000              MOVS     r0,#0                 ;291
0001ce  9501              STR      r5,[sp,#4]            ;291
0001d0  9000              STR      r0,[sp,#0]            ;291
0001d2  2d00              CMP      r5,#0                 ;291
0001d4  dd1d              BLE      |L1.530|
                  |L1.470|
0001d6  980c              LDR      r0,[sp,#0x30]         ;297
0001d8  9d08              LDR      r5,[sp,#0x20]         ;297
0001da  183f              ADDS     r7,r7,r0              ;297
0001dc  2f00              CMP      r7,#0                 ;297
0001de  dd02              BLE      |L1.486|
0001e0  980b              LDR      r0,[sp,#0x2c]         ;300
0001e2  1a3f              SUBS     r7,r7,r0              ;300
0001e4  1c6d              ADDS     r5,r5,#1              ;300
                  |L1.486|
0001e6  2600              MOVS     r6,#0                 ;308
0001e8  2d00              CMP      r5,#0                 ;308
0001ea  dd09              BLE      |L1.512|
                  |L1.492|
0001ec  a804              ADD      r0,sp,#0x10           ;310
0001ee  9910              LDR      r1,[sp,#0x40]         ;310
0001f0  f7fffffe          BL       TFT_Plot_Pixel
0001f4  9805              LDR      r0,[sp,#0x14]         ;311
0001f6  1c76              ADDS     r6,r6,#1              ;311
0001f8  1c40              ADDS     r0,r0,#1              ;311
0001fa  9005              STR      r0,[sp,#0x14]         ;308
0001fc  42ae              CMP      r6,r5                 ;308
0001fe  dbf5              BLT      |L1.492|
                  |L1.512|
000200  9804              LDR      r0,[sp,#0x10]         ;314
000202  9901              LDR      r1,[sp,#4]            ;291
000204  1900              ADDS     r0,r0,r4              ;314
000206  9004              STR      r0,[sp,#0x10]         ;291
000208  9800              LDR      r0,[sp,#0]            ;291
00020a  1c40              ADDS     r0,r0,#1              ;291
00020c  9000              STR      r0,[sp,#0]            ;291
00020e  4288              CMP      r0,r1                 ;291
000210  dbe1              BLT      |L1.470|
                  |L1.530|
000212  9809              LDR      r0,[sp,#0x24]         ;324
000214  2400              MOVS     r4,#0                 ;324
000216  2800              CMP      r0,#0                 ;324
000218  dda5              BLE      |L1.358|
                  |L1.538|
00021a  a804              ADD      r0,sp,#0x10           ;326
00021c  9910              LDR      r1,[sp,#0x40]         ;326
00021e  f7fffffe          BL       TFT_Plot_Pixel
000222  9805              LDR      r0,[sp,#0x14]         ;327
000224  1c64              ADDS     r4,r4,#1              ;324
000226  1c40              ADDS     r0,r0,#1              ;327
000228  9005              STR      r0,[sp,#0x14]         ;324
00022a  9809              LDR      r0,[sp,#0x24]         ;324
00022c  4284              CMP      r4,r0                 ;324
00022e  dbf4              BLT      |L1.538|
000230  b011              ADD      sp,sp,#0x44
000232  bdf0              POP      {r4-r7,pc}
                          ENDP

                  Graphics_Test PROC
;;;4      
;;;5      void Graphics_Test(void) {
000234  b5f0              PUSH     {r4-r7,lr}
000236  b087              SUB      sp,sp,#0x1c
;;;6      	int x, y;
;;;7      	PT_T p1, p2;
;;;8      	COLOR_T c;
;;;9      	
;;;10     	p1.X = TFT_WIDTH/2;
000238  2078              MOVS     r0,#0x78
;;;11     	p1.Y = TFT_HEIGHT/2;
00023a  9004              STR      r0,[sp,#0x10]
00023c  20a0              MOVS     r0,#0xa0
;;;12     
;;;13     	c.R = 100;
00023e  9005              STR      r0,[sp,#0x14]
000240  2664              MOVS     r6,#0x64
000242  4668              MOV      r0,sp
000244  7206              STRB     r6,[r0,#8]
;;;14     	c.G = 100;
000246  7246              STRB     r6,[r0,#9]
;;;15     	c.B = 255;
000248  27ff              MOVS     r7,#0xff
00024a  7287              STRB     r7,[r0,#0xa]
;;;16     	p2.Y = 0;
00024c  2000              MOVS     r0,#0
;;;17     	for (x=0; x<TFT_WIDTH; x += STEP) {
00024e  4604              MOV      r4,r0
000250  9001              STR      r0,[sp,#4]
                  |L1.594|
;;;18     		p2.X = x;
;;;19     		TFT_Draw_Line(&p1, &p2, &c);
000252  aa02              ADD      r2,sp,#8
000254  4669              MOV      r1,sp
000256  a804              ADD      r0,sp,#0x10
000258  9400              STR      r4,[sp,#0]
00025a  f7fffffe          BL       TFT_Draw_Line
00025e  3408              ADDS     r4,r4,#8
000260  2cf0              CMP      r4,#0xf0              ;17
000262  dbf6              BLT      |L1.594|
;;;20     	}
;;;21     
;;;22     	c.G = 100;
000264  4668              MOV      r0,sp
000266  7246              STRB     r6,[r0,#9]
;;;23     	c.B = 100;
000268  7286              STRB     r6,[r0,#0xa]
;;;24     	c.R = 255;
00026a  7207              STRB     r7,[r0,#8]
;;;25     	p2.X = TFT_WIDTH-1;
00026c  20ef              MOVS     r0,#0xef
;;;26     	for (y=0; y<TFT_HEIGHT; y += STEP) {
00026e  2400              MOVS     r4,#0
000270  25ff              MOVS     r5,#0xff
000272  3541              ADDS     r5,r5,#0x41
000274  9000              STR      r0,[sp,#0]
                  |L1.630|
;;;27     		p2.Y = y;
;;;28     		TFT_Draw_Line(&p1, &p2, &c);
000276  aa02              ADD      r2,sp,#8
000278  4669              MOV      r1,sp
00027a  a804              ADD      r0,sp,#0x10
00027c  9401              STR      r4,[sp,#4]
00027e  f7fffffe          BL       TFT_Draw_Line
000282  3408              ADDS     r4,r4,#8
000284  42ac              CMP      r4,r5                 ;26
000286  dbf6              BLT      |L1.630|
;;;29     	}
;;;30     
;;;31     	c.R = 100;
000288  4668              MOV      r0,sp
00028a  7206              STRB     r6,[r0,#8]
;;;32     	c.B = 100;
00028c  7286              STRB     r6,[r0,#0xa]
;;;33     	c.G = 255;
00028e  7247              STRB     r7,[r0,#9]
;;;34     	p2.Y = TFT_HEIGHT-1;
000290  20ff              MOVS     r0,#0xff
000292  3040              ADDS     r0,r0,#0x40
;;;35     	for (x=0; x<TFT_WIDTH; x += STEP) {
000294  2400              MOVS     r4,#0
000296  9001              STR      r0,[sp,#4]
                  |L1.664|
;;;36     		p2.X = x;
;;;37     		TFT_Draw_Line(&p1, &p2, &c);
000298  aa02              ADD      r2,sp,#8
00029a  4669              MOV      r1,sp
00029c  a804              ADD      r0,sp,#0x10
00029e  9400              STR      r4,[sp,#0]
0002a0  f7fffffe          BL       TFT_Draw_Line
0002a4  3408              ADDS     r4,r4,#8
0002a6  2cf0              CMP      r4,#0xf0              ;35
0002a8  dbf6              BLT      |L1.664|
;;;38     	}
;;;39     
;;;40     	c.R = 200;
0002aa  21c8              MOVS     r1,#0xc8
0002ac  4668              MOV      r0,sp
0002ae  7201              STRB     r1,[r0,#8]
;;;41     	c.B = 100;
0002b0  7286              STRB     r6,[r0,#0xa]
;;;42     	c.G = 255;
0002b2  7247              STRB     r7,[r0,#9]
;;;43     	p2.X = 0;
0002b4  2000              MOVS     r0,#0
;;;44     	for (y=0; y<TFT_HEIGHT; y += STEP) {
0002b6  4604              MOV      r4,r0
0002b8  9000              STR      r0,[sp,#0]
                  |L1.698|
;;;45     		p2.Y = y;
;;;46     		TFT_Draw_Line(&p1, &p2, &c);
0002ba  aa02              ADD      r2,sp,#8
0002bc  4669              MOV      r1,sp
0002be  a804              ADD      r0,sp,#0x10
0002c0  9401              STR      r4,[sp,#4]
0002c2  f7fffffe          BL       TFT_Draw_Line
0002c6  3408              ADDS     r4,r4,#8
0002c8  42ac              CMP      r4,r5                 ;44
0002ca  dbf6              BLT      |L1.698|
;;;47     	}
;;;48     }
0002cc  b007              ADD      sp,sp,#0x1c
0002ce  bdf0              POP      {r4-r7,pc}
;;;49     
                          ENDP

