; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tft_text.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tft_text.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tft_text.crf src\TFT_text.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TFT_Text_Set_Colors PROC
;;;15     
;;;16     void TFT_Text_Set_Colors(COLOR_T * foreground, COLOR_T * background) {
000000  4a93              LDR      r2,|L1.592|
;;;17     	fg.R = foreground->R;
000002  7803              LDRB     r3,[r0,#0]
000004  7013              STRB     r3,[r2,#0]
;;;18     	fg.G = foreground->G;
000006  7843              LDRB     r3,[r0,#1]
000008  7053              STRB     r3,[r2,#1]
;;;19     	fg.B = foreground->B;
00000a  7880              LDRB     r0,[r0,#2]
00000c  7090              STRB     r0,[r2,#2]
;;;20     	bg.R = background->R;
00000e  4891              LDR      r0,|L1.596|
000010  780a              LDRB     r2,[r1,#0]
000012  7002              STRB     r2,[r0,#0]
;;;21     	bg.G = background->G;
000014  784a              LDRB     r2,[r1,#1]
000016  7042              STRB     r2,[r0,#1]
;;;22     	bg.B = background->B;
000018  7889              LDRB     r1,[r1,#2]
00001a  7081              STRB     r1,[r0,#2]
;;;23     }
00001c  4770              BX       lr
;;;24     
                          ENDP

                  TFT_Erase PROC
;;;25     void TFT_Erase(void) {
00001e  b510              PUSH     {r4,lr}
;;;26     	TFT_Fill_Buffer(&bg);
000020  488c              LDR      r0,|L1.596|
000022  f7fffffe          BL       TFT_Fill_Buffer
;;;27     }
000026  bd10              POP      {r4,pc}
;;;28     
                          ENDP

                  TFT_Text_Init PROC
;;;29     void TFT_Text_Init(uint8_t font_num) {
000028  488c              LDR      r0,|L1.604|
;;;30     	
;;;31     #if 0  // Code for multiple fonts not working yet
;;;32     	font = fonts[font_num];
;;;33     	G_TFT_char_width = char_widths[font_num];
;;;34     	G_TFT_char_height = char_heights[font_num];
;;;35     #else // This code is working
;;;36     	font = Lucida_Console12x19;
00002a  498b              LDR      r1,|L1.600|
;;;37     	G_TFT_char_width = 12;
00002c  220c              MOVS     r2,#0xc
00002e  6081              STR      r1,[r0,#8]  ; font
000030  7002              STRB     r2,[r0,#0]
;;;38     	G_TFT_char_height = 19;
000032  2213              MOVS     r2,#0x13
000034  7042              STRB     r2,[r0,#1]
;;;39     #endif
;;;40     	
;;;41     	font_header = (FONT_HEADER_T *) font;
000036  60c1              STR      r1,[r0,#0xc]  ; font_header
000038  3108              ADDS     r1,r1,#8
;;;42     	glyph_index = (GLYPH_INDEX_T *) (font + sizeof(FONT_HEADER_T));
;;;43     	
;;;44     	// Set default FG and BG colors
;;;45     	fg.R = 255;
00003a  6101              STR      r1,[r0,#0x10]  ; glyph_index
00003c  4984              LDR      r1,|L1.592|
00003e  20ff              MOVS     r0,#0xff
000040  7008              STRB     r0,[r1,#0]
;;;46     	fg.G = 255;
000042  7048              STRB     r0,[r1,#1]
;;;47     	fg.B = 0;
000044  2000              MOVS     r0,#0
000046  7088              STRB     r0,[r1,#2]
;;;48     
;;;49     	bg.R = 0;
000048  1cc9              ADDS     r1,r1,#3
00004a  7008              STRB     r0,[r1,#0]
;;;50     	bg.G = 0;
00004c  7048              STRB     r0,[r1,#1]
;;;51     	bg.B = 0;
00004e  7088              STRB     r0,[r1,#2]
;;;52     }
000050  4770              BX       lr
;;;53     
                          ENDP

                  TFT_Text_PrintChar PROC
;;;54     void TFT_Text_PrintChar(PT_T * pos, char ch) {
000052  b5f0              PUSH     {r4-r7,lr}
;;;55     	uint8_t glyph_index_entry;
;;;56     	const uint8_t * glyph_data; // start of the data
;;;57     	PT_T end_pos;
;;;58     	COLOR_T * pixel_color;
;;;59     	uint8_t bitmap_byte;
;;;60     	uint8_t glyph_width, x_bm;
;;;61     	uint32_t offset;
;;;62     	uint32_t row, col, num_pixels;
;;;63     	
;;;64     	glyph_index_entry = ch - font_header->FirstChar;
000054  4c81              LDR      r4,|L1.604|
000056  b085              SUB      sp,sp,#0x14           ;54
000058  68e2              LDR      r2,[r4,#0xc]  ; font_header
00005a  7892              LDRB     r2,[r2,#2]
00005c  1a89              SUBS     r1,r1,r2
00005e  0609              LSLS     r1,r1,#24
;;;65     	glyph_width = glyph_index[glyph_index_entry].Width;
000060  6922              LDR      r2,[r4,#0x10]  ; glyph_index
000062  0d89              LSRS     r1,r1,#22
000064  5851              LDR      r1,[r2,r1]
;;;66     	offset = glyph_index[glyph_index_entry].Offset;
;;;67     	glyph_data = &(font[offset]);
000066  68a2              LDR      r2,[r4,#8]  ; font
000068  b2ce              UXTB     r6,r1                 ;65
00006a  0a09              LSRS     r1,r1,#8              ;66
00006c  1851              ADDS     r1,r2,r1
;;;68     	
;;;69     	end_pos.X = pos->X+CHAR_WIDTH-1;
00006e  9101              STR      r1,[sp,#4]
000070  7821              LDRB     r1,[r4,#0]  ; G_TFT_char_width
000072  6802              LDR      r2,[r0,#0]
000074  1e49              SUBS     r1,r1,#1
000076  1851              ADDS     r1,r2,r1
;;;70     	end_pos.Y = pos->Y+CHAR_HEIGHT-1;
000078  9102              STR      r1,[sp,#8]
00007a  7861              LDRB     r1,[r4,#1]  ; G_TFT_char_height
00007c  6842              LDR      r2,[r0,#4]
00007e  1e49              SUBS     r1,r1,#1
000080  1851              ADDS     r1,r2,r1
;;;71     	TFT_Start_Rectangle(pos, &end_pos); 
000082  9103              STR      r1,[sp,#0xc]
000084  a902              ADD      r1,sp,#8
000086  f7fffffe          BL       TFT_Start_Rectangle
;;;72     	
;;;73     	for (row = 0; row < CHAR_HEIGHT; row++) {
00008a  2000              MOVS     r0,#0
00008c  9004              STR      r0,[sp,#0x10]
00008e  7860              LDRB     r0,[r4,#1]  ; G_TFT_char_height
000090  2800              CMP      r0,#0
000092  d971              BLS      |L1.376|
                  |L1.148|
;;;74     		x_bm = 0;
000094  2400              MOVS     r4,#0
                  |L1.150|
;;;75     		do {
;;;76     			bitmap_byte = *glyph_data;
000096  9801              LDR      r0,[sp,#4]
000098  7805              LDRB     r5,[r0,#0]
;;;77     			if (bitmap_byte == 0x00) {
00009a  2d00              CMP      r5,#0
00009c  d014              BEQ      |L1.200|
;;;78     				num_pixels = MIN(8,glyph_width - x_bm);
;;;79     				TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;80     				x_bm += num_pixels;	
;;;81     			} else if (bitmap_byte == 0xff) {
00009e  2dff              CMP      r5,#0xff
0000a0  d01d              BEQ      |L1.222|
;;;82     				num_pixels = MIN(8,glyph_width - x_bm);
;;;83     				TFT_Write_Rectangle_Pixel(&fg, num_pixels);
;;;84     				x_bm += num_pixels;	
;;;85     			} else {
;;;86     				col = 0;
0000a2  2700              MOVS     r7,#0
;;;87     				num_pixels = 0;
;;;88     				if ((bitmap_byte & 0x7f) == 0) {
0000a4  0668              LSLS     r0,r5,#25
0000a6  d025              BEQ      |L1.244|
;;;89     					num_pixels = MIN(7,glyph_width - x_bm);
;;;90     					TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;91     				} else if ((bitmap_byte & 0x7f) == 0x7f) {
0000a8  43e8              MVNS     r0,r5
0000aa  0641              LSLS     r1,r0,#25
0000ac  d02a              BEQ      |L1.260|
;;;92     					num_pixels = MIN(7,glyph_width - x_bm);
;;;93     					TFT_Write_Rectangle_Pixel(&fg, num_pixels);
;;;94     				} else if ((bitmap_byte & 0x3f) == 0) {
0000ae  06a9              LSLS     r1,r5,#26
0000b0  d042              BEQ      |L1.312|
;;;95     					num_pixels = MIN(6,glyph_width - x_bm);
;;;96     					TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;97     				} else if ((bitmap_byte & 0x3f) == 0x3f) {
0000b2  0681              LSLS     r1,r0,#26
0000b4  d04c              BEQ      |L1.336|
;;;98     					num_pixels = MIN(6,glyph_width - x_bm);
;;;99     					TFT_Write_Rectangle_Pixel(&fg, num_pixels);
;;;100    				} else if ((bitmap_byte & 0x1f) == 0) {
0000b6  06e9              LSLS     r1,r5,#27
0000b8  d056              BEQ      |L1.360|
;;;101    					num_pixels = MIN(5,glyph_width - x_bm);
;;;102    					TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;103    				} else if ((bitmap_byte & 0x1f) == 0x1f) {
0000ba  06c1              LSLS     r1,r0,#27
0000bc  d05d              BEQ      |L1.378|
;;;104    					num_pixels = MIN(5,glyph_width - x_bm);
;;;105    					TFT_Write_Rectangle_Pixel(&fg, num_pixels);
;;;106    				} else if ((bitmap_byte & 0x0f) == 0) {
0000be  0729              LSLS     r1,r5,#28
0000c0  d063              BEQ      |L1.394|
;;;107    					num_pixels = MIN(4,glyph_width - x_bm);
;;;108    					TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;109    				} else if ((bitmap_byte & 0x0f) == 0x0f) {
0000c2  0700              LSLS     r0,r0,#28
0000c4  d069              BEQ      |L1.410|
0000c6  e033              B        |L1.304|
                  |L1.200|
0000c8  1b35              SUBS     r5,r6,r4              ;78
0000ca  2d08              CMP      r5,#8                 ;78
0000cc  dd00              BLE      |L1.208|
0000ce  2508              MOVS     r5,#8                 ;78
                  |L1.208|
0000d0  4629              MOV      r1,r5                 ;79
0000d2  4860              LDR      r0,|L1.596|
0000d4  f7fffffe          BL       TFT_Write_Rectangle_Pixel
0000d8  1960              ADDS     r0,r4,r5              ;80
0000da  b2c4              UXTB     r4,r0                 ;80
0000dc  e071              B        |L1.450|
                  |L1.222|
0000de  1b35              SUBS     r5,r6,r4              ;82
0000e0  2d08              CMP      r5,#8                 ;82
0000e2  dd00              BLE      |L1.230|
0000e4  2508              MOVS     r5,#8                 ;82
                  |L1.230|
0000e6  4629              MOV      r1,r5                 ;83
0000e8  4859              LDR      r0,|L1.592|
0000ea  f7fffffe          BL       TFT_Write_Rectangle_Pixel
0000ee  1960              ADDS     r0,r4,r5              ;84
0000f0  b2c4              UXTB     r4,r0                 ;84
0000f2  e066              B        |L1.450|
                  |L1.244|
0000f4  1b30              SUBS     r0,r6,r4              ;89
0000f6  2807              CMP      r0,#7                 ;89
0000f8  dd26              BLE      |L1.328|
0000fa  2007              MOVS     r0,#7                 ;89
0000fc  4601              MOV      r1,r0                 ;90
0000fe  9000              STR      r0,[sp,#0]            ;90
000100  4854              LDR      r0,|L1.596|
000102  e006              B        |L1.274|
                  |L1.260|
000104  1b30              SUBS     r0,r6,r4              ;92
000106  2807              CMP      r0,#7                 ;92
000108  dd2a              BLE      |L1.352|
00010a  2007              MOVS     r0,#7                 ;92
00010c  4601              MOV      r1,r0                 ;93
00010e  9000              STR      r0,[sp,#0]            ;93
000110  484f              LDR      r0,|L1.592|
                  |L1.274|
000112  f7fffffe          BL       TFT_Write_Rectangle_Pixel
000116  e004              B        |L1.290|
                  |L1.280|
000118  f7fffffe          BL       TFT_Write_Rectangle_Pixel
;;;110    					num_pixels = MIN(4,glyph_width - x_bm);
;;;111    					TFT_Write_Rectangle_Pixel(&fg, num_pixels);
;;;112    				}
;;;113    				if (num_pixels > 0) {
00011c  9800              LDR      r0,[sp,#0]
00011e  2800              CMP      r0,#0
000120  d006              BEQ      |L1.304|
                  |L1.290|
;;;114    					x_bm += num_pixels;	
000122  9800              LDR      r0,[sp,#0]
;;;115    					col += num_pixels;
;;;116    					bitmap_byte >>= num_pixels;
000124  9f00              LDR      r7,[sp,#0]
000126  1820              ADDS     r0,r4,r0              ;114
000128  40fd              LSRS     r5,r5,r7
00012a  b2c4              UXTB     r4,r0                 ;114
;;;117    				}
;;;118    				for (; col < 8; col++) {
00012c  2f08              CMP      r7,#8
00012e  d248              BCS      |L1.450|
                  |L1.304|
;;;119    					if (bitmap_byte & 0x01) // if pixel is to be set
000130  07e8              LSLS     r0,r5,#31
000132  d03a              BEQ      |L1.426|
;;;120    						pixel_color = &fg;
000134  4846              LDR      r0,|L1.592|
000136  e039              B        |L1.428|
                  |L1.312|
000138  1b30              SUBS     r0,r6,r4              ;95
00013a  2806              CMP      r0,#6                 ;95
00013c  dd04              BLE      |L1.328|
00013e  2006              MOVS     r0,#6                 ;95
000140  4601              MOV      r1,r0                 ;96
000142  9000              STR      r0,[sp,#0]            ;96
000144  4843              LDR      r0,|L1.596|
000146  e7e4              B        |L1.274|
                  |L1.328|
000148  4601              MOV      r1,r0                 ;96
00014a  9000              STR      r0,[sp,#0]            ;96
00014c  4841              LDR      r0,|L1.596|
00014e  e7e3              B        |L1.280|
                  |L1.336|
000150  1b30              SUBS     r0,r6,r4              ;98
000152  2806              CMP      r0,#6                 ;98
000154  dd04              BLE      |L1.352|
000156  2006              MOVS     r0,#6                 ;98
000158  4601              MOV      r1,r0                 ;99
00015a  9000              STR      r0,[sp,#0]            ;99
00015c  483c              LDR      r0,|L1.592|
00015e  e7d8              B        |L1.274|
                  |L1.352|
000160  4601              MOV      r1,r0                 ;99
000162  9000              STR      r0,[sp,#0]            ;99
000164  483a              LDR      r0,|L1.592|
000166  e7d7              B        |L1.280|
                  |L1.360|
000168  1b30              SUBS     r0,r6,r4              ;101
00016a  2805              CMP      r0,#5                 ;101
00016c  ddec              BLE      |L1.328|
00016e  2005              MOVS     r0,#5                 ;101
000170  4601              MOV      r1,r0                 ;102
000172  9000              STR      r0,[sp,#0]            ;102
000174  4837              LDR      r0,|L1.596|
000176  e7cc              B        |L1.274|
                  |L1.376|
000178  e038              B        |L1.492|
                  |L1.378|
00017a  1b30              SUBS     r0,r6,r4              ;104
00017c  2805              CMP      r0,#5                 ;104
00017e  ddef              BLE      |L1.352|
000180  2005              MOVS     r0,#5                 ;104
000182  4601              MOV      r1,r0                 ;105
000184  9000              STR      r0,[sp,#0]            ;105
000186  4832              LDR      r0,|L1.592|
000188  e7c3              B        |L1.274|
                  |L1.394|
00018a  1b30              SUBS     r0,r6,r4              ;107
00018c  2804              CMP      r0,#4                 ;107
00018e  dddb              BLE      |L1.328|
000190  2004              MOVS     r0,#4                 ;107
000192  4601              MOV      r1,r0                 ;108
000194  9000              STR      r0,[sp,#0]            ;108
000196  482f              LDR      r0,|L1.596|
000198  e7bb              B        |L1.274|
                  |L1.410|
00019a  1b30              SUBS     r0,r6,r4              ;110
00019c  2804              CMP      r0,#4                 ;110
00019e  dddf              BLE      |L1.352|
0001a0  2004              MOVS     r0,#4                 ;110
0001a2  4601              MOV      r1,r0                 ;111
0001a4  9000              STR      r0,[sp,#0]            ;111
0001a6  482a              LDR      r0,|L1.592|
0001a8  e7b3              B        |L1.274|
                  |L1.426|
;;;121    					else
;;;122    						pixel_color = &bg;
0001aa  482a              LDR      r0,|L1.596|
                  |L1.428|
;;;123    					TFT_Write_Rectangle_Pixel(pixel_color, 1);
0001ac  2101              MOVS     r1,#1
0001ae  f7fffffe          BL       TFT_Write_Rectangle_Pixel
;;;124    					bitmap_byte >>= 1;
0001b2  1c64              ADDS     r4,r4,#1
0001b4  086d              LSRS     r5,r5,#1
;;;125    					x_bm++;
0001b6  b2e4              UXTB     r4,r4
;;;126    					if (x_bm >= glyph_width)
0001b8  42b4              CMP      r4,r6
0001ba  d202              BCS      |L1.450|
0001bc  1c7f              ADDS     r7,r7,#1
0001be  2f08              CMP      r7,#8                 ;118
0001c0  d3b6              BCC      |L1.304|
                  |L1.450|
;;;127    						break;
;;;128    				}
;;;129    			}
;;;130    			glyph_data++;
0001c2  9801              LDR      r0,[sp,#4]
0001c4  1c40              ADDS     r0,r0,#1
;;;131    		} while (x_bm < glyph_width);
0001c6  9001              STR      r0,[sp,#4]
0001c8  42b4              CMP      r4,r6
0001ca  d200              BCS      |L1.462|
0001cc  e763              B        |L1.150|
                  |L1.462|
;;;132    		if (x_bm < CHAR_WIDTH) {
0001ce  4d23              LDR      r5,|L1.604|
0001d0  7828              LDRB     r0,[r5,#0]  ; G_TFT_char_width
0001d2  4284              CMP      r4,r0
0001d4  d203              BCS      |L1.478|
;;;133    			// fill in rest of cell with background color for narrow glyphs
;;;134    			TFT_Write_Rectangle_Pixel(&bg, CHAR_WIDTH - x_bm);	
0001d6  1b01              SUBS     r1,r0,r4
0001d8  1d68              ADDS     r0,r5,#5
0001da  f7fffffe          BL       TFT_Write_Rectangle_Pixel
                  |L1.478|
0001de  9804              LDR      r0,[sp,#0x10]         ;73
0001e0  1c40              ADDS     r0,r0,#1              ;73
0001e2  9004              STR      r0,[sp,#0x10]         ;73
0001e4  7869              LDRB     r1,[r5,#1]            ;73  ; G_TFT_char_height
0001e6  4288              CMP      r0,r1                 ;73
0001e8  d200              BCS      |L1.492|
0001ea  e753              B        |L1.148|
                  |L1.492|
;;;135    		}
;;;136    	}
;;;137    }
0001ec  b005              ADD      sp,sp,#0x14
0001ee  bdf0              POP      {r4-r7,pc}
;;;138    
                          ENDP

                  TFT_Text_PrintStr PROC
;;;139    void TFT_Text_PrintStr(PT_T * pos, char * str) {
0001f0  b570              PUSH     {r4-r6,lr}
0001f2  4605              MOV      r5,r0
;;;140    	while (*str) {
0001f4  7808              LDRB     r0,[r1,#0]
0001f6  460c              MOV      r4,r1                 ;139
0001f8  2800              CMP      r0,#0
0001fa  d00c              BEQ      |L1.534|
;;;141    		TFT_Text_PrintChar(pos, *str);
;;;142    		str++;
;;;143    		pos->X += CHAR_WIDTH; // forces monospacing for fonts
0001fc  4e17              LDR      r6,|L1.604|
                  |L1.510|
0001fe  b2c1              UXTB     r1,r0                 ;141
000200  4628              MOV      r0,r5                 ;141
000202  f7fffffe          BL       TFT_Text_PrintChar
000206  7831              LDRB     r1,[r6,#0]  ; G_TFT_char_width
000208  6828              LDR      r0,[r5,#0]
00020a  1840              ADDS     r0,r0,r1
00020c  6028              STR      r0,[r5,#0]            ;140
00020e  7860              LDRB     r0,[r4,#1]            ;140
000210  1c64              ADDS     r4,r4,#1              ;140
000212  2800              CMP      r0,#0                 ;140
000214  d1f3              BNE      |L1.510|
                  |L1.534|
;;;144    	}
;;;145    }
000216  bd70              POP      {r4-r6,pc}
;;;146    
                          ENDP

                  TFT_Text_PrintStr_RC PROC
;;;147    void TFT_Text_PrintStr_RC( uint8_t  row, uint8_t  col, char  *str )
000218  b530              PUSH     {r4,r5,lr}
;;;148    {
;;;149    	PT_T pos;
;;;150    	pos.X = COL_TO_X( col );
00021a  4d10              LDR      r5,|L1.604|
00021c  4614              MOV      r4,r2                 ;148
00021e  782a              LDRB     r2,[r5,#0]  ; G_TFT_char_width
000220  b083              SUB      sp,sp,#0xc            ;148
000222  4351              MULS     r1,r2,r1
;;;151    	pos.Y = ROW_TO_Y( row );
000224  9100              STR      r1,[sp,#0]
000226  7869              LDRB     r1,[r5,#1]  ; G_TFT_char_height
000228  4348              MULS     r0,r1,r0
;;;152    	while( *str )
00022a  9001              STR      r0,[sp,#4]
00022c  7820              LDRB     r0,[r4,#0]
00022e  2800              CMP      r0,#0
000230  d00b              BEQ      |L1.586|
                  |L1.562|
;;;153    	{
;;;154    		TFT_Text_PrintChar( &pos, *str );
000232  b2c1              UXTB     r1,r0
000234  4668              MOV      r0,sp
000236  f7fffffe          BL       TFT_Text_PrintChar
;;;155    		str++;
;;;156    		pos.X += CHAR_WIDTH;       /*     forces monospacing for fonts               */
00023a  7828              LDRB     r0,[r5,#0]  ; G_TFT_char_width
00023c  9900              LDR      r1,[sp,#0]
00023e  1808              ADDS     r0,r1,r0
000240  9000              STR      r0,[sp,#0]            ;152
000242  7860              LDRB     r0,[r4,#1]            ;152
000244  1c64              ADDS     r4,r4,#1              ;152
000246  2800              CMP      r0,#0                 ;152
000248  d1f3              BNE      |L1.562|
                  |L1.586|
;;;157    	}
;;;158    }
00024a  b003              ADD      sp,sp,#0xc
00024c  bd30              POP      {r4,r5,pc}
                          ENDP

00024e  0000              DCW      0x0000
                  |L1.592|
                          DCD      ||area_number.7||+0x2
                  |L1.596|
                          DCD      ||area_number.7||+0x5
                  |L1.600|
                          DCD      Lucida_Console12x19
                  |L1.604|
                          DCD      ||area_number.7||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  char_widths
000000  080c14            DCB      0x08,0x0c,0x14

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.constdata||
                  char_heights
000000  0d131f            DCB      0x0d,0x13,0x1f

                          AREA ||.data||, DATA, ALIGN=2

                  fonts
                          DCD      Lucida_Console8x13
                          DCD      Lucida_Console12x19

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  G_TFT_char_width
000000  00                DCB      0x00
                  G_TFT_char_height
000001  00                DCB      0x00
                  ||fg||
000002  0000              DCB      0x00,0x00
000004  00                DCB      0x00
                  ||bg||
000005  000000            DCB      0x00,0x00,0x00
                  font
                          DCD      0x00000000
                  font_header
                          DCD      0x00000000
                  glyph_index
                          DCD      0x00000000
