; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\dma.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\dma.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\dma.crf src\DMA.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;13     
;;;14     void DMA_Init(void) {
000000  4833              LDR      r0,|L1.208|
;;;15     	SIM->SCGC7 |= SIM_SCGC7_DMA_MASK;
000002  6801              LDR      r1,[r0,#0]
000004  1582              ASRS     r2,r0,#22
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;16     	SIM->SCGC6 |= SIM_SCGC6_DMAMUX_MASK;
00000a  4832              LDR      r0,|L1.212|
00000c  6bc1              LDR      r1,[r0,#0x3c]
00000e  2202              MOVS     r2,#2
000010  4311              ORRS     r1,r1,r2
000012  63c1              STR      r1,[r0,#0x3c]
;;;17     }
000014  4770              BX       lr
;;;18     
                          ENDP

                  Configure_DMA_For_Playback PROC
;;;19     void Configure_DMA_For_Playback(uint16_t * source, uint32_t count, uint32_t num_playbacks) {
000016  b410              PUSH     {r4}
;;;20     	
;;;21     	// Disable DMA channel in order to allow changes
;;;22     	DMAMUX0->CHCFG[0] = 0;
000018  4c2f              LDR      r4,|L1.216|
00001a  2300              MOVS     r3,#0
00001c  7023              STRB     r3,[r4,#0]
;;;23     
;;;24     	Reload_DMA_Source = source;
00001e  4b2f              LDR      r3,|L1.220|
;;;25     	Reload_DMA_Byte_Count = count*2;
000020  6018              STR      r0,[r3,#0]  ; Reload_DMA_Source
000022  0048              LSLS     r0,r1,#1
;;;26     	DMA_Playback_Count = num_playbacks;
;;;27     	
;;;28     	// Generate DMA interrupt when done
;;;29     	// Increment source, transfer words (16 bits)
;;;30     	// Enable peripheral request
;;;31     	DMA0->DMA[0].DCR = DMA_DCR_EINT_MASK | DMA_DCR_SINC_MASK | 
000024  609a              STR      r2,[r3,#8]  ; DMA_Playback_Count
000026  6058              STR      r0,[r3,#4]  ; Reload_DMA_Byte_Count
000028  492e              LDR      r1,|L1.228|
00002a  482d              LDR      r0,|L1.224|
00002c  60c8              STR      r0,[r1,#0xc]
00002e  482e              LDR      r0,|L1.232|
000030  6801              LDR      r1,[r0,#0]
000032  0a09              LSRS     r1,r1,#8
000034  0209              LSLS     r1,r1,#8
000036  6001              STR      r1,[r0,#0]
000038  492c              LDR      r1,|L1.236|
00003a  2001              MOVS     r0,#1
00003c  6008              STR      r0,[r1,#0]
00003e  492c              LDR      r1,|L1.240|
000040  6008              STR      r0,[r1,#0]
;;;32     											DMA_DCR_SSIZE(2) | DMA_DCR_DSIZE(2) |
;;;33     											DMA_DCR_ERQ_MASK | DMA_DCR_CS_MASK;
;;;34     
;;;35     	
;;;36     	// Configure NVIC for DMA ISR
;;;37     	NVIC_SetPriority(DMA0_IRQn, 128); // 0, 64, 128 or 192
;;;38     	NVIC_ClearPendingIRQ(DMA0_IRQn); 
;;;39     	NVIC_EnableIRQ(DMA0_IRQn);	
;;;40     
;;;41     	// Enable DMA MUX channel without periodic triggering
;;;42     	// select TPM0 overflow as trigger
;;;43     	DMAMUX0->CHCFG[0] = DMAMUX_CHCFG_SOURCE(54);   
000042  2036              MOVS     r0,#0x36
000044  7020              STRB     r0,[r4,#0]
;;;44     }
000046  bc10              POP      {r4}
000048  4770              BX       lr
;;;45     
                          ENDP

                  Start_DMA_Playback PROC
;;;46     void Start_DMA_Playback() {
00004a  b510              PUSH     {r4,lr}
;;;47     	
;;;48     #if 0 // old demo code
;;;49     	if (DMA_Playback_Count == 0)
;;;50     		return;
;;;51     #endif
;;;52     
;;;53     	// Select TPM0 as trigger for DMA
;;;54     	DMAMUX0->CHCFG[0] = DMAMUX_CHCFG_SOURCE(54);   
00004c  4922              LDR      r1,|L1.216|
00004e  2036              MOVS     r0,#0x36
000050  7008              STRB     r0,[r1,#0]
;;;55     
;;;56     	// initialize source and destination pointers
;;;57     	DMA0->DMA[0].SAR = DMA_SAR_SAR((uint32_t) Reload_DMA_Source);
000052  4a22              LDR      r2,|L1.220|
000054  4823              LDR      r0,|L1.228|
000056  6813              LDR      r3,[r2,#0]  ; Reload_DMA_Source
000058  6003              STR      r3,[r0,#0]
;;;58     	DMA0->DMA[0].DAR = DMA_DAR_DAR((uint32_t) (&(DAC0->DAT[0])));
00005a  4b26              LDR      r3,|L1.244|
00005c  6043              STR      r3,[r0,#4]
;;;59     	
;;;60     	// byte count
;;;61     	DMA0->DMA[0].DSR_BCR = DMA_DSR_BCR_BCR(Reload_DMA_Byte_Count);
00005e  6852              LDR      r2,[r2,#4]  ; Reload_DMA_Byte_Count
000060  0212              LSLS     r2,r2,#8
000062  0a12              LSRS     r2,r2,#8
000064  6082              STR      r2,[r0,#8]
;;;62     	
;;;63     	// verify done flag is cleared
;;;64     	DMA0->DMA[0].DSR_BCR &= ~DMA_DSR_BCR_DONE_MASK; 
000066  6882              LDR      r2,[r0,#8]
000068  2301              MOVS     r3,#1
00006a  061b              LSLS     r3,r3,#24
00006c  439a              BICS     r2,r2,r3
00006e  6082              STR      r2,[r0,#8]
;;;65     	
;;;66     	// Enable DMA
;;;67     	DMAMUX0->CHCFG[0] |= DMAMUX_CHCFG_ENBL_MASK;
000070  7808              LDRB     r0,[r1,#0]
000072  2280              MOVS     r2,#0x80
000074  4310              ORRS     r0,r0,r2
000076  7008              STRB     r0,[r1,#0]
;;;68     
;;;69     	// start the timer running
;;;70     	TPM0_Start();
000078  f7fffffe          BL       TPM0_Start
;;;71     }
00007c  bd10              POP      {r4,pc}
;;;72     
                          ENDP

                  DMA0_IRQHandler PROC
;;;73     void DMA0_IRQHandler(void) {
00007e  b5f8              PUSH     {r3-r7,lr}
;;;74     	// Set debug signal
;;;75     	PTB->PSOR = MASK(DEBUG_I0_POS);
000080  25ff              MOVS     r5,#0xff
000082  4e1d              LDR      r6,|L1.248|
000084  3501              ADDS     r5,#1
000086  6075              STR      r5,[r6,#4]
000088  4918              LDR      r1,|L1.236|
00008a  2001              MOVS     r0,#1
00008c  6008              STR      r0,[r1,#0]
;;;76     
;;;77     	NVIC_ClearPendingIRQ(DMA0_IRQn);
;;;78     	// Clear done flag 
;;;79     	DMA0->DMA[0].DSR_BCR |= DMA_DSR_BCR_DONE_MASK; 
00008e  4c15              LDR      r4,|L1.228|
000090  68a0              LDR      r0,[r4,#8]
000092  042f              LSLS     r7,r5,#16
000094  4338              ORRS     r0,r0,r7
000096  60a0              STR      r0,[r4,#8]
;;;80     
;;;81     	// Signal event requesting source buffer refill
;;;82     	isr_evt_set(EV_REFILL_SOUND, t_Refill_Sound_Buffer);
000098  4818              LDR      r0,|L1.252|
00009a  6801              LDR      r1,[r0,#0]  ; t_Refill_Sound_Buffer
00009c  2001              MOVS     r0,#1
00009e  f7fffffe          BL       isr_evt_set
0000a2  480d              LDR      r0,|L1.216|
0000a4  2136              MOVS     r1,#0x36
0000a6  7001              STRB     r1,[r0,#0]
0000a8  490c              LDR      r1,|L1.220|
0000aa  680a              LDR      r2,[r1,#0]  ; Reload_DMA_Source
0000ac  6022              STR      r2,[r4,#0]
0000ae  4a11              LDR      r2,|L1.244|
0000b0  6062              STR      r2,[r4,#4]
0000b2  6849              LDR      r1,[r1,#4]  ; Reload_DMA_Byte_Count
0000b4  0209              LSLS     r1,r1,#8
0000b6  0a09              LSRS     r1,r1,#8
0000b8  60a1              STR      r1,[r4,#8]
0000ba  68a1              LDR      r1,[r4,#8]
0000bc  43b9              BICS     r1,r1,r7
0000be  60a1              STR      r1,[r4,#8]
0000c0  7801              LDRB     r1,[r0,#0]
0000c2  2280              MOVS     r2,#0x80
0000c4  4311              ORRS     r1,r1,r2
0000c6  7001              STRB     r1,[r0,#0]
0000c8  f7fffffe          BL       TPM0_Start
;;;83     	// Start playback again
;;;84     	Start_DMA_Playback();
;;;85     	
;;;86     	// Clear debug signal
;;;87     	PTB->PCOR = MASK(DEBUG_I0_POS);
0000cc  60b5              STR      r5,[r6,#8]
;;;88     }
0000ce  bdf8              POP      {r3-r7,pc}
;;;89     // *******************************ARM University Program Copyright © ARM Ltd 2013*************************************   
                          ENDP

                  |L1.208|
                          DCD      0x40048040
                  |L1.212|
                          DCD      0x40048000
                  |L1.216|
                          DCD      0x40021000
                  |L1.220|
                          DCD      ||.data||
                  |L1.224|
                          DCD      0xe0640000
                  |L1.228|
                          DCD      0x40008100
                  |L1.232|
                          DCD      0xe000e400
                  |L1.236|
                          DCD      0xe000e280
                  |L1.240|
                          DCD      0xe000e100
                  |L1.244|
                          DCD      0x4003f000
                  |L1.248|
                          DCD      0x400ff040
                  |L1.252|
                          DCD      t_Refill_Sound_Buffer

                          AREA ||.data||, DATA, ALIGN=2

                  Reload_DMA_Source
                          DCD      0x00000000
                  Reload_DMA_Byte_Count
                          DCD      0x00000000
                  DMA_Playback_Count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\DMA.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_DMA_c_bbeba4b5____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_DMA_c_bbeba4b5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_DMA_c_bbeba4b5____REVSH|
#line 144
|__asm___5_DMA_c_bbeba4b5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
