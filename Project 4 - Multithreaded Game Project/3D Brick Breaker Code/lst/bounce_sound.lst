L 1 "src\bounce_sound.c"
N// Generated using Python script by Michael Meli
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5050106
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX INT64_MAX
N#else
N#define UINTPTR_MAX INT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 4 "src\bounce_sound.c" 2
N
N#define BLIP_SOUND_LEN (3507)
N
Nconst uint8_t blip_sound[] = { 161, 161, 161, 161, 161, 106, 94, 94, 94, 94, 132, 161, 161, 161, 161, 140, 94, 94, 94, 94, 98, 161, 161, 161, 161, 160,
N  107, 95, 95, 95, 95, 132, 160, 160, 160, 160, 140, 95, 95, 95, 95, 99, 160, 160, 160, 160, 160, 107, 95, 95, 95, 96, 131, 159, 159, 159, 159,
N  139, 96, 96, 96, 96, 100, 159, 159, 159, 159, 159, 108, 96, 96, 96, 96, 131, 159, 159, 159, 158, 139, 97, 97, 97, 97, 101, 158, 158, 158, 158,
N  158, 108, 97, 97, 97, 97, 131, 158, 158, 158, 158, 139, 97, 97, 97, 98, 101, 157, 157, 157, 157, 157, 109, 98, 98, 98, 98, 131, 157, 157, 157,
N  157, 139, 98, 98, 98, 98, 102, 157, 157, 157, 157, 156, 109, 99, 99, 99, 99, 131, 156, 156, 156, 156, 138, 99, 99, 99, 99, 103, 156, 156, 156,
N  156, 156, 110, 99, 99, 99, 100, 131, 155, 155, 155, 155, 138, 100, 100, 100, 100, 103, 155, 155, 155, 155, 155, 110, 100, 100, 100, 100, 131, 155, 155,
N  155, 154, 138, 101, 101, 101, 101, 104, 154, 154, 154, 154, 154, 111, 101, 101, 101, 101, 131, 154, 154, 154, 154, 137, 101, 101, 101, 102, 105, 153, 153,
N  153, 153, 153, 111, 102, 102, 102, 102, 131, 153, 153, 153, 153, 137, 102, 102, 102, 102, 106, 153, 153, 153, 152, 152, 112, 103, 103, 103, 103, 131, 152,
N  152, 152, 152, 137, 103, 103, 103, 103, 106, 152, 152, 152, 152, 152, 112, 103, 103, 104, 104, 130, 151, 151, 151, 151, 136, 104, 104, 104, 104, 107, 151,
N  151, 151, 151, 151, 113, 104, 104, 104, 104, 130, 151, 151, 150, 150, 136, 105, 105, 105, 105, 108, 150, 150, 150, 150, 150, 113, 105, 105, 105, 105, 130,
N  150, 150, 150, 150, 136, 105, 105, 106, 106, 108, 149, 149, 149, 149, 149, 114, 106, 106, 106, 106, 130, 149, 149, 149, 149, 135, 106, 106, 106, 106, 109,
N  149, 149, 149, 148, 148, 114, 107, 107, 107, 107, 130, 148, 148, 148, 148, 135, 107, 107, 107, 107, 110, 148, 148, 148, 148, 148, 115, 107, 107, 108, 108,
N  130, 147, 147, 147, 147, 135, 108, 108, 108, 108, 110, 147, 147, 147, 147, 147, 115, 108, 108, 108, 108, 130, 147, 147, 146, 146, 135, 109, 109, 109, 109,
N  111, 146, 146, 146, 146, 146, 116, 109, 109, 109, 109, 130, 146, 146, 146, 146, 134, 109, 109, 110, 110, 112, 145, 145, 145, 145, 145, 116, 110, 110, 110,
N  110, 130, 145, 145, 145, 145, 134, 110, 110, 110, 110, 113, 145, 145, 144, 144, 144, 117, 111, 111, 111, 111, 130, 144, 144, 144, 144, 134, 111, 111, 111,
N  111, 113, 144, 144, 144, 144, 144, 117, 111, 112, 112, 112, 129, 143, 143, 143, 143, 133, 112, 112, 112, 112, 114, 143, 143, 143, 143, 143, 118, 112, 112,
N  112, 112, 129, 143, 143, 143, 143, 133, 112, 112, 112, 112, 114, 143, 143, 143, 143, 143, 118, 112, 112, 112, 112, 129, 143, 143, 143, 143, 133, 112, 112,
N  112, 112, 114, 143, 143, 143, 143, 143, 118, 112, 112, 112, 112, 129, 143, 143, 143, 143, 133, 112, 112, 112, 112, 114, 143, 143, 143, 143, 143, 118, 112,
N  112, 112, 112, 129, 143, 143, 143, 143, 133, 112, 112, 112, 112, 114, 143, 143, 143, 143, 143, 118, 112, 112, 112, 112, 129, 143, 143, 143, 143, 133, 112,
N  112, 112, 112, 114, 143, 143, 143, 143, 143, 118, 112, 112, 112, 112, 129, 143, 143, 143, 143, 133, 112, 112, 112, 112, 114, 143, 143, 143, 143, 143, 118,
N  112, 112, 112, 112, 129, 143, 143, 143, 143, 133, 112, 112, 112, 112, 114, 143, 143, 143, 143, 143, 118, 112, 112, 112, 112, 129, 142, 142, 142, 142, 133,
N  113, 113, 113, 113, 114, 142, 142, 142, 142, 142, 118, 113, 113, 113, 113, 129, 142, 142, 142, 142, 133, 113, 113, 113, 113, 115, 142, 142, 142, 142, 142,
N  118, 113, 113, 113, 113, 129, 142, 142, 142, 142, 133, 113, 113, 113, 113, 115, 142, 142, 142, 142, 142, 118, 113, 113, 113, 113, 129, 142, 142, 142, 142,
N  133, 113, 113, 113, 113, 115, 142, 142, 142, 142, 142, 118, 113, 113, 113, 113, 129, 142, 142, 142, 142, 133, 113, 113, 113, 113, 115, 142, 142, 142, 142,
N  142, 118, 113, 113, 113, 113, 129, 142, 142, 142, 142, 133, 113, 113, 113, 113, 115, 142, 142, 142, 142, 142, 119, 113, 113, 113, 113, 129, 142, 142, 142,
N  142, 133, 113, 113, 113, 113, 115, 142, 142, 142, 142, 142, 119, 113, 113, 113, 113, 129, 142, 142, 142, 142, 133, 113, 113, 113, 113, 115, 142, 142, 142,
N  142, 142, 119, 113, 113, 113, 113, 129, 142, 142, 142, 142, 133, 113, 113, 113, 113, 115, 142, 142, 142, 142, 142, 119, 113, 113, 113, 113, 129, 142, 141,
N  141, 141, 133, 114, 114, 114, 114, 115, 141, 141, 141, 141, 141, 119, 114, 114, 114, 114, 129, 141, 141, 141, 141, 133, 114, 114, 114, 114, 115, 141, 141,
N  141, 141, 141, 119, 114, 114, 114, 114, 129, 141, 141, 141, 141, 133, 114, 114, 114, 114, 115, 141, 141, 141, 141, 141, 119, 114, 114, 114, 114, 129, 141,
N  141, 141, 141, 133, 114, 114, 114, 114, 116, 141, 141, 141, 141, 141, 119, 114, 114, 114, 114, 129, 141, 141, 141, 141, 133, 114, 114, 114, 114, 116, 141,
N  141, 141, 141, 141, 119, 114, 114, 114, 114, 129, 141, 141, 141, 141, 133, 114, 114, 114, 114, 116, 141, 141, 141, 141, 141, 119, 114, 114, 114, 114, 129,
N  141, 141, 141, 141, 132, 114, 114, 114, 114, 116, 141, 141, 141, 141, 141, 119, 114, 114, 114, 114, 129, 141, 141, 141, 141, 132, 114, 114, 114, 114, 116,
N  141, 141, 141, 141, 141, 119, 114, 114, 114, 114, 129, 141, 141, 141, 141, 132, 114, 114, 114, 114, 116, 141, 141, 141, 141, 141, 119, 114, 114, 114, 114,
N  129, 141, 141, 141, 141, 132, 115, 115, 115, 115, 116, 140, 140, 140, 140, 140, 119, 115, 115, 115, 115, 129, 140, 140, 140, 140, 132, 115, 115, 115, 115,
N  116, 140, 140, 140, 140, 140, 119, 115, 115, 115, 115, 129, 140, 140, 140, 140, 132, 115, 115, 115, 115, 116, 140, 140, 140, 140, 140, 120, 115, 115, 115,
N  115, 129, 140, 140, 140, 140, 132, 115, 115, 115, 115, 116, 140, 140, 140, 140, 140, 120, 115, 115, 115, 115, 129, 140, 140, 140, 140, 132, 115, 115, 115,
N  115, 117, 140, 140, 140, 140, 140, 120, 115, 115, 115, 115, 129, 140, 140, 140, 140, 132, 115, 115, 115, 115, 117, 140, 140, 140, 140, 140, 120, 115, 115,
N  115, 115, 129, 140, 140, 140, 140, 132, 115, 115, 115, 115, 117, 140, 140, 140, 140, 140, 120, 115, 115, 115, 115, 129, 140, 140, 140, 140, 132, 115, 115,
N  115, 115, 117, 140, 140, 140, 140, 140, 120, 115, 115, 115, 115, 129, 140, 140, 140, 140, 132, 115, 115, 115, 115, 117, 140, 140, 140, 140, 140, 120, 115,
N  115, 115, 115, 129, 140, 140, 140, 140, 132, 115, 116, 116, 116, 117, 139, 139, 139, 139, 139, 120, 116, 116, 116, 116, 129, 139, 139, 139, 139, 132, 116,
N  116, 116, 116, 117, 139, 139, 139, 139, 139, 120, 116, 116, 116, 116, 129, 139, 139, 139, 139, 132, 116, 116, 116, 116, 117, 139, 139, 139, 139, 139, 120,
N  116, 116, 116, 116, 129, 139, 139, 139, 139, 132, 116, 116, 116, 116, 117, 139, 139, 139, 139, 139, 120, 116, 116, 116, 116, 129, 139, 139, 139, 139, 132,
N  116, 116, 116, 116, 117, 139, 139, 139, 139, 139, 120, 116, 116, 116, 116, 129, 139, 139, 139, 139, 132, 116, 116, 116, 116, 117, 139, 139, 139, 139, 139,
N  120, 116, 116, 116, 116, 129, 139, 139, 139, 139, 132, 116, 116, 116, 116, 118, 139, 139, 139, 139, 139, 120, 116, 116, 116, 116, 129, 139, 139, 139, 139,
N  132, 116, 116, 116, 116, 118, 139, 139, 139, 139, 139, 121, 116, 116, 116, 116, 129, 139, 139, 139, 139, 132, 116, 116, 116, 116, 118, 139, 139, 139, 139,
N  139, 121, 116, 116, 116, 116, 129, 139, 139, 139, 139, 132, 116, 116, 116, 117, 118, 138, 138, 138, 138, 138, 121, 117, 117, 117, 117, 129, 138, 138, 138,
N  138, 132, 117, 117, 117, 117, 118, 138, 138, 138, 138, 138, 121, 117, 117, 117, 117, 129, 138, 138, 138, 138, 132, 117, 117, 117, 117, 118, 138, 138, 138,
N  138, 138, 121, 117, 117, 117, 117, 129, 138, 138, 138, 138, 132, 117, 117, 117, 117, 118, 138, 138, 138, 138, 138, 121, 117, 117, 117, 117, 129, 138, 138,
N  138, 138, 131, 117, 117, 117, 117, 118, 138, 138, 138, 138, 138, 121, 117, 117, 117, 117, 129, 138, 138, 138, 138, 131, 117, 117, 117, 117, 118, 138, 138,
N  138, 138, 138, 121, 117, 117, 117, 117, 129, 138, 138, 138, 138, 131, 117, 117, 117, 117, 118, 138, 138, 138, 138, 138, 121, 117, 117, 117, 117, 129, 138,
N  138, 138, 138, 131, 117, 117, 117, 117, 119, 138, 138, 138, 138, 138, 121, 117, 117, 117, 117, 129, 138, 138, 138, 138, 131, 117, 117, 117, 117, 119, 138,
N  138, 138, 138, 138, 121, 117, 117, 117, 117, 129, 138, 138, 138, 138, 131, 117, 117, 117, 117, 119, 137, 137, 137, 137, 137, 121, 118, 118, 118, 118, 129,
N  137, 137, 137, 137, 131, 118, 118, 118, 118, 119, 137, 137, 137, 137, 137, 121, 118, 118, 118, 118, 129, 137, 137, 137, 137, 131, 118, 118, 118, 118, 119,
N  137, 137, 137, 137, 137, 121, 118, 118, 118, 118, 129, 137, 137, 137, 137, 131, 118, 118, 118, 118, 119, 137, 137, 137, 137, 137, 121, 118, 118, 118, 118,
N  129, 137, 137, 137, 137, 131, 118, 118, 118, 118, 119, 137, 137, 137, 137, 137, 122, 118, 118, 118, 118, 129, 137, 137, 137, 137, 131, 118, 118, 118, 118,
N  119, 137, 137, 137, 137, 137, 122, 118, 118, 118, 118, 129, 137, 137, 137, 137, 131, 118, 118, 118, 118, 119, 137, 137, 137, 137, 137, 122, 118, 118, 118,
N  118, 129, 137, 137, 137, 137, 131, 118, 118, 118, 118, 119, 137, 137, 137, 137, 137, 122, 118, 118, 118, 118, 129, 137, 137, 137, 137, 131, 118, 118, 118,
N  118, 120, 137, 137, 137, 137, 137, 122, 118, 118, 118, 118, 129, 137, 137, 137, 137, 131, 118, 118, 118, 118, 120, 137, 137, 136, 136, 136, 122, 119, 119,
N  119, 119, 129, 136, 136, 136, 136, 131, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 122, 119, 119, 119, 119, 129, 136, 136, 136, 136, 131, 119, 119,
N  119, 119, 120, 136, 136, 136, 136, 136, 122, 119, 119, 119, 119, 129, 136, 136, 136, 136, 131, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 122, 119,
N  119, 119, 119, 129, 136, 136, 136, 136, 131, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 122, 119, 119, 119, 119, 129, 136, 136, 136, 136, 131, 119,
N  119, 119, 119, 120, 136, 136, 136, 136, 136, 122, 119, 119, 119, 119, 129, 136, 136, 136, 136, 131, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 122,
N  119, 119, 119, 119, 129, 136, 136, 136, 136, 131, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 122, 119, 119, 119, 119, 129, 136, 136, 136, 136, 131,
N  119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 122, 119, 119, 119, 119, 129, 136, 136, 136, 136, 131, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136,
N  123, 120, 120, 120, 120, 128, 135, 135, 135, 135, 130, 120, 120, 120, 120, 121, 135, 135, 135, 135, 135, 123, 120, 120, 120, 120, 128, 135, 135, 135, 135,
N  130, 120, 120, 120, 120, 121, 135, 135, 135, 135, 135, 123, 120, 120, 120, 120, 128, 135, 135, 135, 135, 130, 120, 120, 120, 120, 121, 135, 135, 135, 135,
N  135, 123, 120, 120, 120, 120, 128, 135, 135, 135, 135, 130, 120, 120, 120, 120, 121, 135, 135, 135, 135, 135, 123, 120, 120, 120, 120, 128, 135, 135, 135,
N  135, 130, 120, 120, 120, 120, 121, 135, 135, 135, 135, 135, 123, 120, 120, 120, 120, 128, 135, 135, 135, 135, 130, 120, 120, 120, 120, 121, 135, 135, 135,
N  135, 135, 123, 120, 120, 120, 120, 128, 135, 135, 135, 135, 130, 120, 120, 120, 120, 121, 135, 135, 135, 135, 135, 123, 120, 120, 120, 120, 128, 135, 135,
N  135, 135, 130, 120, 120, 120, 120, 121, 135, 135, 135, 135, 135, 123, 120, 120, 120, 120, 128, 135, 135, 135, 135, 130, 120, 120, 120, 120, 121, 135, 135,
N  135, 135, 135, 123, 120, 121, 121, 121, 128, 134, 134, 134, 134, 130, 121, 121, 121, 121, 121, 134, 134, 134, 134, 134, 123, 121, 121, 121, 121, 128, 134,
N  134, 134, 134, 130, 121, 121, 121, 121, 122, 134, 134, 134, 134, 134, 123, 121, 121, 121, 121, 128, 134, 134, 134, 134, 130, 121, 121, 121, 121, 122, 134,
N  134, 134, 134, 134, 123, 121, 121, 121, 121, 128, 134, 134, 134, 134, 130, 121, 121, 121, 121, 122, 134, 134, 134, 134, 134, 123, 121, 121, 121, 121, 128,
N  134, 134, 134, 134, 130, 121, 121, 121, 121, 122, 134, 134, 134, 134, 134, 123, 121, 121, 121, 121, 128, 134, 134, 134, 134, 130, 121, 121, 121, 121, 122,
N  134, 134, 134, 134, 134, 124, 121, 121, 121, 121, 128, 134, 134, 134, 134, 130, 121, 121, 121, 121, 122, 134, 134, 134, 134, 134, 124, 121, 121, 121, 121,
N  128, 134, 134, 134, 134, 130, 121, 121, 121, 121, 122, 134, 134, 134, 134, 134, 124, 121, 121, 121, 121, 128, 134, 134, 134, 134, 130, 121, 121, 121, 121,
N  122, 134, 134, 134, 134, 134, 124, 121, 121, 121, 122, 128, 133, 133, 133, 133, 130, 122, 122, 122, 122, 122, 133, 133, 133, 133, 133, 124, 122, 122, 122,
N  122, 128, 133, 133, 133, 133, 130, 122, 122, 122, 122, 122, 133, 133, 133, 133, 133, 124, 122, 122, 122, 122, 128, 133, 133, 133, 133, 130, 122, 122, 122,
N  122, 122, 133, 133, 133, 133, 133, 124, 122, 122, 122, 122, 128, 133, 133, 133, 133, 130, 122, 122, 122, 122, 123, 133, 133, 133, 133, 133, 124, 122, 122,
N  122, 122, 128, 133, 133, 133, 133, 130, 122, 122, 122, 122, 123, 133, 133, 133, 133, 133, 124, 122, 122, 122, 122, 128, 133, 133, 133, 133, 130, 122, 122,
N  122, 122, 123, 133, 133, 133, 133, 133, 124, 122, 122, 122, 122, 128, 133, 133, 133, 133, 129, 122, 122, 122, 122, 123, 133, 133, 133, 133, 133, 124, 122,
N  122, 122, 122, 128, 133, 133, 133, 133, 129, 122, 122, 122, 122, 123, 133, 133, 133, 133, 133, 124, 122, 122, 122, 122, 128, 133, 133, 133, 133, 129, 122,
N  122, 122, 122, 123, 133, 133, 133, 133, 133, 124, 122, 122, 122, 122, 128, 132, 132, 132, 132, 129, 123, 123, 123, 123, 123, 132, 132, 132, 132, 132, 124,
N  123, 123, 123, 123, 128, 132, 132, 132, 132, 129, 123, 123, 123, 123, 123, 132, 132, 132, 132, 132, 124, 123, 123, 123, 123, 128, 132, 132, 132, 132, 129,
N  123, 123, 123, 123, 123, 132, 132, 132, 132, 132, 125, 123, 123, 123, 123, 128, 132, 132, 132, 132, 129, 123, 123, 123, 123, 123, 132, 132, 132, 132, 132,
N  125, 123, 123, 123, 123, 128, 132, 132, 132, 132, 129, 123, 123, 123, 123, 124, 132, 132, 132, 132, 132, 125, 123, 123, 123, 123, 128, 132, 132, 132, 132,
N  129, 123, 123, 123, 123, 124, 132, 132, 132, 132, 132, 125, 123, 123, 123, 123, 128, 132, 132, 132, 132, 129, 123, 123, 123, 123, 124, 132, 132, 132, 132,
N  132, 125, 123, 123, 123, 123, 128, 132, 132, 132, 132, 129, 123, 123, 123, 123, 124, 132, 132, 132, 132, 132, 125, 123, 123, 123, 123, 128, 132, 132, 132,
N  132, 129, 123, 123, 123, 123, 124, 132, 132, 132, 132, 132, 125, 123, 123, 123, 123, 128, 132, 132, 131, 131, 129, 124, 124, 124, 124, 124, 131, 131, 131,
N  131, 131, 125, 124, 124, 124, 124, 128, 131, 131, 131, 131, 129, 124, 124, 124, 124, 124, 131, 131, 131, 131, 131, 125, 124, 124, 124, 124, 128, 131, 131,
N  131, 131, 129, 124, 124, 124, 124, 124, 131, 131, 131, 131, 131, 125, 124, 124, 124, 124, 128, 131, 131, 131, 131, 129, 124, 124, 124, 124, 124, 131, 131,
N  131, 131, 131, 125, 124, 124, 124, 124, 128, 131, 131, 131, 131, 129, 124, 124, 124, 124, 124, 131, 131, 131, 131, 131, 125, 124, 124, 124, 124, 128, 131,
N  131, 131, 131, 129, 124, 124, 124, 124, 125, 131, 131, 131, 131, 131, 125, 124, 124, 124, 124, 128, 131, 131, 131, 131, 129, 124, 124, 124, 124, 125, 131,
N  131, 131, 131, 131, 125, 124, 124, 124, 124, 128, 131, 131, 131, 131, 129, 124, 124, 124, 124, 125, 131, 131, 131, 131, 131, 126, 124, 124, 124, 124, 128,
N  131, 131, 131, 131, 129, 124, 124, 124, 124, 125, 131, 131, 131, 131, 131, 126, 124, 124, 124, 124, 128, 131, 131, 131, 131, 129, 125, 125, 125, 125, 125,
N  130, 130, 130, 130, 130, 126, 125, 125, 125, 125, 128, 130, 130, 130, 130, 129, 125, 125, 125, 125, 125, 130, 130, 130, 130, 130, 126, 125, 125, 125, 125,
N  128, 130, 130, 130, 130, 129, 125, 125, 125, 125, 125, 130, 130, 130, 130, 130, 126, 125, 125, 125, 125, 128, 130, 130, 130, 130, 129, 125, 125, 125, 125,
N  125, 130, 130, 130, 130, 130, 126, 125, 125, 125, 125, 128, 130, 130, 130, 130, 128, 125, 125, 125, 125, 125, 130, 130, 130, 130, 130, 126, 125, 125, 125,
N  125, 128, 130, 130, 130, 130, 128, 125, 125, 125, 125, 125, 130, 130, 130, 130, 130, 126, 125, 125, 125, 125, 128, 130, 130, 130, 130, 128, 125, 125, 125,
N  125, 125, 130, 130, 130, 130, 130, 126, 125, 125, 125, 125, 128, 130, 130, 130, 130, 128, 125, 125, 125, 125, 126, 130, 130, 130, 130, 130, 126, 125, 125,
N  125, 125, 128, 130, 130, 130, 130, 128, 125, 125, 125, 125, 126, 130, 130, 130, 130, 130, 126, 125, 125, 125, 125, 128, 130, 130, 130, 130, 128, 125, 125,
N  126, 126, 126, 129, 129, 129, 129, 129, 126, 126, 126, 126, 126, 128, 129, 129, 129, 129, 128, 126, 126, 126, 126, 126, 129, 129, 129, 129, 129, 126, 126,
N  126, 126, 126, 128, 129, 129, 129, 129, 128, 126, 126, 126, 126, 126, 129, 129, 129, 129, 129, 126, 126, 126, 126, 126, 128, 129, 129, 129, 129, 128, 126,
N  126, 126, 126, 126, 129, 129, 129, 129, 129, 126, 126, 126, 126, 126, 128, 129, 129, 129, 129, 128, 126, 126, 126, 126, 126, 129, 129, 129, 129, 129, 127,
N  126, 126, 126, 126, 128, 129, 129, 129, 129, 128, 126, 126, 126, 126, 126, 129, 129, 129, 129, 129, 127, 126, 126, 126, 126, 128, 129, 129, 129, 129, 128,
N  126, 126, 126, 126, 126, 129, 129, 129, 129, 129, 127, 126, 126, 126, 126, 128, 129, 129, 129, 129, 128, 126, 126, 126, 126, 126, 129, 129, 129, 129, 129,
N  127, 126, 126, 126, 126, 128, 129, 129, 129, 129, 128, 126, 126, 126, 126, 127, 129, 129, 129, 129, 129, 127, 126, 126, 126, 126, 128, 129, 129, 129, 129,
N  128, 126, 126, 126, 126, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128,
N  128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128,
N  128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128,
N  128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128,
N  128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128,
N  128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128,
N  128, 128, 128, 128, 127, 127, 127, 127, 127 };
